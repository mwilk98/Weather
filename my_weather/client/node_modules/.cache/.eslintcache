[{"C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\index.js":"1","C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\App.js":"2","C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\reportWebVitals.js":"3","C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\Menu\\Navbar.js":"4","C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\components\\UserPanel\\UserPanel.js":"5","C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\components\\AirCondition\\AirCondition.js":"6","C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\components\\SignUp\\SignUp.js":"7","C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\components\\Compare\\Compare.js":"8","C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\components\\currentWeather\\CurrentWeather.js":"9","C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\Menu\\Button.js":"10","C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\Menu\\Dropdown.js":"11","C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\components\\UserPanel\\UserWeatherItem.js":"12","C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\components\\AirCondition\\AirConditionItem.js":"13","C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\components\\Compare\\CompareForecastItem.js":"14","C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\components\\Compare\\CompareCurrentWeatherItem.js":"15","C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\components\\currentWeather\\WeatherItem.js":"16","C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\components\\currentWeather\\ForecastDailyItem.js":"17","C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\components\\currentWeather\\ForecastHourlyItem.js":"18","C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\components\\Functions\\CalCelsius.js":"19","C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\components\\Form\\Form.js":"20","C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\components\\Functions\\CalTime.js":"21","C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\components\\Functions\\CalWindSpeed.js":"22","C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\components\\Functions\\CalDate.js":"23","C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\Menu\\MenuItems.js":"24"},{"size":517,"mtime":1633683073982,"results":"25","hashOfConfig":"26"},{"size":1008,"mtime":1636705733557,"results":"27","hashOfConfig":"26"},{"size":375,"mtime":1633683073983,"results":"28","hashOfConfig":"26"},{"size":2539,"mtime":1633683073969,"results":"29","hashOfConfig":"26"},{"size":8862,"mtime":1636705641222,"results":"30","hashOfConfig":"26"},{"size":5491,"mtime":1636550025516,"results":"31","hashOfConfig":"26"},{"size":6689,"mtime":1636707019569,"results":"32","hashOfConfig":"26"},{"size":34562,"mtime":1636706285736,"results":"33","hashOfConfig":"26"},{"size":23836,"mtime":1636985101320,"results":"34","hashOfConfig":"26"},{"size":243,"mtime":1636361649007,"results":"35","hashOfConfig":"26"},{"size":798,"mtime":1633683073968,"results":"36","hashOfConfig":"26"},{"size":2538,"mtime":1636705711213,"results":"37","hashOfConfig":"26"},{"size":2400,"mtime":1636550786646,"results":"38","hashOfConfig":"26"},{"size":1960,"mtime":1636555783348,"results":"39","hashOfConfig":"26"},{"size":1316,"mtime":1636555729199,"results":"40","hashOfConfig":"26"},{"size":4581,"mtime":1636985047022,"results":"41","hashOfConfig":"26"},{"size":2019,"mtime":1633683073981,"results":"42","hashOfConfig":"26"},{"size":1900,"mtime":1633683073981,"results":"43","hashOfConfig":"26"},{"size":131,"mtime":1636704660819,"results":"44","hashOfConfig":"26"},{"size":384,"mtime":1636704651447,"results":"45","hashOfConfig":"26"},{"size":318,"mtime":1636972293885,"results":"46","hashOfConfig":"26"},{"size":131,"mtime":1636704690858,"results":"47","hashOfConfig":"26"},{"size":277,"mtime":1636969959592,"results":"48","hashOfConfig":"26"},{"size":143,"mtime":1633683073968,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"djylt1",{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"55","usedDeprecatedRules":"52"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"52"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"52"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"78","usedDeprecatedRules":"52"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\index.js",[],["103","104"],"C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\App.js",["105"],"import './App.css';\r\nimport CurrentWeather from './components/currentWeather/CurrentWeather';\r\nimport Navbar from './Menu/Navbar'\r\nimport {Router as Router, Switch, Route} from 'react-router-dom';\r\nimport UserPanel from './components/UserPanel/UserPanel';\r\nimport AirCondition from './components/AirCondition/AirCondition';\r\nimport Compare from './components/Compare/Compare';\r\nimport SignUp from './components/SignUp/SignUp';\r\n\r\nimport { createBrowserHistory } from \"history\";\r\n\r\nconst history = createBrowserHistory();\r\n\r\nfunction App() \r\n{\r\n  return (\r\n    <Router history={history}>\r\n      <Navbar/>\r\n      <Switch>\r\n        <Route path='/' exact component={CurrentWeather}/>\r\n        <Route path='/my-weather' exact component={UserPanel}/>\r\n        <Route path='/air-condition' exact component={AirCondition}/>\r\n        <Route path='/compare' exact component={Compare}/>\r\n        <Route path='/sign-up' exact component={SignUp}/>\r\n      </Switch>\r\n    </Router>\r\n\r\n\r\n\r\n\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\reportWebVitals.js",[],"C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\Menu\\Navbar.js",[],"C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\components\\UserPanel\\UserPanel.js",["106"],"import React, {useState, useEffect} from 'react';\r\nimport './UserPanel.css';\r\nimport Axios from 'axios';\r\nimport UserWeatherItem from './UserWeatherItem';\r\nimport {Link} from 'react-router-dom';\r\n\r\nfunction UserPanel()\r\n{\r\n\r\n    const [Lid, setLid] = useState('');\r\n    const [cityName, setCityName] = useState('');\r\n    const [date, setDate] = useState('');\r\n    const [time, setTime] = useState('');\r\n    const [weatherState, setWeatherState] = useState('');\r\n    const [temp, setTemp] = useState('');\r\n    const [clouds, setClouds] = useState('');\r\n    const [humidity, setHumidity] = useState('');\r\n    const [pressure, setPressure] = useState('');\r\n    const [wind, setWind] = useState('');\r\n    const [aqi, setAqi] = useState('');\r\n\r\n    const [cityWeatherList, setcityWeatherList] = useState([]);\r\n    const [property, setProperty] = useState([]);\r\n\r\n    Axios.defaults.withCredentials = true;\r\n\r\n    const [loginStatus, setLoginStatus] = useState('');\r\n    console.log(loginStatus);\r\n\r\n   \r\n    useEffect(()=>\r\n    {\r\n        Axios.get('http://localhost:3001/api/login').then((response)=>\r\n        {\r\n            if(response.data.loggedIn===true)\r\n            {\r\n                setLoginStatus(response.data.user[0].username);\r\n                console.log(response);\r\n            }else\r\n            {\r\n                console.log(response);\r\n                setLoginStatus(\"unlogged\");\r\n            }\r\n        });\r\n\r\n        Axios.get('http://localhost:3001/api/get')\r\n        .then((response)=>\r\n        {\r\n            setcityWeatherList(response.data);\r\n            setProperty(response.data[0]);\r\n            console.log(response);\r\n            console.log(\"PropertyGet:\",property);\r\n        });\r\n        \r\n        setLid(0);\r\n        setProperty(cityWeatherList[Lid]);\r\n    },[])\r\n\r\n    const submitWeather = () =>\r\n    {\r\n        Axios.post('http://localhost:3001/api/insert',\r\n        {\r\n            cityName:cityName,\r\n            date:date,\r\n            time:time,\r\n            weatherState:weatherState,\r\n            temp:temp,\r\n            clouds:clouds,\r\n            humidity:humidity,\r\n            pressure:pressure,\r\n            wind:wind,\r\n            aqi:aqi\r\n        });\r\n        setcityWeatherList([...cityWeatherList,{\r\n            cityName:cityName,\r\n            date:date,\r\n            time:time,\r\n            weatherState:weatherState,\r\n            temp:temp,\r\n            clouds:clouds,\r\n            humidity:humidity,\r\n            pressure:pressure,\r\n            wind:wind,\r\n            aqi:aqi\r\n        },]);\r\n        window.location.reload(false);\r\n    }\r\n    const deleteWeather = (id) =>\r\n    {\r\n        console.log(id);\r\n        Axios.post('http://localhost:3001/api/delete',\r\n        {\r\n            id:id\r\n        });\r\n        \r\n        window.location.reload(false);\r\n        \r\n        console.log(\"USUNIETO\");\r\n    }\r\n    const logout = () =>\r\n    {\r\n        Axios.post('http://localhost:3001/api/logout')\r\n            .then((response) =>\r\n            {\r\n            console.log(response);\r\n            if(response.data.message)\r\n            {\r\n                setLoginStatus(\"logged\");\r\n            }else\r\n            {\r\n                setLoginStatus(\"unlogged\");\r\n            }\r\n        })\r\n        Axios.get('http://localhost:3001/api/logout').then((response)=>\r\n        {\r\n            if(response.data.loggedIn===false)\r\n            {\r\n                console.log(response);\r\n                setLoginStatus(\"unlogged\");\r\n            }else\r\n            {\r\n                setLoginStatus(\"logged\");\r\n                console.log(response);\r\n            }\r\n        })\r\n        window.location.reload(false);\r\n    }\r\n    const nextProperty = () => \r\n    {\r\n        const newIndex = Lid+1;\r\n        setLid(Lid+1);\r\n        setProperty(cityWeatherList[newIndex]);\r\n\r\n        console.log(\"New index:\",newIndex);\r\n        console.log(\"Property:\",property);\r\n    }\r\n    \r\n    const prevProperty = () => \r\n    {\r\n        const newIndex = Lid-1;\r\n        setLid(Lid-1);\r\n        setProperty(cityWeatherList[newIndex]);\r\n        console.log(\"New index:\",newIndex);\r\n        console.log(\"Property:\",property);\r\n    }\r\n    if(loginStatus!==\"unlogged\")\r\n    {\r\n        return(\r\n            <div className=\"hero2\"  style={\r\n                                    { \r\n                                        backgroundImage: `url(\"/images/bg_signUp.jpg\")` \r\n                                    }\r\n            }>\r\n                <div className=\"form-box2\">\r\n                    <div className=\"login-input-group2\">\r\n\r\n                        <input type=\"text\" className=\"input-field2\" placeholder=\"Miejsce\" required \r\n                        onChange={(e)=>{setCityName(e.target.value)}}/>\r\n\r\n                        <input type=\"text\" className=\"input-field2\" placeholder=\"Data\" required \r\n                        onChange={(e)=>{setDate(e.target.value)}}/>\r\n\r\n                        <input type=\"text\" className=\"input-field2\" placeholder=\"Godzina\" required \r\n                        onChange={(e)=>{setTime(e.target.value)}}/>\r\n\r\n                        <input type=\"text\" className=\"input-field2\" placeholder=\"Pogoda\" required \r\n                        onChange={(e)=>{setWeatherState(e.target.value)}}/>\r\n\r\n                        <input type=\"text\" className=\"input-field2\" placeholder=\"Temperatura (°C)\" required \r\n                        onChange={(e)=>{setTemp(e.target.value)}}/>\r\n\r\n                        <input type=\"text\" className=\"input-field2\" placeholder=\"Zachmurzenie (%)\" required \r\n                        onChange={(e)=>{setClouds(e.target.value)}}/>\r\n\r\n                        <input type=\"text\" className=\"input-field2\" placeholder=\"Wilgotność\" required \r\n                        onChange={(e)=>{setHumidity(e.target.value)}}/>\r\n\r\n                        <input type=\"text\" className=\"input-field2\" placeholder=\"Ciśnienie (hPa)\" required \r\n                        onChange={(e)=>{setPressure(e.target.value)}}/>\r\n\r\n                        <input type=\"text\" className=\"input-field2\" placeholder=\"Wiatr (km/h)\" required \r\n                        onChange={(e)=>{setWind(e.target.value)}}/>\r\n\r\n                        <input type=\"text\" className=\"input-field2\" placeholder=\"Jakość powietrza (1-5)\" \r\n                        required onChange={(e)=>{setAqi(e.target.value)}}/>\r\n\r\n                        <button type=\"submit\" className=\"submit-btn2\" onClick={submitWeather}> Dodaj </button>\r\n\r\n                        <button type=\"submit\" className=\"submit-btn2\" onClick={logout}> Wyloguj </button>\r\n\r\n                        {loginStatus}\r\n                    </div>\r\n                </div>   \r\n                <div className=\"user-main\">\r\n                {property ?(\r\n                    <div className=\"user-cards\">\r\n                        <button className=\"left\" \r\n                            onClick={() => nextProperty()} \r\n                            disabled={Lid === cityWeatherList.length-1}\r\n                        >Next\r\n                        </button>\r\n                        <button className=\"right\"\r\n                            onClick={() => prevProperty()} \r\n                            disabled={Lid === 0}\r\n                        >Prev\r\n                        </button>\r\n                        <div className=\"main-cards\">\r\n                            <div className=\"userCards-slider\">\r\n                                <div className=\"userCards-slider-wrapper\"   style={\r\n                                                                            {\r\n                                                                                'transform':`translateX(-${Lid*(100/cityWeatherList.length)}%)`\r\n                                                                            }\r\n                                }>\r\n                                    {cityWeatherList.map(fde => <UserWeatherItem element={fde} deleteW={deleteWeather}/>)}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                ):null}\r\n                </div> \r\n            </div>\r\n        )\r\n    }else{\r\n        return(\r\n            <div className=\"hero\"   style={\r\n                                    { \r\n                                        backgroundImage: `url(\"/images/bg_signUp.jpg\")` \r\n                                    }\r\n            }>\r\n                <div className=\"form-box\">\r\n                    <div className=\"login-input-group\" >\r\n                        <h1>Musisz być zalogowanym aby korzystać z tej funkcji.</h1>\r\n                        <Link to='/sign-up'><button type=\"submit\" className=\"submit-btn\"> Zaloguj </button></Link>\r\n                        {loginStatus}\r\n                    </div>\r\n                </div>   \r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default UserPanel;","C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\components\\AirCondition\\AirCondition.js",[],"C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\components\\SignUp\\SignUp.js",[],"C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\components\\Compare\\Compare.js",["107","108"],"import React from 'react'\r\nimport Form from '../Form/Form'\r\nimport CalDate from '../Functions/CalDate';\r\nimport CalCelsius from '../Functions/CalCelsius';\r\nimport CalWindSpeed from '../Functions/CalWindSpeed';\r\nimport CompareCurrentWeatherItem from './CompareCurrentWeatherItem';\r\nimport CompareForecastItem from './CompareForecastItem';\r\n\r\nimport './Compare.css';\r\n\r\nconst API_key_OWM=\"157d33f8987d245bc6a1997408e90015\";\r\nconst API_key_WA = \"d42d0d989ead4316b9d143558213105\";\r\nconst API_key_w = \"4c7c27f8abf34ae09c61bad9a897be7e\";\r\n\r\nclass Compare extends React.Component\r\n{\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.state=\r\n        {\r\n            value:\"\",\r\n            compareCurrentElements:[\r\n            ],\r\n            ForecastDailyElements:[\r\n            ],\r\n            ForecastDailyElements:[\r\n            ],\r\n            source:\"OpenWeatherMap\",\r\n            city:undefined,\r\n            lat:undefined,\r\n            lon:undefined,\r\n            currentProperty:undefined,\r\n            Property:undefined,\r\n            Property:undefined,\r\n            weatherComp:undefined,\r\n            tempComp:undefined,\r\n            pressureComp:undefined,\r\n            windComp:undefined,\r\n            error:false\r\n        };\r\n    };\r\n\r\n    nextProperty = (Property,Elements) => \r\n    {\r\n        const newIndex = Property.id +1;\r\n\r\n        this.setState(\r\n        {\r\n            Property: Elements[newIndex]\r\n        });\r\n\r\n        console.log(newIndex);\r\n    };\r\n\r\n    prevProperty= (Property,Elements) => \r\n    {\r\n        const newIndex = Property.id -1;\r\n\r\n        this.setState(\r\n        {\r\n            Property: Elements[newIndex]\r\n        });\r\n    };\r\n    setSource = (source) => \r\n    {\r\n        this.setState(\r\n        {\r\n                source:source\r\n        });\r\n\r\n        if(source===\"OpenWeatherMap\")\r\n        {\r\n            this.getForecastDailyOWM(this.state.lat,this.state.lon);\r\n        }\r\n\r\n        if(source===\"WeatherApi\")\r\n        {\r\n            this.getForecastDailyWA(this.state.city);\r\n        }\r\n\r\n        if(source===\"TommorowIO\")\r\n        {\r\n            this.getForecastDailyTI(this.state.lat,this.state.lon);\r\n        }\r\n\r\n        if(source===\"VisualCrossing\")\r\n        {\r\n            this.getForecastDailyVC(this.state.city);\r\n        }\r\n\r\n        if(source===\"Weatherbit\")\r\n        {\r\n            this.getForecastDailyWB(this.state.city);\r\n        }\r\n    };\r\n\r\n    getDefaultCompare = (city) =>\r\n    {\r\n        console.log(city)\r\n        \r\n        this.setState(\r\n        {\r\n            compareCurrentElements:[]\r\n        });\r\n        \r\n        const result = fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city}&lang=pl&APPID=${API_key_OWM}`)\r\n        .then(response => {\r\n            if(response.ok){\r\n                return response\r\n            }\r\n            throw Error(\"Błąd pobierania danych z API\")\r\n        })\r\n        .then(response => response.json())\r\n        .then(response => {\r\n            console.log(response)\r\n            this.getForecastDailyOWM(response.coord.lat,response.coord.lon)\r\n            this.getWeatherWeatherApi(city)\r\n            this.getWeatherTommorowIo(response.coord.lat,response.coord.lon)\r\n            this.getWeatherVisualcrossing(city)\r\n            this.getWeatherWeatherbit(city)\r\n            this.setState({\r\n                compareCurrentElements:[...this.state.compareCurrentElements,{\r\n                    'id':1,\r\n                    'date':CalDate(response.dt),\r\n                    'weather':response.weather[0].description,\r\n                    'temp':CalCelsius(response.main.temp),\r\n                    'pressure':response.main.pressure,\r\n                    'wind':CalWindSpeed(response.wind.speed),\r\n                    'image':weatherIcons[response.weather[0].id],\r\n                    'source':\"OpenWeatherMap\"\r\n                }],\r\n                city:response.name,\r\n                lat:response.coord.lat,\r\n                lon:response.coord.lon,\r\n                weatherComp:response.weather[0].description,\r\n                tempComp:CalCelsius(response.main.temp),\r\n                pressureComp:response.main.pressure,\r\n                windComp:CalWindSpeed(response.wind.speed),\r\n            });\r\n            this.setState(\r\n            {\r\n                currentProperty:this.state.compareCurrentElements[0]\r\n            }); \r\n\r\n            return fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city}&lang=pl&APPID=${API_key_OWM}`);\r\n        })\r\n        .then(responseAirQuality => responseAirQuality.json()) \r\n        .catch(err =>{\r\n            console.log(err);\r\n            this.setState(prevState =>\r\n            {\r\n                return{\r\n                error:true,\r\n                city:prevState.city\r\n                }\r\n            });\r\n        });\r\n\r\n        result.then(r =>\r\n        {\r\n            console.log(r.weather[0].id);\r\n            \r\n            fetch(`http://localhost:3001/api/weather`,\r\n            {\r\n                method: 'post',\r\n                body: JSON.stringify({id: 200}),\r\n                headers: {'Content-Type': 'application/json'}})\r\n            .then(response => \r\n            {\r\n                if(response.ok)\r\n                {\r\n                    return response;\r\n                }\r\n                throw Error(\"Błąd pobierania danych z API\");\r\n            })\r\n            .then(response => response.json())\r\n            .then(response => \r\n            {\r\n                console.log(response);\r\n                console.log(this.state.compareCurrentElements[0]);\r\n                const newIds = this.state.compareCurrentElements.slice(); //copy the array\r\n                newIds[0].image = response[0].path; //execute the manipulations\r\n                this.setState(\r\n                {\r\n                    compareCurrentElements: newIds\r\n                });\r\n            });\r\n        });\r\n    };\r\n    getWeatherCompare = (e) =>\r\n    {\r\n        e.preventDefault()\r\n        \r\n        this.setState(\r\n        {\r\n            compareCurrentElements:[]\r\n        });\r\n        \r\n        const result = fetch(`http://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&lang=pl&APPID=${API_key_OWM}`)\r\n        .then(response => {\r\n            if(response.ok){\r\n                return response\r\n            }\r\n            throw Error(\"Błąd pobierania danych z API\")\r\n        })\r\n        .then(response => response.json())\r\n        .then(response => {\r\n            console.log(response)\r\n            this.getForecastDailyOWM(response.coord.lat,response.coord.lon)\r\n            this.getWeatherWeatherApi(this.state.value)\r\n            this.getWeatherTommorowIo(response.coord.lat,response.coord.lon)\r\n            this.getWeatherVisualcrossing(this.state.value)\r\n            this.getWeatherWeatherbit(this.state.value)\r\n            this.setState({\r\n                compareCurrentElements:[...this.state.compareCurrentElements,{\r\n                    'id':1,\r\n                    'date':CalDate(response.dt),\r\n                    'weather':response.weather[0].description,\r\n                    'temp':CalCelsius(response.main.temp),\r\n                    'pressure':response.main.pressure,\r\n                    'wind':CalWindSpeed(response.wind.speed),\r\n                    'image':weatherIcons[response.weather[0].id],\r\n                    'source':\"OpenWeatherMap\"\r\n                }],\r\n                city:response.name,\r\n                lat:response.coord.lat,\r\n                lon:response.coord.lon,\r\n                weatherComp:response.weather[0].description,\r\n                tempComp:CalCelsius(response.main.temp),\r\n                pressureComp:response.main.pressure,\r\n                windComp:CalWindSpeed(response.wind.speed),\r\n            });\r\n            this.setState(\r\n            {\r\n                currentProperty:this.state.compareCurrentElements[0]\r\n            }); \r\n\r\n            return fetch(`http://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&lang=pl&APPID=${API_key_OWM}`);\r\n        })\r\n        .then(responseAirQuality => responseAirQuality.json()) \r\n        .catch(err =>{\r\n            console.log(err);\r\n            this.setState(prevState =>\r\n            {\r\n                return{\r\n                error:true,\r\n                city:prevState.city\r\n                }\r\n            });\r\n        });\r\n\r\n        result.then(r =>\r\n        {\r\n            console.log(r.weather[0].id);\r\n            \r\n            fetch(`http://localhost:3001/api/weather`,\r\n            {\r\n                method: 'post',\r\n                body: JSON.stringify({id: 200}),\r\n                headers: {'Content-Type': 'application/json'}})\r\n            .then(response => \r\n            {\r\n                if(response.ok)\r\n                {\r\n                    return response;\r\n                }\r\n                throw Error(\"Błąd pobierania danych z API\");\r\n            })\r\n            .then(response => response.json())\r\n            .then(response => \r\n            {\r\n                console.log(response);\r\n                console.log(this.state.compareCurrentElements[0]);\r\n                const newIds = this.state.compareCurrentElements.slice(); //copy the array\r\n                newIds[0].image = response[0].path; //execute the manipulations\r\n                this.setState(\r\n                {\r\n                    compareCurrentElements: newIds\r\n                });\r\n            });\r\n        });\r\n    };\r\n\r\n    getForecastDailyOWM = (lat,lon)=>\r\n    {\r\n        console.log(lat);\r\n\r\n        this.setState({\r\n            ForecastDailyElements:[]\r\n        });\r\n        \r\n        fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&lang=pl&appid=${API_key_OWM}`)\r\n        .then(response => \r\n        {\r\n            if(response.ok)\r\n            {\r\n                return response;\r\n            }\r\n              throw Error(\"Błąd pobierania danych z API\");\r\n        })\r\n        .then(response => response.json())\r\n        .then(response => \r\n        {\r\n            console.log(response);\r\n            for (var i = 0; i < 8; i++) \r\n            {\r\n                this.setState(\r\n                {\r\n                    ForecastDailyElements:[...this.state.ForecastDailyElements,\r\n                    {\r\n                        'id':i,\r\n                        'date':CalDate(response.daily[i].dt),\r\n                        'weather':response.daily[i].weather[0].description,\r\n                        'tempMax':CalCelsius(response.daily[i].temp.max),\r\n                        'tempMin':CalCelsius(response.daily[i].temp.min),\r\n                        'pressure':response.daily[i].pressure,\r\n                        'wind':CalWindSpeed(response.daily[i].wind_speed),\r\n                        'image':weatherIcons[response.daily[i].weather[0].id],\r\n                        'clouds':response.daily[i].clouds,\r\n                        'humidity':response.daily[i].humidity,\r\n                    }],  \r\n                });\r\n            };  \r\n            this.setState(\r\n            {\r\n                Property:this.state.ForecastDailyElements[1]\r\n            });\r\n        });\r\n    };\r\n    getWeatherWeatherApi = (city) =>\r\n    {\r\n            \r\n        fetch(`http://api.weatherapi.com/v1/current.json?key=${API_key_WA}&q=${city}&days=7&aqi=yes&alerts=yes&lang=pl`)\r\n        .then(response => \r\n        {\r\n            if(response.ok)\r\n            {\r\n                return response;\r\n            }\r\n            throw Error(\"Błąd pobierania danych z API\");\r\n        })\r\n        .then(response => response.json())\r\n        .then(response =>\r\n        {\r\n            console.log(response);\r\n            this.setState(\r\n            {\r\n                compareCurrentElements:[...this.state.compareCurrentElements,\r\n                {\r\n                    'id':2,\r\n                    'date':response.current.last_updated,\r\n                    'weather':response.current.condition.text,\r\n                    'temp':response.current.temp_c,\r\n                    'pressure':response.current.pressure_mb,\r\n                    'wind':response.current.wind_kph,\r\n                    'image':weatherIcons[response.current.condition.code],\r\n                    'source':\"WeatherApi\"\r\n                }],\r\n            });\r\n        })\r\n        .catch(err =>\r\n        {\r\n            console.log(err);\r\n            this.setState(prevState =>\r\n            {\r\n                return{\r\n                error:true,\r\n                city:prevState.city\r\n                }\r\n            });\r\n        });\r\n    };\r\n\r\n    getForecastDailyWA = (city) =>\r\n    {\r\n        this.setState(\r\n        {\r\n            ForecastDailyElements:[]\r\n        });\r\n            \r\n        fetch(`http://api.weatherapi.com/v1/forecast.json?key=${API_key_WA}&q=${city}&days=4&aqi=yes&alerts=yes&lang=pl`)\r\n        .then(response => \r\n        {\r\n            if(response.ok)\r\n            {\r\n                return response;\r\n            }\r\n            throw Error(\"Błąd pobierania danych z API\");\r\n        })\r\n        .then(response => response.json())\r\n        .then(response => \r\n        {\r\n            console.log(response);\r\n            for (var i = 0; i < 3; i++) \r\n            {\r\n                this.setState(\r\n                {\r\n                    ForecastDailyElements:[...this.state.ForecastDailyElements,\r\n                    {\r\n                        'id':i,\r\n                        'date':response.forecast.forecastday[i].date,\r\n                        'weather':response.forecast.forecastday[i].day.condition.text,\r\n                        'tempMax':response.forecast.forecastday[i].day.maxtemp_c,\r\n                        'tempMin':response.forecast.forecastday[i].day.mintemp_c,\r\n                        'pressure':\"-\",\r\n                        'wind':\"-\",\r\n                        'image':weatherIcons[response.forecast.forecastday[i].day.condition.code],\r\n                        'clouds':\"-\",\r\n                        'humidity':response.forecast.forecastday[i].day.avghumidity,\r\n                    }],\r\n                });\r\n            }\r\n            this.setState(\r\n            {\r\n                Property:this.state.ForecastDailyElements[1]\r\n            }) \r\n        })\r\n        .catch(err =>\r\n        {\r\n            console.log(err)\r\n            this.setState(prevState =>\r\n            {\r\n                return{\r\n                error:true,\r\n                city:prevState.city\r\n                }\r\n            });\r\n        });\r\n    };\r\n\r\n    getWeatherTommorowIo = (lat,lon) =>\r\n    {\r\n        \r\n        this.setState(\r\n        {\r\n            ForecastDailyElements:[]\r\n        });\r\n            \r\n        fetch(`https://api.tomorrow.io/v4/timelines?location=${lat},${lon}&fields=temperature,humidity,windSpeed,cloudCover,weatherCode,pressureSurfaceLevel&timesteps=1d&units=metric&apikey=Xsa59kYGGrHiXs1TZ3cItU7zRZ4FfGQ8`)\r\n        .then(response => \r\n        {\r\n            if(response.ok)\r\n            {\r\n                return response;\r\n            }\r\n            throw Error(\"Błąd pobierania danych z API\");\r\n        })\r\n        .then(response => response.json())\r\n        .then(response => \r\n        {\r\n            console.log(response);\r\n            this.setState(\r\n            {\r\n                compareCurrentElements:[...this.state.compareCurrentElements,\r\n                {\r\n                    'id':3,\r\n                    'date':response.data.timelines[0].startTime,\r\n                    'weather':weatherConditions[response.data.timelines[0].intervals[0].values.weatherCode],\r\n                    'temp':response.data.timelines[0].intervals[0].values.temperature,\r\n                    'pressure':response.data.timelines[0].intervals[0].values.pressureSurfaceLevel,\r\n                    'wind':CalWindSpeed(response.data.timelines[0].intervals[0].values.windSpeed),\r\n                    'image':weatherIcons[response.data.timelines[0].intervals[0].values.weatherCode],\r\n                    'source':\"TommorowIo\"\r\n                }],\r\n            });\r\n        })\r\n        .catch(err =>\r\n        {\r\n            console.log(err)\r\n            this.setState(prevState =>\r\n            {\r\n                return{\r\n                error:true,\r\n                city:prevState.city\r\n                }\r\n            });\r\n        });\r\n    };\r\n\r\n    getForecastDailyTI = (lat,lon) =>\r\n    {\r\n        this.setState(\r\n        {\r\n            ForecastDailyElements:[]\r\n        });\r\n            \r\n        fetch(`https://api.tomorrow.io/v4/timelines?location=${lat},${lon}&fields=temperature,humidity,windSpeed,cloudCover,weatherCode,pressureSurfaceLevel&timesteps=1d&units=metric&apikey=Xsa59kYGGrHiXs1TZ3cItU7zRZ4FfGQ8`)\r\n        .then(response => \r\n        {\r\n            if(response.ok)\r\n            {\r\n                return response;\r\n            }\r\n            throw Error(\"Błąd pobierania danych z API\");\r\n        })\r\n        .then(response => response.json())\r\n        .then(response => \r\n        {\r\n            console.log(response);\r\n            for (var i = 0; i < 8; i++) \r\n            {\r\n                this.setState(\r\n                    {\r\n                    ForecastDailyElements:[...this.state.ForecastDailyElements,\r\n                    {\r\n                        'id':i,\r\n                        'date':response.data.timelines[0].intervals[i].startTime,\r\n                        'weather':weatherConditions[response.data.timelines[0].intervals[i].values.weatherCode],\r\n                        'tempMax':response.data.timelines[0].intervals[i].values.temperature,\r\n                        'tempMin':response.data.timelines[0].intervals[i].values.temperature,\r\n                        'pressure':response.data.timelines[0].intervals[i].values.pressureSurfaceLevel,\r\n                        'wind':response.data.timelines[0].intervals[i].values.windSpeed,\r\n                        'image':weatherIcons[response.data.timelines[0].intervals[i].values.weatherCode],\r\n                        'clouds':response.data.timelines[0].intervals[i].values.cloudCover,\r\n                        'humidity':response.data.timelines[0].intervals[i].values.humidity,\r\n                    }],  \r\n                });\r\n            }  \r\n            this.setState(\r\n            {\r\n                Property:this.state.ForecastDailyElements[1]\r\n            }); \r\n        })\r\n        .catch(err =>\r\n        {\r\n            console.log(err);\r\n            this.setState(prevState =>{\r\n                return{\r\n                error:true,\r\n                city:prevState.city\r\n                }\r\n            });\r\n        });\r\n    };\r\n\r\n    getWeatherVisualcrossing = (city) =>\r\n    {\r\n\r\n        this.setState(\r\n            {\r\n            ForecastDailyElements:[]\r\n        });\r\n            \r\n        fetch(`https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/weatherdata/forecast?aggregateHours=24&combinationMethod=aggregate&contentType=json&unitGroup=metric&locationMode=single&iconSet=icons2&key=LHKNDUGQ4MSQTL5749JVGX4XV&dataElements=default&locations=${city}`)\r\n        .then(response => \r\n        {\r\n            if(response.ok)\r\n            {\r\n                return response;\r\n            }\r\n            throw Error(\"Błąd pobierania danych z API\");\r\n        })\r\n        .then(response => response.json())\r\n        .then(response => \r\n        {\r\n            console.log(response);\r\n            this.setState(\r\n            {\r\n                compareCurrentElements:[...this.state.compareCurrentElements,\r\n                {\r\n                    'id':4,\r\n                    'date':response.location.currentConditions.datetime,\r\n                    'weather':response.location.currentConditions.icon,\r\n                    'temp':response.location.currentConditions.temp,\r\n                    'pressure':response.location.currentConditions.sealevelpressure,\r\n                    'wind':response.location.currentConditions.wspd,\r\n                    'image':weatherIcons[0],\r\n                    'source':\"VisualCrossing\"\r\n                }],\r\n            });\r\n        })\r\n        .catch(err =>\r\n        {\r\n            console.log(err)\r\n            this.setState(prevState =>{\r\n                return{\r\n                error:true,\r\n                city:prevState.city\r\n                }\r\n            });\r\n        });\r\n    };\r\n\r\n    getForecastDailyVC = (city) =>\r\n    {\r\n        this.setState(\r\n        {\r\n            ForecastDailyElements:[]\r\n        });\r\n            \r\n        fetch(`https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/weatherdata/forecast?aggregateHours=24&combinationMethod=aggregate&contentType=json&unitGroup=metric&locationMode=single&iconSet=icons2&key=LHKNDUGQ4MSQTL5749JVGX4XV&dataElements=default&locations=${city}`)\r\n        .then(response => \r\n        {\r\n            if(response.ok)\r\n            {\r\n                return response;\r\n            }\r\n            throw Error(\"Błąd pobierania danych z API\");\r\n        })\r\n        .then(response => response.json())\r\n        .then(response => \r\n        {\r\n            console.log(response);\r\n            for (var i = 0; i < 8; i++) \r\n            {\r\n                this.setState(\r\n                {\r\n                    ForecastDailyElements:[...this.state.ForecastDailyElements,\r\n                    {\r\n                        'id':i,\r\n                        'date':CalDate(response.location.values[i].datetime),\r\n                        'weather':response.location.values[i].conditions,\r\n                        'tempMax':response.location.values[i].maxt,\r\n                        'tempMin':response.location.values[i].mint,\r\n                        'pressure':\"-\",\r\n                        'wind':1.6*response.location.values[i].wspd,\r\n                        'image':\"-\",\r\n                        'clouds':response.location.values[i].cloudcover,\r\n                        'humidity':response.location.values[i].humidity,\r\n                    }],  \r\n                });\r\n            }  \r\n            this.setState(\r\n            {\r\n                Property:this.state.ForecastDailyElements[1]\r\n            });\r\n        })\r\n        .catch(err =>\r\n        {\r\n            console.log(err)\r\n            this.setState(prevState =>\r\n            {\r\n                return{\r\n                error:true,\r\n                city:prevState.city\r\n                }\r\n            })\r\n        });\r\n    };\r\n\r\n    getWeatherWeatherbit = (city) =>\r\n    {\r\n        this.setState(\r\n        {\r\n            ForecastDailyElements:[]\r\n        });\r\n            \r\n        fetch(` https://api.weatherbit.io/v2.0/forecast/daily?city=${city}&lang=pl&key=${API_key_w}`)\r\n        .then(response => \r\n        {\r\n            if(response.ok)\r\n            {\r\n                return response;\r\n            }\r\n            throw Error(\"Błąd pobierania danych z API\");\r\n        })\r\n        .then(response => response.json())\r\n        .then(response => \r\n        {\r\n            console.log(response);\r\n            this.setState(\r\n            {\r\n                compareCurrentElements:[...this.state.compareCurrentElements,\r\n                {\r\n                    'id':5,\r\n                    'date':response.data[0].ob_time,\r\n                    'weather':response.data[0].weather.description,\r\n                    'temp':response.data[0].temp,\r\n                    'pressure':Math.floor(response.data[0].pres),\r\n                    'wind':Math.floor(1.609*response.data[0].wind_spd),\r\n                    'image':weatherIcons[response.data[0].weather.code],\r\n                    'source':\"Weatherbit\"\r\n                }],\r\n            });\r\n        })\r\n        .catch(err =>\r\n        {\r\n            console.log(err);\r\n            this.setState(prevState =>\r\n            {\r\n                return{\r\n                error:true,\r\n                city:prevState.city\r\n                }\r\n            });\r\n        });\r\n    };\r\n\r\n    getForecastDailyWB = (city) =>\r\n    {\r\n\r\n        this.setState({\r\n            ForecastDailyElements:[]\r\n        });\r\n            \r\n        fetch(` https://api.weatherbit.io/v2.0/forecast/daily?city=${city}&lang=pl&key=${API_key_w}`)\r\n        .then(response => \r\n        {\r\n            if(response.ok)\r\n            {\r\n                return response;\r\n            }\r\n            throw Error(\"Błąd pobierania danych z API\");\r\n        })\r\n        .then(response => response.json())\r\n        .then(response => \r\n        {\r\n            console.log(response);\r\n            for (var i = 0; i < 8; i++) \r\n            {\r\n                this.setState(\r\n                {\r\n                    ForecastDailyElements:[...this.state.ForecastDailyElements,\r\n                    {\r\n                        'id':i,\r\n                        'date':response.data[i].datetime,\r\n                        'weather':response.data[i].weather.description,\r\n                        'tempMax':response.data[i].max_temp,\r\n                        'tempMin':response.data[i].min_temp,\r\n                        'pressure':response.data[i].pres,\r\n                        'wind':Math.floor(1.609*response.data[i].wind_spd),\r\n                        'image':weatherIcons[response.data[i].weather.code],\r\n                        'clouds':response.data[i].clouds,\r\n                        'humidity':\"-\",\r\n                    }],  \r\n                });\r\n            }  \r\n            this.setState(\r\n            {\r\n                Property:this.state.ForecastDailyElements[1]\r\n            }); \r\n        })\r\n        .catch(err =>\r\n        {\r\n            console.log(err);\r\n            this.setState(prevState =>\r\n            {\r\n                return{\r\n                error:true,\r\n                city:prevState.city\r\n                }\r\n            });\r\n        });\r\n    };\r\n\r\n    inputHandler=(e)=>\r\n    {\r\n        this.setState(\r\n        {\r\n            value:e.target.value\r\n        });\r\n    };\r\n    componentDidMount()\r\n    {\r\n        this.getDefaultCompare(\"Warszawa\");\r\n    }\r\n    render(){\r\n            return( \r\n                <div    style={\r\n                        { \r\n                            backgroundImage: `url(\"/images/bg_comp.jpg\")` \r\n                        }\r\n                }>\r\n                    <div className=\"city-form\">\r\n                        <Form \r\n                            value={this.state.value}  \r\n                            handler={this.inputHandler}\r\n                            submit={this.getWeatherCompare}\r\n                        /> \r\n                    </div>\r\n                    <div className=\"compare-main-cards\">\r\n                        {this.state.currentProperty ?( \r\n                            <div className=\"compare-cards-slider\">\r\n                                <div className=\"compare-cards-slider-wrapper\"   style={\r\n                                                                                {\r\n                                                                                    'transform':`translateX(-${this.state.currentProperty.id*(100/this.state.compareCurrentElements.length)}%)`\r\n                                                                                }\r\n                                }>\r\n                                    {this.state.compareCurrentElements.map(fde => <CompareCurrentWeatherItem compare={this.state} key={fde.id} element={fde} />)}\r\n                                </div>\r\n                        \r\n                            </div>\r\n                    ):null}\r\n                    </div>\r\n                    <button \r\n                        onClick={() => this.setSource(\"OpenWeatherMap\")} \r\n                    >\r\n                        OpenWeatherMap\r\n                    </button>\r\n                    <button \r\n                        onClick={() => this.setSource(\"WeatherApi\")} \r\n                    >\r\n                        WeatherApi\r\n                    </button>\r\n                    <button \r\n                        onClick={() => this.setSource(\"TommorowIO\")} \r\n                    >\r\n                        TommorowIO\r\n                    </button>\r\n                    <button \r\n                        onClick={() => this.setSource(\"VisualCrossing\")}\r\n                    >\r\n                        VisualCrossing\r\n                    </button>\r\n                    <button \r\n                        onClick={() => this.setSource(\"Weatherbit\")}\r\n                    >\r\n                        Weatherbit\r\n                    </button>\r\n                    <div className=\"compare-main\">\r\n                        {this.state.Property ?(\r\n                            <div className=\"main-cards\"> \r\n                                <button className=\"left\" \r\n                                    onClick={() => this.nextProperty(this.state.Property,this.state.ForecastDailyElements)} \r\n                                    disabled={this.state.Property.id === this.state.ForecastDailyElements.length-3}\r\n                                >\r\n                                    Next\r\n                                </button>\r\n                                <button className=\"right\"\r\n                                    onClick={() => this.prevProperty(this.state.Property,this.state.ForecastDailyElements)} \r\n                                    disabled={this.state.Property.id === 1}\r\n                                >\r\n                                    Prev\r\n                                </button>\r\n                                <div className=\"cards-slider\">         \r\n                                    <div className=\"cards-slider-wrapper\"   style={\r\n                                                                            {\r\n                                                                                'transform':`translateX(-${this.state.Property.id*(100/this.state.ForecastDailyElements.length)}%)`\r\n                                                                            }\r\n                                    }>\r\n                                        {this.state.ForecastDailyElements.map(fde => <CompareForecastItem key={fde.id} element={fde} />)}\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            ):null}\r\n                    </div>\r\n                </div>\r\n            )\r\n    }\r\n};\r\n\r\nconst weatherIcons = \r\n{\r\n    200:'/images/200.png',\r\n    201:'/images/201.png',\r\n    202:'/images/202.png',\r\n    210:'/images/210.png',\r\n    211:'/images/211.png',\r\n    212:'/images/212.png',\r\n    221:'/images/212.png',\r\n    230:'/images/230D.png',\r\n    231:'/images/231.png',\r\n    232:'/images/232.png',\r\n    300:'/images/300D.png',\r\n    301:'/images/301.png',\r\n    302:'/images/302.png',\r\n    310:'/images/310D.png',\r\n    311:'/images/311.png',\r\n    312:'/images/312.png',\r\n    313:'/images/313_1.png',\r\n    314:'/images/314.png',\r\n    321:'/images/321.png',\r\n    500:'/images/500D.png',\r\n    501:'/images/501.png',\r\n    502:'/images/502.png',\r\n    503:'/images/503.png',\r\n    504:'/images/504.png',\r\n    511:'/images/511.png',\r\n    520:'/images/520D.png',\r\n    521:'/images/521_2.png',\r\n    522:'/images/522_1.png',\r\n    531:'/images/522_1.png',\r\n    600:'/images/600D.png',\r\n    601:'/images/601.png',\r\n    602:'/images/602.png',\r\n    611:'/images/611.png',\r\n    612:'/images/612D.png',\r\n    613:'/images/613.png',\r\n    615:'/images/615D.png',\r\n    616:'/images/616.png',\r\n    620:'/images/620D.png',\r\n    621:'/images/621.png',\r\n    622:'/images/622.png',\r\n    701:'/images/701_2.png',\r\n    711:'/images/701_2.png',\r\n    721:'/images/701_2.png',\r\n    731:'/images/701_2.png',\r\n    741:'/images/701_2.png',\r\n    751:'/images/701_2.png',\r\n    761:'/images/701_2.png',\r\n    762:'/images/701_2.png',\r\n    771:'/images/701_2.png',\r\n    781:'/images/701_2.png',\r\n    800:'/images/800D.png',\r\n    801:'/images/801D.png',\r\n    802:'/images/802D.png',\r\n    803:'/images/803D.png',\r\n    804:'/images/804.png',\r\n    1000:'/images/800D.png',\r\n    1003:'/images/801D.png',\r\n    1006:'/images/802D.png',\r\n    1009:'/images/804.png',\r\n    1030:'/images/701_2.png',\r\n    1063:'/images/500D.png',\r\n    1066:'/images/600.png',\r\n    1069:'/images/613.png',\r\n    1072:'/images/511.png',\r\n    1087:'/images/200.png',\r\n    1114:'/images/602.png',\r\n    1117:'/images/622.png',\r\n    1135:'/images/702_1.png',\r\n    1147:'/images/702_1.png',\r\n    1150:'/images/300D.png',\r\n    1153:'/images/301.png',\r\n    1168:'/images/511.png',\r\n    1171:'/images/501.png',\r\n    1180:'/images/502.png',\r\n    1183:'/images/500D.png',\r\n    1186:'/images/500D.png',\r\n    1189:'/images/501.png',\r\n    1192:'/images/502.png',\r\n    1195:'/images/503.png',\r\n    1198:'/images/511.png',\r\n    1201:'/images/511.png',\r\n    1204:'/images/611.png',\r\n    1207:'/images/612D.png',\r\n    1210:'/images/600D.png',\r\n    1213:'/images/600D.png',\r\n    1216:'/images/601.png',\r\n    1219:'/images/601.png',\r\n    1222:'/images/602.png',\r\n    1225:'/images/602.png',\r\n    1237:'/images/511.png',\r\n    1240:'/images/520.png',\r\n    1243:'/images/521_2.png',\r\n    1246:'/images/522_1.png',\r\n    1249:'/images/612D.png',\r\n    1252:'/images/613.png',\r\n    1255:'/images/612D.png',\r\n    1258:'/images/613.png',\r\n    1261:'/images/511.png',\r\n    1264:'/images/511.png',\r\n    1273:'/images/200.png',\r\n    1276:'/images/201.png',\r\n    1279:'/images/602.png',\r\n    1282:'/images/602.png',\r\n    4201:'/images/502.png',\r\n    4001:'/images/501.png',\r\n    4200:'/images/500D.png',\r\n    6201:'/images/511.png',\r\n    6001:'/images/511.png',\r\n    6200:'/images/511.png',\r\n    6000:'/images/511.png',\r\n    4000:'/images/301.png',\r\n    7101:'/images/511.png',\r\n    7000:'/images/511.png',\r\n    7102:'/images/511.png',\r\n    5101:'/images/602.png',\r\n    5000:'/images/601.png',\r\n    5100:'/images/600D.png',\r\n    5001:'/images/601.png',\r\n    8000:'/images/201.png',\r\n    2100:'/images/701_2.png',\r\n    2000:'/images/701_2.png',\r\n    1001:'/images/804.png',\r\n    1102:'/images/803D.png',\r\n    1101:'/images/802D.png',\r\n    1100:'/images/801D.png',\r\n}\r\n\r\nconst weatherConditions = \r\n{\r\n    4201:'Duży deszcz',\r\n    4001:'Deszcz',\r\n    4200:'Lekki Deszcz',\r\n    6201:'Duży Marznący Deszcz',\r\n    6001:'Marznący Deszcz',\r\n    6200:'Lekki Marznący Deszcz',\r\n    6000:'Marznąca Mrzawka',\r\n    4000:'Mrzawka',\r\n    7101:'Duże Krupy',\r\n    7000:'Krupy',\r\n    7102:'Lekkie Krupy',\r\n    5101:'Duży Śnieg',\r\n    5000:'Śnieg',\r\n    5100:'Lekki Śnieg',\r\n    5001:'Zamieć',\r\n    8000:'Burza',\r\n    2100:'Lekka Mgła',\r\n    2000:'Mgła',\r\n    1001:'Pochmurnie',\r\n    1102:'Przewaga Chmur',\r\n    1101:'Częściowe Zachmurzenie',\r\n    1100:'Przeważnie Słonecznie',\r\n    1000:'Słonecznie',\r\n}\r\n\r\nexport default Compare;","C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\components\\currentWeather\\CurrentWeather.js",["109","110","111","112"],"C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\Menu\\Button.js",[],"C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\Menu\\Dropdown.js",[],"C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\components\\UserPanel\\UserWeatherItem.js",["113"],"import React from 'react'\r\n\r\nconst ForecastDailyItem=({element, deleteW: deleteW })=>\r\n{\r\n    const \r\n    {\r\n        id,\r\n        city,\r\n        date,\r\n        time,\r\n        weather,\r\n        temp,\r\n        clouds,\r\n        humidity,\r\n        pressure,\r\n        wind,\r\n        aqi,\r\n        color\r\n    } = element;\r\n    return ( \r\n        <div className=\"userCard\">\r\n            <div className=\"card\" >\r\n                    <div className=\"face face1\">\r\n                        <div className=\"content\">\r\n                            <p>{id}</p>\r\n                            <p>{city}</p>\r\n                            <p>{date} {time}</p>\r\n                            {/*<p><img src={image} width=\"90\" height=\"90\" /></p>*/}\r\n                            <h3>{weather}</h3>\r\n                            <p><img src={weatherIcons[5]} width=\"20\" height=\"20\" alt=\"img\"/> {temp}&deg;</p>\r\n                        </div>\r\n                        </div>\r\n                        <div className=\"face face2\">\r\n                            <div className=\"content\">\r\n                                <p><img src={weatherIcons[1]} width=\"20\" height=\"20\" alt=\"img\"/>{clouds}% <img src={weatherIcons[4]} width=\"20\" height=\"20\" alt=\"img\"/>{humidity}%</p>\r\n                                <p></p>\r\n                                <p><img src={weatherIcons[6]} width=\"20\" height=\"20\" alt=\"img\"/>{pressure} hPa</p>  \r\n                                <p><img src={weatherIcons[7]} width=\"20\" height=\"20\" alt=\"img\"/>{wind}km/h</p>\r\n                                <p>Jakość powietrza:<p className=\"aqi\"  style={\r\n                                                                        { \r\n                                                                            color: conditionColors[color]\r\n                                                                        }\r\n                                }> {aqi}</p></p>\r\n                                <p><button type=\"submit\" className=\"submit-btn3\" onClick={deleteW.bind(null,id)}> USUN </button></p>\r\n                            </div>\r\n                        </div>\r\n                </div>\r\n        </div>\r\n    )\r\n}\r\nconst weatherIcons = \r\n{\r\n    1:'/images/clouds.png',\r\n    2:'/images/sunrise.png',\r\n    3:'/images/sunset.png',\r\n    4:'/images/humidity.png',\r\n    5:'/images/temp.webp',\r\n    6:'/images/pressure.png',\r\n    7:'/images/wind.png',\r\n}\r\nconst conditionColors = \r\n{\r\n    1:'green',\r\n    2:'lightgreen',\r\n    3:'yellow',\r\n    4:'red',\r\n    5:'purple',\r\n}\r\nexport default ForecastDailyItem;","C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\components\\AirCondition\\AirConditionItem.js",[],"C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\components\\Compare\\CompareForecastItem.js",[],"C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\components\\Compare\\CompareCurrentWeatherItem.js",[],"C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\components\\currentWeather\\WeatherItem.js",["114","115","116","117"],"C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\components\\currentWeather\\ForecastDailyItem.js",[],"C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\components\\currentWeather\\ForecastHourlyItem.js",[],"C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\components\\Functions\\CalCelsius.js",[],"C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\components\\Form\\Form.js",[],"C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\components\\Functions\\CalTime.js",[],"C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\components\\Functions\\CalWindSpeed.js",[],"C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\components\\Functions\\CalDate.js",[],"C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\Menu\\MenuItems.js",[],{"ruleId":"118","replacedBy":"119"},{"ruleId":"120","replacedBy":"121"},{"ruleId":"122","severity":1,"message":"123","line":4,"column":9,"nodeType":"124","messageId":"125","endLine":4,"endColumn":25,"fix":"126"},{"ruleId":"127","severity":1,"message":"128","line":57,"column":7,"nodeType":"129","endLine":57,"endColumn":9,"suggestions":"130"},{"ruleId":"131","severity":1,"message":"132","line":27,"column":13,"nodeType":"133","messageId":"134","endLine":27,"endColumn":34},{"ruleId":"131","severity":1,"message":"135","line":35,"column":13,"nodeType":"133","messageId":"134","endLine":35,"endColumn":21},{"ruleId":"136","severity":1,"message":"137","line":12,"column":10,"nodeType":"138","messageId":"139","endLine":12,"endColumn":14},{"ruleId":"140","severity":1,"message":"141","line":444,"column":17,"nodeType":"142","messageId":"134","endLine":444,"endColumn":19},{"ruleId":"140","severity":1,"message":"141","line":450,"column":17,"nodeType":"142","messageId":"134","endLine":450,"endColumn":19},{"ruleId":"140","severity":1,"message":"141","line":456,"column":17,"nodeType":"142","messageId":"134","endLine":456,"endColumn":19},{"ruleId":"122","severity":1,"message":"143","line":3,"column":36,"nodeType":"144","messageId":"125","endLine":3,"endColumn":52,"fix":"145"},{"ruleId":"122","severity":1,"message":"146","line":5,"column":32,"nodeType":"144","messageId":"125","endLine":5,"endColumn":48,"fix":"147"},{"ruleId":"136","severity":1,"message":"148","line":9,"column":9,"nodeType":"138","messageId":"139","endLine":9,"endColumn":14},{"ruleId":"136","severity":1,"message":"149","line":10,"column":9,"nodeType":"138","messageId":"139","endLine":10,"endColumn":14},{"ruleId":"136","severity":1,"message":"150","line":35,"column":18,"nodeType":"138","messageId":"139","endLine":35,"endColumn":30},"no-native-reassign",["151"],"no-negated-in-lhs",["152"],"no-useless-rename","Import Router unnecessarily renamed.","ImportSpecifier","unnecessarilyRenamed",{"range":"153","text":"154"},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'Lid', 'cityWeatherList', and 'property'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setProperty' needs the current value of 'cityWeatherList'.","ArrayExpression",["155"],"no-dupe-keys","Duplicate key 'ForecastDailyElements'.","ObjectExpression","unexpected","Duplicate key 'Property'.","no-unused-vars","'Line' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","Destructuring assignment deleteW unnecessarily renamed.","Property",{"range":"156","text":"157"},"Destructuring assignment selectD unnecessarily renamed.",{"range":"158","text":"159"},"'data2' is assigned a value but never used.","'data3' is assigned a value but never used.","'setChartData' is defined but never used.","no-global-assign","no-unsafe-negation",[139,155],"Router",{"desc":"160","fix":"161"},[64,80],"deleteW",[140,156],"selectD","Update the dependencies array to be: [Lid, cityWeatherList, property]",{"range":"162","text":"163"},[1788,1790],"[Lid, cityWeatherList, property]"]