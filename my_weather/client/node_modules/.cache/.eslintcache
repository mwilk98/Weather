[{"C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\index.js":"1","C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\App.js":"2","C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\reportWebVitals.js":"3","C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\Menu\\Navbar.js":"4","C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\components\\UserPanel\\UserPanel.js":"5","C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\components\\AirCondition\\AirCondition.js":"6","C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\components\\SignUp\\SignUp.js":"7","C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\components\\Compare\\Compare.js":"8","C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\components\\currentWeather\\CurrentWeather.js":"9","C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\Menu\\Button.js":"10","C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\Menu\\Dropdown.js":"11","C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\components\\UserPanel\\UserWeatherItem.js":"12","C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\components\\AirCondition\\AirConditionItem.js":"13","C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\components\\Compare\\CompareForecastItem.js":"14","C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\components\\Compare\\CompareCurrentWeatherItem.js":"15","C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\components\\currentWeather\\WeatherItem.js":"16","C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\components\\currentWeather\\ForecastDailyItem.js":"17","C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\components\\currentWeather\\ForecastHourlyItem.js":"18","C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\components\\Functions\\CalCelsius.js":"19","C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\components\\Form\\Form.js":"20","C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\components\\Functions\\CalTime.js":"21","C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\components\\Functions\\CalWindSpeed.js":"22","C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\components\\Functions\\CalDate.js":"23","C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\Menu\\MenuItems.js":"24"},{"size":517,"mtime":1633683073982,"results":"25","hashOfConfig":"26"},{"size":1008,"mtime":1636705733557,"results":"27","hashOfConfig":"26"},{"size":375,"mtime":1633683073983,"results":"28","hashOfConfig":"26"},{"size":2539,"mtime":1633683073969,"results":"29","hashOfConfig":"26"},{"size":8862,"mtime":1636705641222,"results":"30","hashOfConfig":"26"},{"size":5491,"mtime":1636550025516,"results":"31","hashOfConfig":"26"},{"size":6689,"mtime":1636707019569,"results":"32","hashOfConfig":"26"},{"size":34562,"mtime":1636706285736,"results":"33","hashOfConfig":"26"},{"size":19855,"mtime":1636536107399,"results":"34","hashOfConfig":"26"},{"size":243,"mtime":1636361649007,"results":"35","hashOfConfig":"26"},{"size":798,"mtime":1633683073968,"results":"36","hashOfConfig":"26"},{"size":2538,"mtime":1636705711213,"results":"37","hashOfConfig":"26"},{"size":2400,"mtime":1636550786646,"results":"38","hashOfConfig":"26"},{"size":1960,"mtime":1636555783348,"results":"39","hashOfConfig":"26"},{"size":1316,"mtime":1636555729199,"results":"40","hashOfConfig":"26"},{"size":3560,"mtime":1636533680860,"results":"41","hashOfConfig":"26"},{"size":2019,"mtime":1633683073981,"results":"42","hashOfConfig":"26"},{"size":1900,"mtime":1633683073981,"results":"43","hashOfConfig":"26"},{"size":131,"mtime":1636704660819,"results":"44","hashOfConfig":"26"},{"size":384,"mtime":1636704651447,"results":"45","hashOfConfig":"26"},{"size":318,"mtime":1636704673195,"results":"46","hashOfConfig":"26"},{"size":131,"mtime":1636704690858,"results":"47","hashOfConfig":"26"},{"size":281,"mtime":1636704666242,"results":"48","hashOfConfig":"26"},{"size":143,"mtime":1633683073968,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"djylt1",{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"52"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"52"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\index.js",[],["101","102"],"C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\App.js",["103"],"C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\reportWebVitals.js",[],"C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\Menu\\Navbar.js",[],"C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\components\\UserPanel\\UserPanel.js",["104"],"C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\components\\AirCondition\\AirCondition.js",[],"C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\components\\SignUp\\SignUp.js",[],"C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\components\\Compare\\Compare.js",["105","106"],"import React from 'react'\r\nimport Form from '../Form/Form'\r\nimport CalDate from '../Functions/CalDate';\r\nimport CalCelsius from '../Functions/CalCelsius';\r\nimport CalWindSpeed from '../Functions/CalWindSpeed';\r\nimport CompareCurrentWeatherItem from './CompareCurrentWeatherItem';\r\nimport CompareForecastItem from './CompareForecastItem';\r\n\r\nimport './Compare.css';\r\n\r\nconst API_key_OWM=\"157d33f8987d245bc6a1997408e90015\";\r\nconst API_key_WA = \"d42d0d989ead4316b9d143558213105\";\r\nconst API_key_w = \"4c7c27f8abf34ae09c61bad9a897be7e\";\r\n\r\nclass Compare extends React.Component\r\n{\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.state=\r\n        {\r\n            value:\"\",\r\n            compareCurrentElements:[\r\n            ],\r\n            ForecastDailyElements:[\r\n            ],\r\n            ForecastDailyElements:[\r\n            ],\r\n            source:\"OpenWeatherMap\",\r\n            city:undefined,\r\n            lat:undefined,\r\n            lon:undefined,\r\n            currentProperty:undefined,\r\n            Property:undefined,\r\n            Property:undefined,\r\n            weatherComp:undefined,\r\n            tempComp:undefined,\r\n            pressureComp:undefined,\r\n            windComp:undefined,\r\n            error:false\r\n        };\r\n    };\r\n\r\n    nextProperty = (Property,Elements) => \r\n    {\r\n        const newIndex = Property.id +1;\r\n\r\n        this.setState(\r\n        {\r\n            Property: Elements[newIndex]\r\n        });\r\n\r\n        console.log(newIndex);\r\n    };\r\n\r\n    prevProperty= (Property,Elements) => \r\n    {\r\n        const newIndex = Property.id -1;\r\n\r\n        this.setState(\r\n        {\r\n            Property: Elements[newIndex]\r\n        });\r\n    };\r\n    setSource = (source) => \r\n    {\r\n        this.setState(\r\n        {\r\n                source:source\r\n        });\r\n\r\n        if(source===\"OpenWeatherMap\")\r\n        {\r\n            this.getForecastDailyOWM(this.state.lat,this.state.lon);\r\n        }\r\n\r\n        if(source===\"WeatherApi\")\r\n        {\r\n            this.getForecastDailyWA(this.state.city);\r\n        }\r\n\r\n        if(source===\"TommorowIO\")\r\n        {\r\n            this.getForecastDailyTI(this.state.lat,this.state.lon);\r\n        }\r\n\r\n        if(source===\"VisualCrossing\")\r\n        {\r\n            this.getForecastDailyVC(this.state.city);\r\n        }\r\n\r\n        if(source===\"Weatherbit\")\r\n        {\r\n            this.getForecastDailyWB(this.state.city);\r\n        }\r\n    };\r\n\r\n    getDefaultCompare = (city) =>\r\n    {\r\n        console.log(city)\r\n        \r\n        this.setState(\r\n        {\r\n            compareCurrentElements:[]\r\n        });\r\n        \r\n        const result = fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city}&lang=pl&APPID=${API_key_OWM}`)\r\n        .then(response => {\r\n            if(response.ok){\r\n                return response\r\n            }\r\n            throw Error(\"Błąd pobierania danych z API\")\r\n        })\r\n        .then(response => response.json())\r\n        .then(response => {\r\n            console.log(response)\r\n            this.getForecastDailyOWM(response.coord.lat,response.coord.lon)\r\n            this.getWeatherWeatherApi(city)\r\n            this.getWeatherTommorowIo(response.coord.lat,response.coord.lon)\r\n            this.getWeatherVisualcrossing(city)\r\n            this.getWeatherWeatherbit(city)\r\n            this.setState({\r\n                compareCurrentElements:[...this.state.compareCurrentElements,{\r\n                    'id':1,\r\n                    'date':CalDate(response.dt),\r\n                    'weather':response.weather[0].description,\r\n                    'temp':CalCelsius(response.main.temp),\r\n                    'pressure':response.main.pressure,\r\n                    'wind':CalWindSpeed(response.wind.speed),\r\n                    'image':weatherIcons[response.weather[0].id],\r\n                    'source':\"OpenWeatherMap\"\r\n                }],\r\n                city:response.name,\r\n                lat:response.coord.lat,\r\n                lon:response.coord.lon,\r\n                weatherComp:response.weather[0].description,\r\n                tempComp:CalCelsius(response.main.temp),\r\n                pressureComp:response.main.pressure,\r\n                windComp:CalWindSpeed(response.wind.speed),\r\n            });\r\n            this.setState(\r\n            {\r\n                currentProperty:this.state.compareCurrentElements[0]\r\n            }); \r\n\r\n            return fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city}&lang=pl&APPID=${API_key_OWM}`);\r\n        })\r\n        .then(responseAirQuality => responseAirQuality.json()) \r\n        .catch(err =>{\r\n            console.log(err);\r\n            this.setState(prevState =>\r\n            {\r\n                return{\r\n                error:true,\r\n                city:prevState.city\r\n                }\r\n            });\r\n        });\r\n\r\n        result.then(r =>\r\n        {\r\n            console.log(r.weather[0].id);\r\n            \r\n            fetch(`http://localhost:3001/api/weather`,\r\n            {\r\n                method: 'post',\r\n                body: JSON.stringify({id: 200}),\r\n                headers: {'Content-Type': 'application/json'}})\r\n            .then(response => \r\n            {\r\n                if(response.ok)\r\n                {\r\n                    return response;\r\n                }\r\n                throw Error(\"Błąd pobierania danych z API\");\r\n            })\r\n            .then(response => response.json())\r\n            .then(response => \r\n            {\r\n                console.log(response);\r\n                console.log(this.state.compareCurrentElements[0]);\r\n                const newIds = this.state.compareCurrentElements.slice(); //copy the array\r\n                newIds[0].image = response[0].path; //execute the manipulations\r\n                this.setState(\r\n                {\r\n                    compareCurrentElements: newIds\r\n                });\r\n            });\r\n        });\r\n    };\r\n    getWeatherCompare = (e) =>\r\n    {\r\n        e.preventDefault()\r\n        \r\n        this.setState(\r\n        {\r\n            compareCurrentElements:[]\r\n        });\r\n        \r\n        const result = fetch(`http://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&lang=pl&APPID=${API_key_OWM}`)\r\n        .then(response => {\r\n            if(response.ok){\r\n                return response\r\n            }\r\n            throw Error(\"Błąd pobierania danych z API\")\r\n        })\r\n        .then(response => response.json())\r\n        .then(response => {\r\n            console.log(response)\r\n            this.getForecastDailyOWM(response.coord.lat,response.coord.lon)\r\n            this.getWeatherWeatherApi(this.state.value)\r\n            this.getWeatherTommorowIo(response.coord.lat,response.coord.lon)\r\n            this.getWeatherVisualcrossing(this.state.value)\r\n            this.getWeatherWeatherbit(this.state.value)\r\n            this.setState({\r\n                compareCurrentElements:[...this.state.compareCurrentElements,{\r\n                    'id':1,\r\n                    'date':CalDate(response.dt),\r\n                    'weather':response.weather[0].description,\r\n                    'temp':CalCelsius(response.main.temp),\r\n                    'pressure':response.main.pressure,\r\n                    'wind':CalWindSpeed(response.wind.speed),\r\n                    'image':weatherIcons[response.weather[0].id],\r\n                    'source':\"OpenWeatherMap\"\r\n                }],\r\n                city:response.name,\r\n                lat:response.coord.lat,\r\n                lon:response.coord.lon,\r\n                weatherComp:response.weather[0].description,\r\n                tempComp:CalCelsius(response.main.temp),\r\n                pressureComp:response.main.pressure,\r\n                windComp:CalWindSpeed(response.wind.speed),\r\n            });\r\n            this.setState(\r\n            {\r\n                currentProperty:this.state.compareCurrentElements[0]\r\n            }); \r\n\r\n            return fetch(`http://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&lang=pl&APPID=${API_key_OWM}`);\r\n        })\r\n        .then(responseAirQuality => responseAirQuality.json()) \r\n        .catch(err =>{\r\n            console.log(err);\r\n            this.setState(prevState =>\r\n            {\r\n                return{\r\n                error:true,\r\n                city:prevState.city\r\n                }\r\n            });\r\n        });\r\n\r\n        result.then(r =>\r\n        {\r\n            console.log(r.weather[0].id);\r\n            \r\n            fetch(`http://localhost:3001/api/weather`,\r\n            {\r\n                method: 'post',\r\n                body: JSON.stringify({id: 200}),\r\n                headers: {'Content-Type': 'application/json'}})\r\n            .then(response => \r\n            {\r\n                if(response.ok)\r\n                {\r\n                    return response;\r\n                }\r\n                throw Error(\"Błąd pobierania danych z API\");\r\n            })\r\n            .then(response => response.json())\r\n            .then(response => \r\n            {\r\n                console.log(response);\r\n                console.log(this.state.compareCurrentElements[0]);\r\n                const newIds = this.state.compareCurrentElements.slice(); //copy the array\r\n                newIds[0].image = response[0].path; //execute the manipulations\r\n                this.setState(\r\n                {\r\n                    compareCurrentElements: newIds\r\n                });\r\n            });\r\n        });\r\n    };\r\n\r\n    getForecastDailyOWM = (lat,lon)=>\r\n    {\r\n        console.log(lat);\r\n\r\n        this.setState({\r\n            ForecastDailyElements:[]\r\n        });\r\n        \r\n        fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&lang=pl&appid=${API_key_OWM}`)\r\n        .then(response => \r\n        {\r\n            if(response.ok)\r\n            {\r\n                return response;\r\n            }\r\n              throw Error(\"Błąd pobierania danych z API\");\r\n        })\r\n        .then(response => response.json())\r\n        .then(response => \r\n        {\r\n            console.log(response);\r\n            for (var i = 0; i < 8; i++) \r\n            {\r\n                this.setState(\r\n                {\r\n                    ForecastDailyElements:[...this.state.ForecastDailyElements,\r\n                    {\r\n                        'id':i,\r\n                        'date':CalDate(response.daily[i].dt),\r\n                        'weather':response.daily[i].weather[0].description,\r\n                        'tempMax':CalCelsius(response.daily[i].temp.max),\r\n                        'tempMin':CalCelsius(response.daily[i].temp.min),\r\n                        'pressure':response.daily[i].pressure,\r\n                        'wind':CalWindSpeed(response.daily[i].wind_speed),\r\n                        'image':weatherIcons[response.daily[i].weather[0].id],\r\n                        'clouds':response.daily[i].clouds,\r\n                        'humidity':response.daily[i].humidity,\r\n                    }],  \r\n                });\r\n            };  \r\n            this.setState(\r\n            {\r\n                Property:this.state.ForecastDailyElements[1]\r\n            });\r\n        });\r\n    };\r\n    getWeatherWeatherApi = (city) =>\r\n    {\r\n            \r\n        fetch(`http://api.weatherapi.com/v1/current.json?key=${API_key_WA}&q=${city}&days=7&aqi=yes&alerts=yes&lang=pl`)\r\n        .then(response => \r\n        {\r\n            if(response.ok)\r\n            {\r\n                return response;\r\n            }\r\n            throw Error(\"Błąd pobierania danych z API\");\r\n        })\r\n        .then(response => response.json())\r\n        .then(response =>\r\n        {\r\n            console.log(response);\r\n            this.setState(\r\n            {\r\n                compareCurrentElements:[...this.state.compareCurrentElements,\r\n                {\r\n                    'id':2,\r\n                    'date':response.current.last_updated,\r\n                    'weather':response.current.condition.text,\r\n                    'temp':response.current.temp_c,\r\n                    'pressure':response.current.pressure_mb,\r\n                    'wind':response.current.wind_kph,\r\n                    'image':weatherIcons[response.current.condition.code],\r\n                    'source':\"WeatherApi\"\r\n                }],\r\n            });\r\n        })\r\n        .catch(err =>\r\n        {\r\n            console.log(err);\r\n            this.setState(prevState =>\r\n            {\r\n                return{\r\n                error:true,\r\n                city:prevState.city\r\n                }\r\n            });\r\n        });\r\n    };\r\n\r\n    getForecastDailyWA = (city) =>\r\n    {\r\n        this.setState(\r\n        {\r\n            ForecastDailyElements:[]\r\n        });\r\n            \r\n        fetch(`http://api.weatherapi.com/v1/forecast.json?key=${API_key_WA}&q=${city}&days=4&aqi=yes&alerts=yes&lang=pl`)\r\n        .then(response => \r\n        {\r\n            if(response.ok)\r\n            {\r\n                return response;\r\n            }\r\n            throw Error(\"Błąd pobierania danych z API\");\r\n        })\r\n        .then(response => response.json())\r\n        .then(response => \r\n        {\r\n            console.log(response);\r\n            for (var i = 0; i < 3; i++) \r\n            {\r\n                this.setState(\r\n                {\r\n                    ForecastDailyElements:[...this.state.ForecastDailyElements,\r\n                    {\r\n                        'id':i,\r\n                        'date':response.forecast.forecastday[i].date,\r\n                        'weather':response.forecast.forecastday[i].day.condition.text,\r\n                        'tempMax':response.forecast.forecastday[i].day.maxtemp_c,\r\n                        'tempMin':response.forecast.forecastday[i].day.mintemp_c,\r\n                        'pressure':\"-\",\r\n                        'wind':\"-\",\r\n                        'image':weatherIcons[response.forecast.forecastday[i].day.condition.code],\r\n                        'clouds':\"-\",\r\n                        'humidity':response.forecast.forecastday[i].day.avghumidity,\r\n                    }],\r\n                });\r\n            }\r\n            this.setState(\r\n            {\r\n                Property:this.state.ForecastDailyElements[1]\r\n            }) \r\n        })\r\n        .catch(err =>\r\n        {\r\n            console.log(err)\r\n            this.setState(prevState =>\r\n            {\r\n                return{\r\n                error:true,\r\n                city:prevState.city\r\n                }\r\n            });\r\n        });\r\n    };\r\n\r\n    getWeatherTommorowIo = (lat,lon) =>\r\n    {\r\n        \r\n        this.setState(\r\n        {\r\n            ForecastDailyElements:[]\r\n        });\r\n            \r\n        fetch(`https://api.tomorrow.io/v4/timelines?location=${lat},${lon}&fields=temperature,humidity,windSpeed,cloudCover,weatherCode,pressureSurfaceLevel&timesteps=1d&units=metric&apikey=Xsa59kYGGrHiXs1TZ3cItU7zRZ4FfGQ8`)\r\n        .then(response => \r\n        {\r\n            if(response.ok)\r\n            {\r\n                return response;\r\n            }\r\n            throw Error(\"Błąd pobierania danych z API\");\r\n        })\r\n        .then(response => response.json())\r\n        .then(response => \r\n        {\r\n            console.log(response);\r\n            this.setState(\r\n            {\r\n                compareCurrentElements:[...this.state.compareCurrentElements,\r\n                {\r\n                    'id':3,\r\n                    'date':response.data.timelines[0].startTime,\r\n                    'weather':weatherConditions[response.data.timelines[0].intervals[0].values.weatherCode],\r\n                    'temp':response.data.timelines[0].intervals[0].values.temperature,\r\n                    'pressure':response.data.timelines[0].intervals[0].values.pressureSurfaceLevel,\r\n                    'wind':CalWindSpeed(response.data.timelines[0].intervals[0].values.windSpeed),\r\n                    'image':weatherIcons[response.data.timelines[0].intervals[0].values.weatherCode],\r\n                    'source':\"TommorowIo\"\r\n                }],\r\n            });\r\n        })\r\n        .catch(err =>\r\n        {\r\n            console.log(err)\r\n            this.setState(prevState =>\r\n            {\r\n                return{\r\n                error:true,\r\n                city:prevState.city\r\n                }\r\n            });\r\n        });\r\n    };\r\n\r\n    getForecastDailyTI = (lat,lon) =>\r\n    {\r\n        this.setState(\r\n        {\r\n            ForecastDailyElements:[]\r\n        });\r\n            \r\n        fetch(`https://api.tomorrow.io/v4/timelines?location=${lat},${lon}&fields=temperature,humidity,windSpeed,cloudCover,weatherCode,pressureSurfaceLevel&timesteps=1d&units=metric&apikey=Xsa59kYGGrHiXs1TZ3cItU7zRZ4FfGQ8`)\r\n        .then(response => \r\n        {\r\n            if(response.ok)\r\n            {\r\n                return response;\r\n            }\r\n            throw Error(\"Błąd pobierania danych z API\");\r\n        })\r\n        .then(response => response.json())\r\n        .then(response => \r\n        {\r\n            console.log(response);\r\n            for (var i = 0; i < 8; i++) \r\n            {\r\n                this.setState(\r\n                    {\r\n                    ForecastDailyElements:[...this.state.ForecastDailyElements,\r\n                    {\r\n                        'id':i,\r\n                        'date':response.data.timelines[0].intervals[i].startTime,\r\n                        'weather':weatherConditions[response.data.timelines[0].intervals[i].values.weatherCode],\r\n                        'tempMax':response.data.timelines[0].intervals[i].values.temperature,\r\n                        'tempMin':response.data.timelines[0].intervals[i].values.temperature,\r\n                        'pressure':response.data.timelines[0].intervals[i].values.pressureSurfaceLevel,\r\n                        'wind':response.data.timelines[0].intervals[i].values.windSpeed,\r\n                        'image':weatherIcons[response.data.timelines[0].intervals[i].values.weatherCode],\r\n                        'clouds':response.data.timelines[0].intervals[i].values.cloudCover,\r\n                        'humidity':response.data.timelines[0].intervals[i].values.humidity,\r\n                    }],  \r\n                });\r\n            }  \r\n            this.setState(\r\n            {\r\n                Property:this.state.ForecastDailyElements[1]\r\n            }); \r\n        })\r\n        .catch(err =>\r\n        {\r\n            console.log(err);\r\n            this.setState(prevState =>{\r\n                return{\r\n                error:true,\r\n                city:prevState.city\r\n                }\r\n            });\r\n        });\r\n    };\r\n\r\n    getWeatherVisualcrossing = (city) =>\r\n    {\r\n\r\n        this.setState(\r\n            {\r\n            ForecastDailyElements:[]\r\n        });\r\n            \r\n        fetch(`https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/weatherdata/forecast?aggregateHours=24&combinationMethod=aggregate&contentType=json&unitGroup=metric&locationMode=single&iconSet=icons2&key=LHKNDUGQ4MSQTL5749JVGX4XV&dataElements=default&locations=${city}`)\r\n        .then(response => \r\n        {\r\n            if(response.ok)\r\n            {\r\n                return response;\r\n            }\r\n            throw Error(\"Błąd pobierania danych z API\");\r\n        })\r\n        .then(response => response.json())\r\n        .then(response => \r\n        {\r\n            console.log(response);\r\n            this.setState(\r\n            {\r\n                compareCurrentElements:[...this.state.compareCurrentElements,\r\n                {\r\n                    'id':4,\r\n                    'date':response.location.currentConditions.datetime,\r\n                    'weather':response.location.currentConditions.icon,\r\n                    'temp':response.location.currentConditions.temp,\r\n                    'pressure':response.location.currentConditions.sealevelpressure,\r\n                    'wind':response.location.currentConditions.wspd,\r\n                    'image':weatherIcons[0],\r\n                    'source':\"VisualCrossing\"\r\n                }],\r\n            });\r\n        })\r\n        .catch(err =>\r\n        {\r\n            console.log(err)\r\n            this.setState(prevState =>{\r\n                return{\r\n                error:true,\r\n                city:prevState.city\r\n                }\r\n            });\r\n        });\r\n    };\r\n\r\n    getForecastDailyVC = (city) =>\r\n    {\r\n        this.setState(\r\n        {\r\n            ForecastDailyElements:[]\r\n        });\r\n            \r\n        fetch(`https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/weatherdata/forecast?aggregateHours=24&combinationMethod=aggregate&contentType=json&unitGroup=metric&locationMode=single&iconSet=icons2&key=LHKNDUGQ4MSQTL5749JVGX4XV&dataElements=default&locations=${city}`)\r\n        .then(response => \r\n        {\r\n            if(response.ok)\r\n            {\r\n                return response;\r\n            }\r\n            throw Error(\"Błąd pobierania danych z API\");\r\n        })\r\n        .then(response => response.json())\r\n        .then(response => \r\n        {\r\n            console.log(response);\r\n            for (var i = 0; i < 8; i++) \r\n            {\r\n                this.setState(\r\n                {\r\n                    ForecastDailyElements:[...this.state.ForecastDailyElements,\r\n                    {\r\n                        'id':i,\r\n                        'date':CalDate(response.location.values[i].datetime),\r\n                        'weather':response.location.values[i].conditions,\r\n                        'tempMax':response.location.values[i].maxt,\r\n                        'tempMin':response.location.values[i].mint,\r\n                        'pressure':\"-\",\r\n                        'wind':1.6*response.location.values[i].wspd,\r\n                        'image':\"-\",\r\n                        'clouds':response.location.values[i].cloudcover,\r\n                        'humidity':response.location.values[i].humidity,\r\n                    }],  \r\n                });\r\n            }  \r\n            this.setState(\r\n            {\r\n                Property:this.state.ForecastDailyElements[1]\r\n            });\r\n        })\r\n        .catch(err =>\r\n        {\r\n            console.log(err)\r\n            this.setState(prevState =>\r\n            {\r\n                return{\r\n                error:true,\r\n                city:prevState.city\r\n                }\r\n            })\r\n        });\r\n    };\r\n\r\n    getWeatherWeatherbit = (city) =>\r\n    {\r\n        this.setState(\r\n        {\r\n            ForecastDailyElements:[]\r\n        });\r\n            \r\n        fetch(` https://api.weatherbit.io/v2.0/forecast/daily?city=${city}&lang=pl&key=${API_key_w}`)\r\n        .then(response => \r\n        {\r\n            if(response.ok)\r\n            {\r\n                return response;\r\n            }\r\n            throw Error(\"Błąd pobierania danych z API\");\r\n        })\r\n        .then(response => response.json())\r\n        .then(response => \r\n        {\r\n            console.log(response);\r\n            this.setState(\r\n            {\r\n                compareCurrentElements:[...this.state.compareCurrentElements,\r\n                {\r\n                    'id':5,\r\n                    'date':response.data[0].ob_time,\r\n                    'weather':response.data[0].weather.description,\r\n                    'temp':response.data[0].temp,\r\n                    'pressure':Math.floor(response.data[0].pres),\r\n                    'wind':Math.floor(1.609*response.data[0].wind_spd),\r\n                    'image':weatherIcons[response.data[0].weather.code],\r\n                    'source':\"Weatherbit\"\r\n                }],\r\n            });\r\n        })\r\n        .catch(err =>\r\n        {\r\n            console.log(err);\r\n            this.setState(prevState =>\r\n            {\r\n                return{\r\n                error:true,\r\n                city:prevState.city\r\n                }\r\n            });\r\n        });\r\n    };\r\n\r\n    getForecastDailyWB = (city) =>\r\n    {\r\n\r\n        this.setState({\r\n            ForecastDailyElements:[]\r\n        });\r\n            \r\n        fetch(` https://api.weatherbit.io/v2.0/forecast/daily?city=${city}&lang=pl&key=${API_key_w}`)\r\n        .then(response => \r\n        {\r\n            if(response.ok)\r\n            {\r\n                return response;\r\n            }\r\n            throw Error(\"Błąd pobierania danych z API\");\r\n        })\r\n        .then(response => response.json())\r\n        .then(response => \r\n        {\r\n            console.log(response);\r\n            for (var i = 0; i < 8; i++) \r\n            {\r\n                this.setState(\r\n                {\r\n                    ForecastDailyElements:[...this.state.ForecastDailyElements,\r\n                    {\r\n                        'id':i,\r\n                        'date':response.data[i].datetime,\r\n                        'weather':response.data[i].weather.description,\r\n                        'tempMax':response.data[i].max_temp,\r\n                        'tempMin':response.data[i].min_temp,\r\n                        'pressure':response.data[i].pres,\r\n                        'wind':Math.floor(1.609*response.data[i].wind_spd),\r\n                        'image':weatherIcons[response.data[i].weather.code],\r\n                        'clouds':response.data[i].clouds,\r\n                        'humidity':\"-\",\r\n                    }],  \r\n                });\r\n            }  \r\n            this.setState(\r\n            {\r\n                Property:this.state.ForecastDailyElements[1]\r\n            }); \r\n        })\r\n        .catch(err =>\r\n        {\r\n            console.log(err);\r\n            this.setState(prevState =>\r\n            {\r\n                return{\r\n                error:true,\r\n                city:prevState.city\r\n                }\r\n            });\r\n        });\r\n    };\r\n\r\n    inputHandler=(e)=>\r\n    {\r\n        this.setState(\r\n        {\r\n            value:e.target.value\r\n        });\r\n    };\r\n    componentDidMount()\r\n    {\r\n        this.getDefaultCompare(\"Warszawa\");\r\n    }\r\n    render(){\r\n            return( \r\n                <div    style={\r\n                        { \r\n                            backgroundImage: `url(\"/images/bg_comp.jpg\")` \r\n                        }\r\n                }>\r\n                    <div className=\"city-form\">\r\n                        <Form \r\n                            value={this.state.value}  \r\n                            handler={this.inputHandler}\r\n                            submit={this.getWeatherCompare}\r\n                        /> \r\n                    </div>\r\n                    <div className=\"compare-main-cards\">\r\n                        {this.state.currentProperty ?( \r\n                            <div className=\"compare-cards-slider\">\r\n                                <div className=\"compare-cards-slider-wrapper\"   style={\r\n                                                                                {\r\n                                                                                    'transform':`translateX(-${this.state.currentProperty.id*(100/this.state.compareCurrentElements.length)}%)`\r\n                                                                                }\r\n                                }>\r\n                                    {this.state.compareCurrentElements.map(fde => <CompareCurrentWeatherItem compare={this.state} key={fde.id} element={fde} />)}\r\n                                </div>\r\n                        \r\n                            </div>\r\n                    ):null}\r\n                    </div>\r\n                    <button \r\n                        onClick={() => this.setSource(\"OpenWeatherMap\")} \r\n                    >\r\n                        OpenWeatherMap\r\n                    </button>\r\n                    <button \r\n                        onClick={() => this.setSource(\"WeatherApi\")} \r\n                    >\r\n                        WeatherApi\r\n                    </button>\r\n                    <button \r\n                        onClick={() => this.setSource(\"TommorowIO\")} \r\n                    >\r\n                        TommorowIO\r\n                    </button>\r\n                    <button \r\n                        onClick={() => this.setSource(\"VisualCrossing\")}\r\n                    >\r\n                        VisualCrossing\r\n                    </button>\r\n                    <button \r\n                        onClick={() => this.setSource(\"Weatherbit\")}\r\n                    >\r\n                        Weatherbit\r\n                    </button>\r\n                    <div className=\"compare-main\">\r\n                        {this.state.Property ?(\r\n                            <div className=\"main-cards\"> \r\n                                <button className=\"left\" \r\n                                    onClick={() => this.nextProperty(this.state.Property,this.state.ForecastDailyElements)} \r\n                                    disabled={this.state.Property.id === this.state.ForecastDailyElements.length-3}\r\n                                >\r\n                                    Next\r\n                                </button>\r\n                                <button className=\"right\"\r\n                                    onClick={() => this.prevProperty(this.state.Property,this.state.ForecastDailyElements)} \r\n                                    disabled={this.state.Property.id === 1}\r\n                                >\r\n                                    Prev\r\n                                </button>\r\n                                <div className=\"cards-slider\">         \r\n                                    <div className=\"cards-slider-wrapper\"   style={\r\n                                                                            {\r\n                                                                                'transform':`translateX(-${this.state.Property.id*(100/this.state.ForecastDailyElements.length)}%)`\r\n                                                                            }\r\n                                    }>\r\n                                        {this.state.ForecastDailyElements.map(fde => <CompareForecastItem key={fde.id} element={fde} />)}\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            ):null}\r\n                    </div>\r\n                </div>\r\n            )\r\n    }\r\n};\r\n\r\nconst weatherIcons = \r\n{\r\n    200:'/images/200.png',\r\n    201:'/images/201.png',\r\n    202:'/images/202.png',\r\n    210:'/images/210.png',\r\n    211:'/images/211.png',\r\n    212:'/images/212.png',\r\n    221:'/images/212.png',\r\n    230:'/images/230D.png',\r\n    231:'/images/231.png',\r\n    232:'/images/232.png',\r\n    300:'/images/300D.png',\r\n    301:'/images/301.png',\r\n    302:'/images/302.png',\r\n    310:'/images/310D.png',\r\n    311:'/images/311.png',\r\n    312:'/images/312.png',\r\n    313:'/images/313_1.png',\r\n    314:'/images/314.png',\r\n    321:'/images/321.png',\r\n    500:'/images/500D.png',\r\n    501:'/images/501.png',\r\n    502:'/images/502.png',\r\n    503:'/images/503.png',\r\n    504:'/images/504.png',\r\n    511:'/images/511.png',\r\n    520:'/images/520D.png',\r\n    521:'/images/521_2.png',\r\n    522:'/images/522_1.png',\r\n    531:'/images/522_1.png',\r\n    600:'/images/600D.png',\r\n    601:'/images/601.png',\r\n    602:'/images/602.png',\r\n    611:'/images/611.png',\r\n    612:'/images/612D.png',\r\n    613:'/images/613.png',\r\n    615:'/images/615D.png',\r\n    616:'/images/616.png',\r\n    620:'/images/620D.png',\r\n    621:'/images/621.png',\r\n    622:'/images/622.png',\r\n    701:'/images/701_2.png',\r\n    711:'/images/701_2.png',\r\n    721:'/images/701_2.png',\r\n    731:'/images/701_2.png',\r\n    741:'/images/701_2.png',\r\n    751:'/images/701_2.png',\r\n    761:'/images/701_2.png',\r\n    762:'/images/701_2.png',\r\n    771:'/images/701_2.png',\r\n    781:'/images/701_2.png',\r\n    800:'/images/800D.png',\r\n    801:'/images/801D.png',\r\n    802:'/images/802D.png',\r\n    803:'/images/803D.png',\r\n    804:'/images/804.png',\r\n    1000:'/images/800D.png',\r\n    1003:'/images/801D.png',\r\n    1006:'/images/802D.png',\r\n    1009:'/images/804.png',\r\n    1030:'/images/701_2.png',\r\n    1063:'/images/500D.png',\r\n    1066:'/images/600.png',\r\n    1069:'/images/613.png',\r\n    1072:'/images/511.png',\r\n    1087:'/images/200.png',\r\n    1114:'/images/602.png',\r\n    1117:'/images/622.png',\r\n    1135:'/images/702_1.png',\r\n    1147:'/images/702_1.png',\r\n    1150:'/images/300D.png',\r\n    1153:'/images/301.png',\r\n    1168:'/images/511.png',\r\n    1171:'/images/501.png',\r\n    1180:'/images/502.png',\r\n    1183:'/images/500D.png',\r\n    1186:'/images/500D.png',\r\n    1189:'/images/501.png',\r\n    1192:'/images/502.png',\r\n    1195:'/images/503.png',\r\n    1198:'/images/511.png',\r\n    1201:'/images/511.png',\r\n    1204:'/images/611.png',\r\n    1207:'/images/612D.png',\r\n    1210:'/images/600D.png',\r\n    1213:'/images/600D.png',\r\n    1216:'/images/601.png',\r\n    1219:'/images/601.png',\r\n    1222:'/images/602.png',\r\n    1225:'/images/602.png',\r\n    1237:'/images/511.png',\r\n    1240:'/images/520.png',\r\n    1243:'/images/521_2.png',\r\n    1246:'/images/522_1.png',\r\n    1249:'/images/612D.png',\r\n    1252:'/images/613.png',\r\n    1255:'/images/612D.png',\r\n    1258:'/images/613.png',\r\n    1261:'/images/511.png',\r\n    1264:'/images/511.png',\r\n    1273:'/images/200.png',\r\n    1276:'/images/201.png',\r\n    1279:'/images/602.png',\r\n    1282:'/images/602.png',\r\n    4201:'/images/502.png',\r\n    4001:'/images/501.png',\r\n    4200:'/images/500D.png',\r\n    6201:'/images/511.png',\r\n    6001:'/images/511.png',\r\n    6200:'/images/511.png',\r\n    6000:'/images/511.png',\r\n    4000:'/images/301.png',\r\n    7101:'/images/511.png',\r\n    7000:'/images/511.png',\r\n    7102:'/images/511.png',\r\n    5101:'/images/602.png',\r\n    5000:'/images/601.png',\r\n    5100:'/images/600D.png',\r\n    5001:'/images/601.png',\r\n    8000:'/images/201.png',\r\n    2100:'/images/701_2.png',\r\n    2000:'/images/701_2.png',\r\n    1001:'/images/804.png',\r\n    1102:'/images/803D.png',\r\n    1101:'/images/802D.png',\r\n    1100:'/images/801D.png',\r\n}\r\n\r\nconst weatherConditions = \r\n{\r\n    4201:'Duży deszcz',\r\n    4001:'Deszcz',\r\n    4200:'Lekki Deszcz',\r\n    6201:'Duży Marznący Deszcz',\r\n    6001:'Marznący Deszcz',\r\n    6200:'Lekki Marznący Deszcz',\r\n    6000:'Marznąca Mrzawka',\r\n    4000:'Mrzawka',\r\n    7101:'Duże Krupy',\r\n    7000:'Krupy',\r\n    7102:'Lekkie Krupy',\r\n    5101:'Duży Śnieg',\r\n    5000:'Śnieg',\r\n    5100:'Lekki Śnieg',\r\n    5001:'Zamieć',\r\n    8000:'Burza',\r\n    2100:'Lekka Mgła',\r\n    2000:'Mgła',\r\n    1001:'Pochmurnie',\r\n    1102:'Przewaga Chmur',\r\n    1101:'Częściowe Zachmurzenie',\r\n    1100:'Przeważnie Słonecznie',\r\n    1000:'Słonecznie',\r\n}\r\n\r\nexport default Compare;","C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\components\\currentWeather\\CurrentWeather.js",["107"],"import React from 'react'\r\nimport WeatherItem from './WeatherItem';\r\nimport Form from '../Form/Form'\r\nimport CalDate from '../Functions/CalDate';\r\nimport CalTime from '../Functions/CalTime';\r\nimport CalCelsius from '../Functions/CalCelsius';\r\nimport CalWindSpeed from '../Functions/CalWindSpeed';\r\nimport ForecastDailyItem from './ForecastDailyItem';\r\nimport ForecastHourlyItem from './ForecastHourlyItem';\r\nimport './Forecast.css';\r\nimport './CurrentWeather.css';\r\nimport { Line } from 'react-chartjs-2';\r\n\r\n\r\n\r\nconst API_key=\"157d33f8987d245bc6a1997408e90015\"\r\n//const localTime = new Date().toLocaleString()\r\n\r\nclass CurrentWeather extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state={\r\n            value:\"\",\r\n            city:\"\",\r\n            country:\"\",\r\n            aqi:undefined,\r\n            image:undefined,\r\n            background:undefined,\r\n            weather:undefined,\r\n            temp:undefined,\r\n            tempMax:undefined,\r\n            tempMin:undefined,\r\n            tempFeel:undefined,\r\n            pressurre:undefined,\r\n            wind:undefined,\r\n            lat:undefined,\r\n            lon:undefined,\r\n            clouds:undefined, \r\n            humidity:undefined,\r\n            sunrise:undefined,\r\n            sunset:undefined,\r\n            forecastDailyElements:[\r\n            ],\r\n            forecastHourlyElements:[\r\n            ],\r\n            dailyProperty: undefined,\r\n            hourlyProperty: undefined,\r\n            forecast:true,\r\n            error:false,\r\n            tempData:[],\r\n            tempTime:[],\r\n            data :{\r\n                labels: ['1', '2', '3', '4', '5', '6'],\r\n                datasets: [\r\n                  {\r\n                    label: '# of Votes',\r\n                    data: [12, 19, 3, 5, 2, 3],\r\n                    fill: false,\r\n                    backgroundColor: 'rgb(255, 99, 132)',\r\n                    borderColor: 'rgba(255, 99, 132, 0.2)',\r\n                  },\r\n                ],\r\n            },\r\n            options : {\r\n                scales: {\r\n                  y: {\r\n                    beginAtZero: true\r\n                  }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    nextdailyProperty = () => {\r\n        const newIndex = this.state.dailyProperty.id +1\r\n        this.setState({\r\n            dailyProperty: this.state.forecastDailyElements[newIndex]\r\n        })\r\n        console.log(newIndex)\r\n    }\r\n\r\n    prevdailyProperty = () => {\r\n        const newIndex = this.state.dailyProperty.id -1\r\n        this.setState({\r\n            dailyProperty: this.state.forecastDailyElements[newIndex]\r\n        })\r\n    }\r\n\r\n    nextHourlyProperty = () => {\r\n        const newIndex = this.state.hourlyProperty.id +1\r\n        this.setState({\r\n            hourlyProperty: this.state.forecastHourlyElements[newIndex]\r\n        })\r\n    }\r\n    \r\n    prevHourlyProperty = () => {\r\n        const newIndex = this.state.hourlyProperty.id -1\r\n        this.setState({\r\n            hourlyProperty: this.state.forecastHourlyElements[newIndex]\r\n        })\r\n    }\r\n    defaultWeather = (cityName) => {\r\n        this.setState(state =>({\r\n            city:cityName,\r\n            error:false\r\n          }))\r\n          fetch(`http://api.openweathermap.org/data/2.5/weather?q=${cityName}&lang=pl&APPID=${API_key}`)\r\n          .then(response => {\r\n              if(response.ok){\r\n                  return response\r\n              }\r\n              throw Error(\"Błąd pobierania danych z API\")\r\n          })\r\n          .then(response => response.json())\r\n          .then(response => {\r\n            this.getForecastDaily(response.coord.lat,response.coord.lon)\r\n            this.getForecastHourly(response.coord.lat,response.coord.lon)\r\n            this.getAirQuality(response.coord.lat,response.coord.lon)\r\n              console.log(response)\r\n              this.setState(state =>({\r\n                city:state.city,\r\n                country:response.sys.country,\r\n                date:CalDate(response.dt),\r\n                time:CalTime(response.dt,response.timezone),\r\n                weather:response.weather[0].description,\r\n                temp:CalCelsius(response.main.temp),\r\n                tempMax:CalCelsius(response.main.temp_max),\r\n                tempMin:CalCelsius(response.main.temp_min),\r\n                tempFeel:CalCelsius(response.main.feels_like),\r\n                pressure:response.main.pressure,\r\n                wind:CalWindSpeed(response.wind.speed),\r\n                image:weatherIcons[response.weather[0].id],\r\n                lat:response.coord.lat,\r\n                lon:response.coord.lon,\r\n                clouds:response.clouds.all, \r\n                humidity:response.main.humidity,\r\n                sunrise:CalTime(response.sys.sunrise,response.timezone),\r\n                sunset:CalTime(response.sys.sunset,response.timezone),\r\n                background:\"/images/cloudyCity.jpg\",\r\n                error:false,\r\n                \r\n              }))\r\n                      \r\n            console.log(\"TEST:\"+response.weather[0].id)\r\n            console.log(this.state.image)\r\n          })\r\n          .catch(err =>{\r\n            console.log(err)\r\n            this.setState(prevState =>{\r\n                return{\r\n                error:true,\r\n                city:prevState.city\r\n            }})\r\n        })\r\n    }\r\n    getWeather = (e) =>{\r\n        \r\n        e.preventDefault()\r\n          \r\n          fetch(`http://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&lang=pl&APPID=${API_key}`)\r\n          .then(response => {\r\n              if(response.ok){\r\n                  return response\r\n              }\r\n              throw Error(\"Błąd pobierania danych z API\")\r\n          })\r\n          .then(response => response.json())\r\n          .then(response => {\r\n              console.log(response)\r\n              this.getForecastDaily(response.coord.lat,response.coord.lon)\r\n              this.getForecastHourly(response.coord.lat,response.coord.lon)\r\n              this.getAirQuality(response.coord.lat,response.coord.lon)\r\n              this.setState(state =>({\r\n                city:state.value,\r\n                country:response.sys.country,\r\n                date:CalDate(response.dt),\r\n                time:CalTime(response.dt,response.timezone),\r\n                weather:response.weather[0].description,\r\n                temp:CalCelsius(response.main.temp),\r\n                tempMax:CalCelsius(response.main.temp_max),\r\n                tempMin:CalCelsius(response.main.temp_min),\r\n                tempFeel:CalCelsius(response.main.feels_like),\r\n                pressure:response.main.pressure,\r\n                wind:CalWindSpeed(response.wind.speed),\r\n                image:weatherIcons[response.weather[0].id],\r\n                lat:response.coord.lat,\r\n                lon:response.coord.lon,\r\n                clouds:response.clouds.all, \r\n                humidity:response.main.humidity,\r\n                sunrise:CalTime(response.sys.sunrise,response.timezone),\r\n                sunset:CalTime(response.sys.sunset,response.timezone),\r\n                background:\"/images/cloudyCity.jpg\",\r\n                error:false\r\n              }))\r\n          })\r\n          .catch(err =>{\r\n            console.log(err)\r\n            this.setState(prevState =>{\r\n                return{\r\n                error:true,\r\n                city:prevState.city\r\n            }})\r\n        })\r\n        \r\n    }\r\n    getAirQuality(lat,lon){\r\n        fetch(`http://api.openweathermap.org/data/2.5/air_pollution?lat=${lat}&lon=${lon}&appid=${API_key}`)\r\n          .then(response2 => {\r\n              if(response2.ok){\r\n                  return response2\r\n              }\r\n              throw Error(\"Błąd pobierania danych z API\")\r\n          })\r\n          .then(response2 => response2.json())\r\n          .then(response2 => {\r\n              console.log(response2)\r\n              this.setState(state =>({\r\n                aqi:airConditions[response2.list[0].main.aqi],\r\n                color:response2.list[0].main.aqi,\r\n                error:false\r\n              }))\r\n          })\r\n          .catch(err =>{\r\n            console.log(err)\r\n            this.setState(prevState =>{\r\n                return{\r\n                error:true,\r\n                city:prevState.city\r\n            }})\r\n        })\r\n    }\r\n    getForecastDaily = (lat,lon)=>{\r\n\r\n        console.log(lat)\r\n        this.setState({\r\n            forecastDailyElements:[\r\n            ]\r\n        })\r\n        \r\n        fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&lang=pl&appid=${API_key}`)\r\n          .then(response => {\r\n              if(response.ok){\r\n                  return response\r\n              }\r\n              throw Error(\"Błąd pobierania danych z API\")\r\n          })\r\n          .then(response => response.json())\r\n          .then(response => {\r\n              console.log(response)\r\n              for (var i = 0; i < 8; i++) {\r\n                this.setState({\r\n                    forecastDailyElements:[...this.state.forecastDailyElements,{\r\n                        'id':i,\r\n                        'date':CalDate(response.daily[i].dt),\r\n                        'weather':response.daily[i].weather[0].description,\r\n                        'tempMax':CalCelsius(response.daily[i].temp.max),\r\n                        'tempMin':CalCelsius(response.daily[i].temp.min),\r\n                        'pressure':response.daily[i].pressure,\r\n                        'wind':CalWindSpeed(response.daily[i].wind_speed),\r\n                        'image':weatherIcons[response.daily[i].weather[0].id],\r\n                        'clouds':response.daily[i].clouds,\r\n                        'humidity':response.daily[i].humidity,\r\n                        'sunrise':CalTime(response.daily[i].sunrise,response.timezone_offset) ,\r\n                        'sunset':CalTime(response.daily[i].sunset,response.timezone_offset)\r\n                    }],\r\n                    dailyProperty:this.state.forecastDailyElements[1]\r\n                })\r\n            }  \r\n          })\r\n    }\r\n    getForecastHourly = (lat,lon)=>{\r\n\r\n        this.setState({\r\n            forecastHourlyElements:[\r\n            ]\r\n        })\r\n        \r\n        fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&lang=pl&appid=${API_key}`)\r\n          .then(response => {\r\n              if(response.ok){\r\n                  return response\r\n              }\r\n              throw Error(\"Błąd pobierania danych z API\")\r\n          })\r\n          .then(response => response.json())\r\n          .then(response => {\r\n              console.log(response)\r\n              for (var i = 0; i < 48; i++) {\r\n                this.setState({\r\n                    forecastHourlyElements:[...this.state.forecastHourlyElements,{\r\n                        'id':i,\r\n                        'date':CalDate(response.hourly[i].dt),\r\n                        'time':CalTime(response.hourly[i].dt,response.timezone_offset),\r\n                        'weather':response.hourly[i].weather[0].description,\r\n                        'temp':CalCelsius(response.hourly[i].temp),\r\n                        'tempFeel':CalCelsius(response.hourly[i].feels_like),\r\n                        'pressure':response.hourly[i].pressure,\r\n                        'humidity':response.hourly[i].humidity,\r\n                        'wind':CalWindSpeed(response.hourly[i].wind_speed),\r\n                        'image':weatherIcons[response.hourly[i].weather[0].id],\r\n                        'clouds':response.hourly[i].clouds,\r\n                    }],\r\n                    hourlyProperty:this.state.forecastHourlyElements[1],\r\n                    tempData:[...this.state.tempData,CalCelsius(response.hourly[i].temp)],\r\n                    tempTime:[...this.state.tempTime,CalTime(response.hourly[i].dt,response.timezone_offset)]\r\n                    \r\n                })\r\n            }\r\n            this.setState({\r\n                data:{\r\n                    labels: this.state.tempTime,\r\n                    datasets: [\r\n                  {\r\n                    label: 'Temperatura:',\r\n                    data: this.state.tempData,\r\n                    fill: false,\r\n                    backgroundColor: 'rgb(255, 99, 132)',\r\n                    borderColor: 'rgba(255, 99, 132, 0.2)',\r\n                  },\r\n                ],\r\n                }\r\n            })\r\n          })\r\n    }\r\n    inputHandler=(e)=>{\r\n        this.setState({\r\n            value:e.target.value\r\n        })\r\n    }\r\n    componentDidMount(){\r\n        this.defaultWeather(\"Warszawa\")\r\n     }\r\n    setForecast=()=>{\r\n        if(this.state.forecast){\r\n            this.setState({\r\n                forecast:false\r\n            })\r\n        }else{\r\n            this.setState({\r\n                forecast:true\r\n            })\r\n        }\r\n    }\r\n    render(){\r\n        const {forecastDailyElements, forecastHourlyElements, dailyProperty, hourlyProperty}=this.state\r\n        if(this.state.forecast){\r\n            return(\r\n                    <div className=\"main\" style={{ \r\n                        backgroundImage: `url(\"/images/bg.jpg\")` \r\n                    }}>\r\n                        <div className=\"city-form\">\r\n                            <h1>Wyszukaj miasto dla którego chcesz sprawdzić obecne warunki pogodowe oraz prognozy pogody</h1>\r\n                            <Form \r\n                                value={this.state.value}  \r\n                                handler={this.inputHandler}\r\n                                submit={this.getWeather}\r\n                            /> \r\n                        </div> \r\n                        <div className=\"current-main\">\r\n                            {this.state.city ?(\r\n                            <WeatherItem weather={this.state}/>   \r\n                            ):null}\r\n                        </div>\r\n                    <div className=\"forecast-main\">\r\n                        {dailyProperty ?( \r\n                        <div className=\"forecast-cards\">\r\n                            <button className=\"left\" \r\n                                onClick={() => this.nextdailyProperty()} \r\n                                disabled={dailyProperty.id === forecastDailyElements.length-3}\r\n                            >Next\r\n                            </button>\r\n                            <button className=\"swap-button\"\r\n                                onClick={() => this.setForecast()} \r\n                            >GODZINOWA\r\n                            </button>\r\n                            <button className=\"right\"\r\n                                    onClick={() => this.prevdailyProperty()} \r\n                                    disabled={dailyProperty.id === 1}\r\n                            >Prev\r\n                            </button>\r\n                            <div className=\"main-cards\">  \r\n                                <div className=\"cards-slider\">         \r\n                                    <div className=\"cards-slider-wrapper\" style={{\r\n                                                                            'transform':`translateX(-${dailyProperty.id*(100/forecastDailyElements.length)}%)`\r\n                                    }}>\r\n                                        {forecastDailyElements.map(fde => <ForecastDailyItem key={fde.id} element={fde} />)}\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    ):null}\r\n                    </div>\r\n                    </div>\r\n            )\r\n        }else{\r\n            return(\r\n                <div className=\"main\" style={{ \r\n                    backgroundImage: `url(\"/images/bg.jpg\")` \r\n                }}>\r\n                    <div className=\"city-form\">\r\n                        <h1>Wyszukaj miasto dla którego chcesz sprawdzić obecne warunki pogodowe oraz prognozy pogody</h1>\r\n                        <Form \r\n                            value={this.state.value}  \r\n                            handler={this.inputHandler}\r\n                            submit={this.getWeather}\r\n                        /> \r\n                    </div> \r\n                    <div className=\"current-main\">\r\n                        {this.state.city ?(\r\n                        <WeatherItem weather={this.state}/>   \r\n                        ):null}\r\n                    </div>\r\n                <div className=\"forecast-main\">\r\n                    {hourlyProperty ?( \r\n                    <div className=\"forecast-cards\">\r\n                        <button className=\"left\" \r\n                            onClick={() => this.nextHourlyProperty()} \r\n                            disabled={hourlyProperty.id === forecastHourlyElements.length-3}\r\n                        >Next\r\n                        </button>\r\n                        <button className=\"swap-button\"\r\n                            onClick={() => this.setForecast()} \r\n                        >DZIENNA\r\n                        </button>\r\n                        <button className=\"right\"\r\n                                onClick={() => this.prevHourlyProperty()} \r\n                                disabled={hourlyProperty.id === 1}\r\n                        >Prev\r\n                        </button>\r\n                        <div className=\"main-cards\">  \r\n                            <div className=\"cards-slider\">         \r\n                                <div className=\"cards-slider-wrapper\" style={{\r\n                                                                        'transform':`translateX(-${hourlyProperty.id*(100/forecastHourlyElements.length)}%)`\r\n                                }}>\r\n                                    {forecastHourlyElements.map(fde => <ForecastHourlyItem key={fde.id} element={fde} />)}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                ):null}\r\n                </div>\r\n                </div>\r\n            )\r\n        }\r\n        \r\n    }\r\n}\r\nconst weatherIcons = {\r\n    200:'/images/200.png',\r\n    201:'/images/201.png',\r\n    202:'/images/202.png',\r\n    210:'/images/210.png',\r\n    211:'/images/211.png',\r\n    212:'/images/212.png',\r\n    221:'/images/212.png',\r\n    230:'/images/230D.png',\r\n    231:'/images/231.png',\r\n    232:'/images/232.png',\r\n    300:'/images/300D.png',\r\n    301:'/images/301.png',\r\n    302:'/images/302.png',\r\n    310:'/images/310D.png',\r\n    311:'/images/311.png',\r\n    312:'/images/312.png',\r\n    313:'/images/313_1.png',\r\n    314:'/images/314.png',\r\n    321:'/images/321.png',\r\n    500:'/images/500D.png',\r\n    501:'/images/501.png',\r\n    502:'/images/502.png',\r\n    503:'/images/503.png',\r\n    504:'/images/504.png',\r\n    511:'/images/511.png',\r\n    520:'/images/520D.png',\r\n    521:'/images/521_2.png',\r\n    522:'/images/522_1.png',\r\n    531:'/images/522_1.png',\r\n    600:'/images/600D.png',\r\n    601:'/images/601.png',\r\n    602:'/images/602.png',\r\n    611:'/images/611.png',\r\n    612:'/images/612D.png',\r\n    613:'/images/613.png',\r\n    615:'/images/615D.png',\r\n    616:'/images/616.png',\r\n    620:'/images/620D.png',\r\n    621:'/images/621.png',\r\n    622:'/images/622.png',\r\n    701:'/images/701_2.png',\r\n    711:'/images/701_2.png',\r\n    721:'/images/701_2.png',\r\n    731:'/images/701_2.png',\r\n    741:'/images/701_2.png',\r\n    751:'/images/701_2.png',\r\n    761:'/images/701_2.png',\r\n    762:'/images/701_2.png',\r\n    771:'/images/701_2.png',\r\n    781:'/images/701_2.png',\r\n    800:'/images/800D.png',\r\n    801:'/images/801D.png',\r\n    802:'/images/802D.png',\r\n    803:'/images/803D.png',\r\n    804:'/images/804.png',\r\n}\r\nconst airConditions = {\r\n    1:'Bardzo dobra',\r\n    2:'Dobra',\r\n    3:'Średnia',\r\n    4:'Zła',\r\n    5:'Bardzo zła',\r\n}\r\nexport default CurrentWeather","C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\Menu\\Button.js",[],"C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\Menu\\Dropdown.js",[],"C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\components\\UserPanel\\UserWeatherItem.js",["108"],"C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\components\\AirCondition\\AirConditionItem.js",[],"C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\components\\Compare\\CompareForecastItem.js",[],"C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\components\\Compare\\CompareCurrentWeatherItem.js",[],"C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\components\\currentWeather\\WeatherItem.js",[],"C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\components\\currentWeather\\ForecastDailyItem.js",[],"C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\components\\currentWeather\\ForecastHourlyItem.js",[],"C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\components\\Functions\\CalCelsius.js",[],"C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\components\\Form\\Form.js",[],"C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\components\\Functions\\CalTime.js",[],"C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\components\\Functions\\CalWindSpeed.js",[],"C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\components\\Functions\\CalDate.js",[],"C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\Menu\\MenuItems.js",[],{"ruleId":"109","replacedBy":"110"},{"ruleId":"111","replacedBy":"112"},{"ruleId":"113","severity":1,"message":"114","line":4,"column":9,"nodeType":"115","messageId":"116","endLine":4,"endColumn":25,"fix":"117"},{"ruleId":"118","severity":1,"message":"119","line":57,"column":7,"nodeType":"120","endLine":57,"endColumn":9,"suggestions":"121"},{"ruleId":"122","severity":1,"message":"123","line":27,"column":13,"nodeType":"124","messageId":"125","endLine":27,"endColumn":34},{"ruleId":"122","severity":1,"message":"126","line":35,"column":13,"nodeType":"124","messageId":"125","endLine":35,"endColumn":21},{"ruleId":"127","severity":1,"message":"128","line":12,"column":10,"nodeType":"129","messageId":"130","endLine":12,"endColumn":14},{"ruleId":"113","severity":1,"message":"131","line":3,"column":36,"nodeType":"132","messageId":"116","endLine":3,"endColumn":52,"fix":"133"},"no-native-reassign",["134"],"no-negated-in-lhs",["135"],"no-useless-rename","Import Router unnecessarily renamed.","ImportSpecifier","unnecessarilyRenamed",{"range":"136","text":"137"},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'Lid', 'cityWeatherList', and 'property'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setProperty' needs the current value of 'cityWeatherList'.","ArrayExpression",["138"],"no-dupe-keys","Duplicate key 'ForecastDailyElements'.","ObjectExpression","unexpected","Duplicate key 'Property'.","no-unused-vars","'Line' is defined but never used.","Identifier","unusedVar","Destructuring assignment deleteW unnecessarily renamed.","Property",{"range":"139","text":"140"},"no-global-assign","no-unsafe-negation",[139,155],"Router",{"desc":"141","fix":"142"},[64,80],"deleteW","Update the dependencies array to be: [Lid, cityWeatherList, property]",{"range":"143","text":"144"},[1788,1790],"[Lid, cityWeatherList, property]"]