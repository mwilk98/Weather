[{"C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\index.js":"1","C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\App.js":"2","C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\reportWebVitals.js":"3","C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\Menu\\Navbar.js":"4","C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\components\\UserPanel\\UserPanel.js":"5","C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\components\\AirCondition\\AirCondition.js":"6","C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\components\\SignUp\\SignUp.js":"7","C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\components\\Compare\\Compare.js":"8","C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\components\\currentWeather\\CurrentWeather.js":"9","C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\Menu\\Button.js":"10","C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\Menu\\Dropdown.js":"11","C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\components\\UserPanel\\UserWeatherItem.js":"12","C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\components\\AirCondition\\AirConditionItem.js":"13","C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\components\\Compare\\CompareForecastItem.js":"14","C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\components\\Compare\\CompareCurrentWeatherItem.js":"15","C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\components\\currentWeather\\WeatherItem.js":"16","C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\components\\currentWeather\\ForecastDailyItem.js":"17","C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\components\\currentWeather\\ForecastHourlyItem.js":"18","C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\components\\Functions\\CalCelsius.js":"19","C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\components\\Form\\Form.js":"20","C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\components\\Functions\\CalTime.js":"21","C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\components\\Functions\\CalWindSpeed.js":"22","C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\components\\Functions\\CalDate.js":"23","C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\Menu\\MenuItems.js":"24"},{"size":517,"mtime":1633683073982,"results":"25","hashOfConfig":"26"},{"size":1003,"mtime":1633683073966,"results":"27","hashOfConfig":"26"},{"size":375,"mtime":1633683073983,"results":"28","hashOfConfig":"26"},{"size":2539,"mtime":1633683073969,"results":"29","hashOfConfig":"26"},{"size":9027,"mtime":1636530160678,"results":"30","hashOfConfig":"26"},{"size":5491,"mtime":1636550025516,"results":"31","hashOfConfig":"26"},{"size":4748,"mtime":1636360881611,"results":"32","hashOfConfig":"26"},{"size":34562,"mtime":1636555574487,"results":"33","hashOfConfig":"26"},{"size":19855,"mtime":1636536107399,"results":"34","hashOfConfig":"26"},{"size":243,"mtime":1636361649007,"results":"35","hashOfConfig":"26"},{"size":798,"mtime":1633683073968,"results":"36","hashOfConfig":"26"},{"size":2201,"mtime":1633951827000,"results":"37","hashOfConfig":"26"},{"size":2400,"mtime":1636550786646,"results":"38","hashOfConfig":"26"},{"size":2023,"mtime":1633683073973,"results":"39","hashOfConfig":"26"},{"size":1178,"mtime":1633683073973,"results":"40","hashOfConfig":"26"},{"size":3560,"mtime":1636533680860,"results":"41","hashOfConfig":"26"},{"size":2019,"mtime":1633683073981,"results":"42","hashOfConfig":"26"},{"size":1900,"mtime":1633683073981,"results":"43","hashOfConfig":"26"},{"size":127,"mtime":1633683073974,"results":"44","hashOfConfig":"26"},{"size":363,"mtime":1633683073974,"results":"45","hashOfConfig":"26"},{"size":315,"mtime":1633683073975,"results":"46","hashOfConfig":"26"},{"size":128,"mtime":1633683073976,"results":"47","hashOfConfig":"26"},{"size":278,"mtime":1633683073975,"results":"48","hashOfConfig":"26"},{"size":143,"mtime":1633683073968,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"djylt1",{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"55","usedDeprecatedRules":"52"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"52"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"52"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"78","usedDeprecatedRules":"52"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\index.js",[],["103","104"],"C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\App.js",["105"],"import './App.css';\r\nimport CurrentWeather from './components/currentWeather/CurrentWeather';\r\nimport Navbar from './Menu/Navbar'\r\nimport {Router as Router, Switch, Route} from 'react-router-dom'\r\nimport UserPanel from './components/UserPanel/UserPanel';\r\nimport AirCondition from './components/AirCondition/AirCondition';\r\nimport Compare from './components/Compare/Compare'\r\nimport SignUp from './components/SignUp/SignUp'\r\n\r\nimport { createBrowserHistory } from \"history\";\r\n\r\nconst history = createBrowserHistory();\r\n\r\nfunction App() {\r\n  return (\r\n    <Router history={history}>\r\n      <Navbar/>\r\n      <Switch>\r\n        <Route path='/' exact component={CurrentWeather}/>\r\n        <Route path='/my-weather' exact component={UserPanel}/>\r\n        <Route path='/air-condition' exact component={AirCondition}/>\r\n        <Route path='/compare' exact component={Compare}/>\r\n        <Route path='/sign-up' exact component={SignUp}/>\r\n      </Switch>\r\n    </Router>\r\n\r\n\r\n\r\n\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\reportWebVitals.js",[],"C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\Menu\\Navbar.js",[],"C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\components\\UserPanel\\UserPanel.js",["106"],"import React, {useState, useEffect} from 'react'\r\nimport './UserPanel.css';\r\nimport Axios from 'axios'\r\nimport UserWeatherItem from './UserWeatherItem';\r\nimport {Link} from 'react-router-dom'\r\n\r\nfunction UserPanel(){\r\n\r\n    const [Lid, setLid] = useState('')\r\n    const [cityName, setCityName] = useState('')\r\n    const [date, setDate] = useState('')\r\n    const [time, setTime] = useState('')\r\n    const [weatherState, setWeatherState] = useState('')\r\n    const [temp, setTemp] = useState('')\r\n    const [clouds, setClouds] = useState('')\r\n    const [humidity, setHumidity] = useState('')\r\n    const [pressure, setPressure] = useState('')\r\n    const [wind, setWind] = useState('')\r\n    const [aqi, setAqi] = useState('')\r\n\r\n\r\n    const [cityWeatherList, setcityWeatherList] = useState([])\r\n    const [property, setProperty] = useState([])\r\n\r\n    Axios.defaults.withCredentials = true\r\n\r\n    const [loginStatus, setLoginStatus] = useState('')\r\n    console.log(loginStatus)\r\n\r\n   \r\n    useEffect(()=>{\r\n        Axios.get('http://localhost:3001/api/login').then((response)=>{\r\n            if(response.data.loggedIn===true){\r\n                setLoginStatus(response.data.user[0].username)\r\n                console.log(response)\r\n            }else{\r\n                console.log(response)\r\n                setLoginStatus(\"unlogged\")\r\n            }\r\n        })\r\n        Axios.get('http://localhost:3001/api/get')\r\n        .then((response)=>{\r\n            setcityWeatherList(response.data)\r\n            setProperty(response.data[0])\r\n            console.log(response)\r\n            console.log(\"PropertyGet:\",property)\r\n        })\r\n        \r\n        setLid(0)\r\n        setProperty(cityWeatherList[Lid])\r\n    },[])\r\n    const submitWeather = () =>{\r\n\r\n        Axios.post('http://localhost:3001/api/insert',{\r\n            cityName:cityName,\r\n            date:date,\r\n            time:time,\r\n            weatherState:weatherState,\r\n            temp:temp,\r\n            clouds:clouds,\r\n            humidity:humidity,\r\n            pressure:pressure,\r\n            wind:wind,\r\n            aqi:aqi\r\n        })\r\n        setcityWeatherList([...cityWeatherList,{\r\n            cityName:cityName,\r\n            date:date,\r\n            time:time,\r\n            weatherState:weatherState,\r\n            temp:temp,\r\n            clouds:clouds,\r\n            humidity:humidity,\r\n            pressure:pressure,\r\n            wind:wind,\r\n            aqi:aqi\r\n        },])\r\n        window.location.reload(false);\r\n    }\r\n    const deleteWeather = (id) =>{\r\n\r\n        console.log(id)\r\n        Axios.post('http://localhost:3001/api/delete',{\r\n            id:id\r\n        })\r\n        window.location.reload(false);\r\n        console.log(\"USUNIETO\")\r\n    }\r\n    const logout = () =>{\r\n        Axios.post('http://localhost:3001/api/logout')\r\n            .then((response) =>{\r\n            console.log(response)\r\n            if(response.data.message){\r\n                setLoginStatus(\"logged\")\r\n            }else{\r\n                setLoginStatus(\"unlogged\")\r\n            }\r\n        })\r\n        Axios.get('http://localhost:3001/api/logout').then((response)=>{\r\n            if(response.data.loggedIn===false){\r\n                console.log(response)\r\n                setLoginStatus(\"unlogged\")\r\n            }else{\r\n                setLoginStatus(\"logged\")\r\n                console.log(response)\r\n            }\r\n        })\r\n        window.location.reload(false);\r\n    }\r\n    const nextProperty = () => {\r\n\r\n \r\n        const newIndex = Lid+1\r\n        setLid(Lid+1)\r\n        setProperty(cityWeatherList[newIndex])\r\n\r\n        console.log(\"New index:\",newIndex)\r\n        console.log(\"Property:\",property)\r\n    }\r\n    \r\n    const prevProperty = () => {\r\n        const newIndex = Lid-1\r\n        setLid(Lid-1)\r\n        setProperty(cityWeatherList[newIndex])\r\n        console.log(\"New index:\",newIndex)\r\n        console.log(\"Property:\",property)\r\n    }\r\n    if(loginStatus!==\"unlogged\"){\r\n        return(\r\n            <div className=\"hero2\" style={{ \r\n                backgroundImage: `url(\"/images/bg_signUp.jpg\")` \r\n            }}>\r\n                <div className=\"form-box2\">\r\n                    <div className=\"login-input-group2\">\r\n                        <input type=\"text\" className=\"input-field2\" placeholder=\"Miejsce\" required \r\n                        \r\n                        onChange={(e)=>{\r\n                            setCityName(e.target.value)\r\n                        }}/>\r\n                        <input type=\"text\" className=\"input-field2\" placeholder=\"Data\" required \r\n                        \r\n                        onChange={(e)=>{\r\n                            setDate(e.target.value)\r\n                        }}/>\r\n                        <input type=\"text\" className=\"input-field2\" placeholder=\"Godzina\" required \r\n                        \r\n                        onChange={(e)=>{\r\n                            setTime(e.target.value)\r\n                        }}/>\r\n                        <input type=\"text\" className=\"input-field2\" placeholder=\"Pogoda\" required \r\n                        \r\n                        onChange={(e)=>{\r\n                            setWeatherState(e.target.value)\r\n                        }}/>\r\n                        <input type=\"text\" className=\"input-field2\" placeholder=\"Temperatura (°C)\" required \r\n                        \r\n                        onChange={(e)=>{\r\n                            setTemp(e.target.value)\r\n                        }}/>\r\n                        <input type=\"text\" className=\"input-field2\" placeholder=\"Zachmurzenie (%)\" required \r\n                        \r\n                        onChange={(e)=>{\r\n                            setClouds(e.target.value)\r\n                        }}/>\r\n                        <input type=\"text\" className=\"input-field2\" placeholder=\"Wilgotność\" required \r\n                        \r\n                        onChange={(e)=>{\r\n                            setHumidity(e.target.value)\r\n                        }}/>\r\n                        <input type=\"text\" className=\"input-field2\" placeholder=\"Ciśnienie (hPa)\" required \r\n                        \r\n                        onChange={(e)=>{\r\n                            setPressure(e.target.value)\r\n                        }}/>\r\n                        <input type=\"text\" className=\"input-field2\" placeholder=\"Wiatr (km/h)\" required \r\n                        \r\n                        onChange={(e)=>{\r\n                            setWind(e.target.value)\r\n                        }}/>\r\n                        <input type=\"text\" className=\"input-field2\" placeholder=\"Jakość powietrza (1-5)\" required \r\n                        \r\n                        onChange={(e)=>{\r\n                            setAqi(e.target.value)\r\n                        }}/>\r\n                        <button type=\"submit\" className=\"submit-btn2\" onClick={submitWeather}>Dodaj</button>\r\n                        <button type=\"submit\" className=\"submit-btn2\" onClick={logout}>Wyloguj</button>\r\n                        {loginStatus}\r\n                    </div>\r\n                </div>   \r\n\r\n                <div className=\"user-main\">\r\n                {property ?(\r\n                    <div className=\"user-cards\">\r\n                        <button className=\"left\" \r\n                            onClick={() => nextProperty()} \r\n                            disabled={Lid === cityWeatherList.length-1}\r\n                        >Next\r\n                        </button>\r\n                        <button className=\"right\"\r\n                            onClick={() => prevProperty()} \r\n                            disabled={Lid === 0}\r\n                        >Prev\r\n                        </button>\r\n                        <div className=\"main-cards\">\r\n                            <div className=\"userCards-slider\">\r\n                                <div className=\"userCards-slider-wrapper\" style={{\r\n                                                                          'transform':`translateX(-${Lid*(100/cityWeatherList.length)}%)`\r\n                                }}>\r\n                                    {cityWeatherList.map(fde => <UserWeatherItem element={fde} deleteW={deleteWeather}/>)}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                ):null}\r\n                </div> \r\n            </div>\r\n        )\r\n    }else{\r\n        return(\r\n            <div className=\"hero\" style={{ \r\n                backgroundImage: `url(\"/images/bg_signUp.jpg\")` \r\n            }}>\r\n                <div className=\"form-box\">\r\n                    <div className=\"login-input-group\" >\r\n                        <h1>Musisz być zalogowanym aby korzystać z tej funkcji.</h1>\r\n                        <Link to='/sign-up'><button type=\"submit\" className=\"submit-btn\" >Zaloguj</button></Link>\r\n                        {loginStatus}\r\n                    </div>\r\n                </div>   \r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default UserPanel","C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\components\\AirCondition\\AirCondition.js",[],"C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\components\\SignUp\\SignUp.js",[],"C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\components\\Compare\\Compare.js",["107","108"],"C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\components\\currentWeather\\CurrentWeather.js",["109"],"import React from 'react'\r\nimport WeatherItem from './WeatherItem';\r\nimport Form from '../Form/Form'\r\nimport CalDate from '../Functions/CalDate';\r\nimport CalTime from '../Functions/CalTime';\r\nimport CalCelsius from '../Functions/CalCelsius';\r\nimport CalWindSpeed from '../Functions/CalWindSpeed';\r\nimport ForecastDailyItem from './ForecastDailyItem';\r\nimport ForecastHourlyItem from './ForecastHourlyItem';\r\nimport './Forecast.css';\r\nimport './CurrentWeather.css';\r\nimport { Line } from 'react-chartjs-2';\r\n\r\n\r\n\r\nconst API_key=\"157d33f8987d245bc6a1997408e90015\"\r\n//const localTime = new Date().toLocaleString()\r\n\r\nclass CurrentWeather extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state={\r\n            value:\"\",\r\n            city:\"\",\r\n            country:\"\",\r\n            aqi:undefined,\r\n            image:undefined,\r\n            background:undefined,\r\n            weather:undefined,\r\n            temp:undefined,\r\n            tempMax:undefined,\r\n            tempMin:undefined,\r\n            tempFeel:undefined,\r\n            pressurre:undefined,\r\n            wind:undefined,\r\n            lat:undefined,\r\n            lon:undefined,\r\n            clouds:undefined, \r\n            humidity:undefined,\r\n            sunrise:undefined,\r\n            sunset:undefined,\r\n            forecastDailyElements:[\r\n            ],\r\n            forecastHourlyElements:[\r\n            ],\r\n            dailyProperty: undefined,\r\n            hourlyProperty: undefined,\r\n            forecast:true,\r\n            error:false,\r\n            tempData:[],\r\n            tempTime:[],\r\n            data :{\r\n                labels: ['1', '2', '3', '4', '5', '6'],\r\n                datasets: [\r\n                  {\r\n                    label: '# of Votes',\r\n                    data: [12, 19, 3, 5, 2, 3],\r\n                    fill: false,\r\n                    backgroundColor: 'rgb(255, 99, 132)',\r\n                    borderColor: 'rgba(255, 99, 132, 0.2)',\r\n                  },\r\n                ],\r\n            },\r\n            options : {\r\n                scales: {\r\n                  y: {\r\n                    beginAtZero: true\r\n                  }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    nextdailyProperty = () => {\r\n        const newIndex = this.state.dailyProperty.id +1\r\n        this.setState({\r\n            dailyProperty: this.state.forecastDailyElements[newIndex]\r\n        })\r\n        console.log(newIndex)\r\n    }\r\n\r\n    prevdailyProperty = () => {\r\n        const newIndex = this.state.dailyProperty.id -1\r\n        this.setState({\r\n            dailyProperty: this.state.forecastDailyElements[newIndex]\r\n        })\r\n    }\r\n\r\n    nextHourlyProperty = () => {\r\n        const newIndex = this.state.hourlyProperty.id +1\r\n        this.setState({\r\n            hourlyProperty: this.state.forecastHourlyElements[newIndex]\r\n        })\r\n    }\r\n    \r\n    prevHourlyProperty = () => {\r\n        const newIndex = this.state.hourlyProperty.id -1\r\n        this.setState({\r\n            hourlyProperty: this.state.forecastHourlyElements[newIndex]\r\n        })\r\n    }\r\n    defaultWeather = (cityName) => {\r\n        this.setState(state =>({\r\n            city:cityName,\r\n            error:false\r\n          }))\r\n          fetch(`http://api.openweathermap.org/data/2.5/weather?q=${cityName}&lang=pl&APPID=${API_key}`)\r\n          .then(response => {\r\n              if(response.ok){\r\n                  return response\r\n              }\r\n              throw Error(\"Błąd pobierania danych z API\")\r\n          })\r\n          .then(response => response.json())\r\n          .then(response => {\r\n            this.getForecastDaily(response.coord.lat,response.coord.lon)\r\n            this.getForecastHourly(response.coord.lat,response.coord.lon)\r\n            this.getAirQuality(response.coord.lat,response.coord.lon)\r\n              console.log(response)\r\n              this.setState(state =>({\r\n                city:state.city,\r\n                country:response.sys.country,\r\n                date:CalDate(response.dt),\r\n                time:CalTime(response.dt,response.timezone),\r\n                weather:response.weather[0].description,\r\n                temp:CalCelsius(response.main.temp),\r\n                tempMax:CalCelsius(response.main.temp_max),\r\n                tempMin:CalCelsius(response.main.temp_min),\r\n                tempFeel:CalCelsius(response.main.feels_like),\r\n                pressure:response.main.pressure,\r\n                wind:CalWindSpeed(response.wind.speed),\r\n                image:weatherIcons[response.weather[0].id],\r\n                lat:response.coord.lat,\r\n                lon:response.coord.lon,\r\n                clouds:response.clouds.all, \r\n                humidity:response.main.humidity,\r\n                sunrise:CalTime(response.sys.sunrise,response.timezone),\r\n                sunset:CalTime(response.sys.sunset,response.timezone),\r\n                background:\"/images/cloudyCity.jpg\",\r\n                error:false,\r\n                \r\n              }))\r\n                      \r\n            console.log(\"TEST:\"+response.weather[0].id)\r\n            console.log(this.state.image)\r\n          })\r\n          .catch(err =>{\r\n            console.log(err)\r\n            this.setState(prevState =>{\r\n                return{\r\n                error:true,\r\n                city:prevState.city\r\n            }})\r\n        })\r\n    }\r\n    getWeather = (e) =>{\r\n        \r\n        e.preventDefault()\r\n          \r\n          fetch(`http://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&lang=pl&APPID=${API_key}`)\r\n          .then(response => {\r\n              if(response.ok){\r\n                  return response\r\n              }\r\n              throw Error(\"Błąd pobierania danych z API\")\r\n          })\r\n          .then(response => response.json())\r\n          .then(response => {\r\n              console.log(response)\r\n              this.getForecastDaily(response.coord.lat,response.coord.lon)\r\n              this.getForecastHourly(response.coord.lat,response.coord.lon)\r\n              this.getAirQuality(response.coord.lat,response.coord.lon)\r\n              this.setState(state =>({\r\n                city:state.value,\r\n                country:response.sys.country,\r\n                date:CalDate(response.dt),\r\n                time:CalTime(response.dt,response.timezone),\r\n                weather:response.weather[0].description,\r\n                temp:CalCelsius(response.main.temp),\r\n                tempMax:CalCelsius(response.main.temp_max),\r\n                tempMin:CalCelsius(response.main.temp_min),\r\n                tempFeel:CalCelsius(response.main.feels_like),\r\n                pressure:response.main.pressure,\r\n                wind:CalWindSpeed(response.wind.speed),\r\n                image:weatherIcons[response.weather[0].id],\r\n                lat:response.coord.lat,\r\n                lon:response.coord.lon,\r\n                clouds:response.clouds.all, \r\n                humidity:response.main.humidity,\r\n                sunrise:CalTime(response.sys.sunrise,response.timezone),\r\n                sunset:CalTime(response.sys.sunset,response.timezone),\r\n                background:\"/images/cloudyCity.jpg\",\r\n                error:false\r\n              }))\r\n          })\r\n          .catch(err =>{\r\n            console.log(err)\r\n            this.setState(prevState =>{\r\n                return{\r\n                error:true,\r\n                city:prevState.city\r\n            }})\r\n        })\r\n        \r\n    }\r\n    getAirQuality(lat,lon){\r\n        fetch(`http://api.openweathermap.org/data/2.5/air_pollution?lat=${lat}&lon=${lon}&appid=${API_key}`)\r\n          .then(response2 => {\r\n              if(response2.ok){\r\n                  return response2\r\n              }\r\n              throw Error(\"Błąd pobierania danych z API\")\r\n          })\r\n          .then(response2 => response2.json())\r\n          .then(response2 => {\r\n              console.log(response2)\r\n              this.setState(state =>({\r\n                aqi:airConditions[response2.list[0].main.aqi],\r\n                color:response2.list[0].main.aqi,\r\n                error:false\r\n              }))\r\n          })\r\n          .catch(err =>{\r\n            console.log(err)\r\n            this.setState(prevState =>{\r\n                return{\r\n                error:true,\r\n                city:prevState.city\r\n            }})\r\n        })\r\n    }\r\n    getForecastDaily = (lat,lon)=>{\r\n\r\n        console.log(lat)\r\n        this.setState({\r\n            forecastDailyElements:[\r\n            ]\r\n        })\r\n        \r\n        fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&lang=pl&appid=${API_key}`)\r\n          .then(response => {\r\n              if(response.ok){\r\n                  return response\r\n              }\r\n              throw Error(\"Błąd pobierania danych z API\")\r\n          })\r\n          .then(response => response.json())\r\n          .then(response => {\r\n              console.log(response)\r\n              for (var i = 0; i < 8; i++) {\r\n                this.setState({\r\n                    forecastDailyElements:[...this.state.forecastDailyElements,{\r\n                        'id':i,\r\n                        'date':CalDate(response.daily[i].dt),\r\n                        'weather':response.daily[i].weather[0].description,\r\n                        'tempMax':CalCelsius(response.daily[i].temp.max),\r\n                        'tempMin':CalCelsius(response.daily[i].temp.min),\r\n                        'pressure':response.daily[i].pressure,\r\n                        'wind':CalWindSpeed(response.daily[i].wind_speed),\r\n                        'image':weatherIcons[response.daily[i].weather[0].id],\r\n                        'clouds':response.daily[i].clouds,\r\n                        'humidity':response.daily[i].humidity,\r\n                        'sunrise':CalTime(response.daily[i].sunrise,response.timezone_offset) ,\r\n                        'sunset':CalTime(response.daily[i].sunset,response.timezone_offset)\r\n                    }],\r\n                    dailyProperty:this.state.forecastDailyElements[1]\r\n                })\r\n            }  \r\n          })\r\n    }\r\n    getForecastHourly = (lat,lon)=>{\r\n\r\n        this.setState({\r\n            forecastHourlyElements:[\r\n            ]\r\n        })\r\n        \r\n        fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&lang=pl&appid=${API_key}`)\r\n          .then(response => {\r\n              if(response.ok){\r\n                  return response\r\n              }\r\n              throw Error(\"Błąd pobierania danych z API\")\r\n          })\r\n          .then(response => response.json())\r\n          .then(response => {\r\n              console.log(response)\r\n              for (var i = 0; i < 48; i++) {\r\n                this.setState({\r\n                    forecastHourlyElements:[...this.state.forecastHourlyElements,{\r\n                        'id':i,\r\n                        'date':CalDate(response.hourly[i].dt),\r\n                        'time':CalTime(response.hourly[i].dt,response.timezone_offset),\r\n                        'weather':response.hourly[i].weather[0].description,\r\n                        'temp':CalCelsius(response.hourly[i].temp),\r\n                        'tempFeel':CalCelsius(response.hourly[i].feels_like),\r\n                        'pressure':response.hourly[i].pressure,\r\n                        'humidity':response.hourly[i].humidity,\r\n                        'wind':CalWindSpeed(response.hourly[i].wind_speed),\r\n                        'image':weatherIcons[response.hourly[i].weather[0].id],\r\n                        'clouds':response.hourly[i].clouds,\r\n                    }],\r\n                    hourlyProperty:this.state.forecastHourlyElements[1],\r\n                    tempData:[...this.state.tempData,CalCelsius(response.hourly[i].temp)],\r\n                    tempTime:[...this.state.tempTime,CalTime(response.hourly[i].dt,response.timezone_offset)]\r\n                    \r\n                })\r\n            }\r\n            this.setState({\r\n                data:{\r\n                    labels: this.state.tempTime,\r\n                    datasets: [\r\n                  {\r\n                    label: 'Temperatura:',\r\n                    data: this.state.tempData,\r\n                    fill: false,\r\n                    backgroundColor: 'rgb(255, 99, 132)',\r\n                    borderColor: 'rgba(255, 99, 132, 0.2)',\r\n                  },\r\n                ],\r\n                }\r\n            })\r\n          })\r\n    }\r\n    inputHandler=(e)=>{\r\n        this.setState({\r\n            value:e.target.value\r\n        })\r\n    }\r\n    componentDidMount(){\r\n        this.defaultWeather(\"Warszawa\")\r\n     }\r\n    setForecast=()=>{\r\n        if(this.state.forecast){\r\n            this.setState({\r\n                forecast:false\r\n            })\r\n        }else{\r\n            this.setState({\r\n                forecast:true\r\n            })\r\n        }\r\n    }\r\n    render(){\r\n        const {forecastDailyElements, forecastHourlyElements, dailyProperty, hourlyProperty}=this.state\r\n        if(this.state.forecast){\r\n            return(\r\n                    <div className=\"main\" style={{ \r\n                        backgroundImage: `url(\"/images/bg.jpg\")` \r\n                    }}>\r\n                        <div className=\"city-form\">\r\n                            <h1>Wyszukaj miasto dla którego chcesz sprawdzić obecne warunki pogodowe oraz prognozy pogody</h1>\r\n                            <Form \r\n                                value={this.state.value}  \r\n                                handler={this.inputHandler}\r\n                                submit={this.getWeather}\r\n                            /> \r\n                        </div> \r\n                        <div className=\"current-main\">\r\n                            {this.state.city ?(\r\n                            <WeatherItem weather={this.state}/>   \r\n                            ):null}\r\n                        </div>\r\n                    <div className=\"forecast-main\">\r\n                        {dailyProperty ?( \r\n                        <div className=\"forecast-cards\">\r\n                            <button className=\"left\" \r\n                                onClick={() => this.nextdailyProperty()} \r\n                                disabled={dailyProperty.id === forecastDailyElements.length-3}\r\n                            >Next\r\n                            </button>\r\n                            <button className=\"swap-button\"\r\n                                onClick={() => this.setForecast()} \r\n                            >GODZINOWA\r\n                            </button>\r\n                            <button className=\"right\"\r\n                                    onClick={() => this.prevdailyProperty()} \r\n                                    disabled={dailyProperty.id === 1}\r\n                            >Prev\r\n                            </button>\r\n                            <div className=\"main-cards\">  \r\n                                <div className=\"cards-slider\">         \r\n                                    <div className=\"cards-slider-wrapper\" style={{\r\n                                                                            'transform':`translateX(-${dailyProperty.id*(100/forecastDailyElements.length)}%)`\r\n                                    }}>\r\n                                        {forecastDailyElements.map(fde => <ForecastDailyItem key={fde.id} element={fde} />)}\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    ):null}\r\n                    </div>\r\n                    </div>\r\n            )\r\n        }else{\r\n            return(\r\n                <div className=\"main\" style={{ \r\n                    backgroundImage: `url(\"/images/bg.jpg\")` \r\n                }}>\r\n                    <div className=\"city-form\">\r\n                        <h1>Wyszukaj miasto dla którego chcesz sprawdzić obecne warunki pogodowe oraz prognozy pogody</h1>\r\n                        <Form \r\n                            value={this.state.value}  \r\n                            handler={this.inputHandler}\r\n                            submit={this.getWeather}\r\n                        /> \r\n                    </div> \r\n                    <div className=\"current-main\">\r\n                        {this.state.city ?(\r\n                        <WeatherItem weather={this.state}/>   \r\n                        ):null}\r\n                    </div>\r\n                <div className=\"forecast-main\">\r\n                    {hourlyProperty ?( \r\n                    <div className=\"forecast-cards\">\r\n                        <button className=\"left\" \r\n                            onClick={() => this.nextHourlyProperty()} \r\n                            disabled={hourlyProperty.id === forecastHourlyElements.length-3}\r\n                        >Next\r\n                        </button>\r\n                        <button className=\"swap-button\"\r\n                            onClick={() => this.setForecast()} \r\n                        >DZIENNA\r\n                        </button>\r\n                        <button className=\"right\"\r\n                                onClick={() => this.prevHourlyProperty()} \r\n                                disabled={hourlyProperty.id === 1}\r\n                        >Prev\r\n                        </button>\r\n                        <div className=\"main-cards\">  \r\n                            <div className=\"cards-slider\">         \r\n                                <div className=\"cards-slider-wrapper\" style={{\r\n                                                                        'transform':`translateX(-${hourlyProperty.id*(100/forecastHourlyElements.length)}%)`\r\n                                }}>\r\n                                    {forecastHourlyElements.map(fde => <ForecastHourlyItem key={fde.id} element={fde} />)}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                ):null}\r\n                </div>\r\n                </div>\r\n            )\r\n        }\r\n        \r\n    }\r\n}\r\nconst weatherIcons = {\r\n    200:'/images/200.png',\r\n    201:'/images/201.png',\r\n    202:'/images/202.png',\r\n    210:'/images/210.png',\r\n    211:'/images/211.png',\r\n    212:'/images/212.png',\r\n    221:'/images/212.png',\r\n    230:'/images/230D.png',\r\n    231:'/images/231.png',\r\n    232:'/images/232.png',\r\n    300:'/images/300D.png',\r\n    301:'/images/301.png',\r\n    302:'/images/302.png',\r\n    310:'/images/310D.png',\r\n    311:'/images/311.png',\r\n    312:'/images/312.png',\r\n    313:'/images/313_1.png',\r\n    314:'/images/314.png',\r\n    321:'/images/321.png',\r\n    500:'/images/500D.png',\r\n    501:'/images/501.png',\r\n    502:'/images/502.png',\r\n    503:'/images/503.png',\r\n    504:'/images/504.png',\r\n    511:'/images/511.png',\r\n    520:'/images/520D.png',\r\n    521:'/images/521_2.png',\r\n    522:'/images/522_1.png',\r\n    531:'/images/522_1.png',\r\n    600:'/images/600D.png',\r\n    601:'/images/601.png',\r\n    602:'/images/602.png',\r\n    611:'/images/611.png',\r\n    612:'/images/612D.png',\r\n    613:'/images/613.png',\r\n    615:'/images/615D.png',\r\n    616:'/images/616.png',\r\n    620:'/images/620D.png',\r\n    621:'/images/621.png',\r\n    622:'/images/622.png',\r\n    701:'/images/701_2.png',\r\n    711:'/images/701_2.png',\r\n    721:'/images/701_2.png',\r\n    731:'/images/701_2.png',\r\n    741:'/images/701_2.png',\r\n    751:'/images/701_2.png',\r\n    761:'/images/701_2.png',\r\n    762:'/images/701_2.png',\r\n    771:'/images/701_2.png',\r\n    781:'/images/701_2.png',\r\n    800:'/images/800D.png',\r\n    801:'/images/801D.png',\r\n    802:'/images/802D.png',\r\n    803:'/images/803D.png',\r\n    804:'/images/804.png',\r\n}\r\nconst airConditions = {\r\n    1:'Bardzo dobra',\r\n    2:'Dobra',\r\n    3:'Średnia',\r\n    4:'Zła',\r\n    5:'Bardzo zła',\r\n}\r\nexport default CurrentWeather","C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\Menu\\Button.js",[],"C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\Menu\\Dropdown.js",[],"C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\components\\UserPanel\\UserWeatherItem.js",["110"],"import React from 'react'\r\n\r\nconst ForecastDailyItem=({element, deleteW: deleteW })=>{\r\n    const {id,city,date,time,weather,temp,clouds,humidity,pressure,wind,aqi,color} = element;\r\n    return ( \r\n        <div className=\"userCard\">\r\n            <div className=\"card\" >\r\n                    <div className=\"face face1\">\r\n                        <div className=\"content\">\r\n                        <p>{id}</p>\r\n                        <p>{city}</p>\r\n                        <p>{date} {time}</p>\r\n                        {/*<p><img src={image} width=\"90\" height=\"90\" /></p>*/}\r\n                        <h3>{weather}</h3>\r\n                        <p><img src={weatherIcons[5]} width=\"20\" height=\"20\" alt=\"img\"/> {temp}&deg;</p>\r\n                        </div>\r\n                        </div>\r\n                        <div className=\"face face2\">\r\n                            <div className=\"content\">\r\n                                <p><img src={weatherIcons[1]} width=\"20\" height=\"20\" alt=\"img\"/>{clouds}% <img src={weatherIcons[4]} width=\"20\" height=\"20\" alt=\"img\"/>{humidity}%</p>\r\n                                <p></p>\r\n                                <p><img src={weatherIcons[6]} width=\"20\" height=\"20\" alt=\"img\"/>{pressure} hPa</p>  \r\n                                <p><img src={weatherIcons[7]} width=\"20\" height=\"20\" alt=\"img\"/>{wind}km/h</p>\r\n                                <p>Jakość powietrza:<p className=\"aqi\" style={{ \r\n                                                    color: conditionColors[color]\r\n                                }}> {aqi}</p></p>\r\n                                <p><button type=\"submit\" className=\"submit-btn3\" onClick={deleteW.bind(null,id)} >USUN</button></p>\r\n                            </div>\r\n                        </div>\r\n                </div>\r\n        </div>\r\n    )\r\n}\r\nconst weatherIcons = {\r\n    1:'/images/clouds.png',\r\n    2:'/images/sunrise.png',\r\n    3:'/images/sunset.png',\r\n    4:'/images/humidity.png',\r\n    5:'/images/temp.webp',\r\n    6:'/images/pressure.png',\r\n    7:'/images/wind.png',\r\n}\r\nconst conditionColors = {\r\n    1:'green',\r\n    2:'lightgreen',\r\n    3:'yellow',\r\n    4:'red',\r\n    5:'purple',\r\n}\r\nexport default ForecastDailyItem","C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\components\\AirCondition\\AirConditionItem.js",[],"C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\components\\Compare\\CompareForecastItem.js",[],"C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\components\\Compare\\CompareCurrentWeatherItem.js",[],"C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\components\\currentWeather\\WeatherItem.js",[],"C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\components\\currentWeather\\ForecastDailyItem.js",[],"C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\components\\currentWeather\\ForecastHourlyItem.js",[],"C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\components\\Functions\\CalCelsius.js",[],"C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\components\\Form\\Form.js",[],"C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\components\\Functions\\CalTime.js",[],"C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\components\\Functions\\CalWindSpeed.js",[],"C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\components\\Functions\\CalDate.js",[],"C:\\Users\\vened\\Desktop\\Weather\\my_weather\\client\\src\\Menu\\MenuItems.js",[],{"ruleId":"111","replacedBy":"112"},{"ruleId":"113","replacedBy":"114"},{"ruleId":"115","severity":1,"message":"116","line":4,"column":9,"nodeType":"117","messageId":"118","endLine":4,"endColumn":25,"fix":"119"},{"ruleId":"120","severity":1,"message":"121","line":51,"column":7,"nodeType":"122","endLine":51,"endColumn":9,"suggestions":"123"},{"ruleId":"124","severity":1,"message":"125","line":27,"column":13,"nodeType":"126","messageId":"127","endLine":27,"endColumn":34},{"ruleId":"124","severity":1,"message":"128","line":35,"column":13,"nodeType":"126","messageId":"127","endLine":35,"endColumn":21},{"ruleId":"129","severity":1,"message":"130","line":12,"column":10,"nodeType":"131","messageId":"132","endLine":12,"endColumn":14},{"ruleId":"115","severity":1,"message":"133","line":3,"column":36,"nodeType":"134","messageId":"118","endLine":3,"endColumn":52,"fix":"135"},"no-native-reassign",["136"],"no-negated-in-lhs",["137"],"no-useless-rename","Import Router unnecessarily renamed.","ImportSpecifier","unnecessarilyRenamed",{"range":"138","text":"139"},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'Lid', 'cityWeatherList', and 'property'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setProperty' needs the current value of 'cityWeatherList'.","ArrayExpression",["140"],"no-dupe-keys","Duplicate key 'ForecastDailyElements'.","ObjectExpression","unexpected","Duplicate key 'Property'.","no-unused-vars","'Line' is defined but never used.","Identifier","unusedVar","Destructuring assignment deleteW unnecessarily renamed.","Property",{"range":"141","text":"142"},"no-global-assign","no-unsafe-negation",[139,155],"Router",{"desc":"143","fix":"144"},[64,80],"deleteW","Update the dependencies array to be: [Lid, cityWeatherList, property]",{"range":"145","text":"146"},[1701,1703],"[Lid, cityWeatherList, property]"]