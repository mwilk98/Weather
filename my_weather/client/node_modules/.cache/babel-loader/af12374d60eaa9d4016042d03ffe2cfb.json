{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vened\\\\Desktop\\\\Pogoda\\\\my_weather\\\\client\\\\src\\\\components\\\\AirCondition\\\\AirCondition.js\";\nimport React from 'react';\nimport Form from '../Form/Form';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_key = \"157d33f8987d245bc6a1997408e90015\";\n\nclass AirCondition extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      value: \"\",\n      lat: \"\",\n      lon: \"\"\n    };\n\n    this.getAir = e => {\n      e.preventDefault();\n      fetch(`http://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&APPID=${API_key}`).then(response => {\n        if (response.ok) {\n          return response;\n        }\n\n        throw Error(\"Błąd pobierania danych z API\");\n      }).then(response => response.json()).then(response => {\n        const localTime = new Date().toLocaleString();\n        console.log(response);\n        this.setState(state => ({\n          city: state.value,\n          country: response.sys.country,\n          date: this.calDate(response.dt),\n          time: this.calTime(response.dt, response.timezone),\n          weather: response.weather[0].description,\n          temp: this.calCelsius(response.main.temp),\n          tempMax: this.calCelsius(response.main.temp_max),\n          tempMin: this.calCelsius(response.main.temp_min),\n          pressure: response.main.pressure,\n          wind: this.calWindSpeed(response.wind.speed),\n          lat: response.coord.lat,\n          lon: response.coord.lon,\n          error: false\n        }));\n      }).catch(err => {\n        console.log(err);\n        this.setState(prevState => {\n          return {\n            error: true,\n            city: prevState.city\n          };\n        });\n      });\n    };\n\n    this.inputHandler = e => {\n      this.setState({\n        value: e.target.value\n      });\n    };\n\n    this.submitHandler = e => {\n      this.getWeather(e);\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Pogoda\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Form, {\n          value: this.state.value,\n          handler: this.inputHandler,\n          submit: this.submitHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default AirCondition;","map":{"version":3,"sources":["C:/Users/vened/Desktop/Pogoda/my_weather/client/src/components/AirCondition/AirCondition.js"],"names":["React","Form","API_key","AirCondition","Component","state","value","lat","lon","getAir","e","preventDefault","fetch","then","response","ok","Error","json","localTime","Date","toLocaleString","console","log","setState","city","country","sys","date","calDate","dt","time","calTime","timezone","weather","description","temp","calCelsius","main","tempMax","temp_max","tempMin","temp_min","pressure","wind","calWindSpeed","speed","coord","error","catch","err","prevState","inputHandler","target","submitHandler","getWeather","render"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport Form from '../Form/Form'\r\n\r\nconst API_key=\"157d33f8987d245bc6a1997408e90015\"\r\n\r\n\r\nclass AirCondition extends React.Component{\r\n    state={\r\n        value:\"\",\r\n        lat:\"\",\r\n        lon:\"\"\r\n    }\r\n    getAir = (e) =>{\r\n        \r\n        e.preventDefault()\r\n          \r\n          fetch(`http://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&APPID=${API_key}`)\r\n          .then(response => {\r\n              if(response.ok){\r\n                  return response\r\n              }\r\n              throw Error(\"Błąd pobierania danych z API\")\r\n          })\r\n          .then(response => response.json())\r\n          .then(response => {\r\n              const localTime = new Date().toLocaleString()\r\n              console.log(response)\r\n              this.setState(state =>({\r\n                city:state.value,\r\n                country:response.sys.country,\r\n                date:this.calDate(response.dt),\r\n                time:this.calTime(response.dt,response.timezone),\r\n                weather:response.weather[0].description,\r\n                temp:this.calCelsius(response.main.temp),\r\n                tempMax:this.calCelsius(response.main.temp_max),\r\n                tempMin:this.calCelsius(response.main.temp_min),\r\n                pressure:response.main.pressure,\r\n                wind:this.calWindSpeed(response.wind.speed),\r\n                lat:response.coord.lat,\r\n                lon:response.coord.lon, \r\n                error:false\r\n              }))\r\n          })\r\n          .catch(err =>{\r\n            console.log(err)\r\n            this.setState(prevState =>{\r\n                return{\r\n                error:true,\r\n                city:prevState.city\r\n            }})\r\n        })\r\n    }\r\n    inputHandler=(e)=>{\r\n        this.setState({\r\n            value:e.target.value\r\n        })\r\n    }\r\n    submitHandler=(e)=>{\r\n        this.getWeather(e)\r\n    }\r\n    render(){\r\n        \r\n        return(\r\n            <div >\r\n                <h1>Pogoda</h1>\r\n                <div>\r\n                <Form \r\n                value={this.state.value}  \r\n                handler={this.inputHandler}\r\n                submit={this.submitHandler}\r\n                /> \r\n                </div>   \r\n            </div>\r\n            \r\n        )\r\n    }\r\n}\r\nexport default AirCondition"]},"metadata":{},"sourceType":"module"}