{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vened\\\\Desktop\\\\Pogoda\\\\my_weather\\\\client\\\\src\\\\components\\\\currentWeather\\\\CurrentWeather.js\";\nimport React from 'react';\nimport WeatherItem from './WeatherItem';\nimport Form from '../Form/Form';\nimport CalDate from '../Functions/CalDate';\nimport CalTime from '../Functions/CalTime';\nimport CalCelsius from '../Functions/CalCelsius';\nimport CalWindSpeed from '../Functions/CalWindSpeed';\nimport ForecastDailyItem from './ForecastDailyItem';\nimport ForecastHourlyItem from './ForecastHourlyItem';\nimport './Forecast.css';\nimport './CurrentWeather.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_key = \"157d33f8987d245bc6a1997408e90015\"; //const localTime = new Date().toLocaleString()\n\nclass CurrentWeather extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.nextdailyProperty = () => {\n      const newIndex = this.state.dailyProperty.id + 1;\n      this.setState({\n        dailyProperty: this.state.forecastDailyElements[newIndex]\n      });\n      console.log(newIndex);\n    };\n\n    this.prevdailyProperty = () => {\n      const newIndex = this.state.dailyProperty.id - 1;\n      this.setState({\n        dailyProperty: this.state.forecastDailyElements[newIndex]\n      });\n    };\n\n    this.nextHourlyProperty = () => {\n      const newIndex = this.state.hourlyProperty.id + 1;\n      this.setState({\n        hourlyProperty: this.state.forecastHourlyElements[newIndex]\n      });\n    };\n\n    this.prevHourlyProperty = () => {\n      const newIndex = this.state.hourlyProperty.id - 1;\n      this.setState({\n        hourlyProperty: this.state.forecastHourlyElements[newIndex]\n      });\n    };\n\n    this.defaultWeather = cityName => {\n      this.setState(state => ({\n        city: cityName,\n        error: false\n      }));\n      fetch(`http://api.openweathermap.org/data/2.5/weather?q=${cityName}&lang=pl&APPID=${API_key}`).then(response => {\n        if (response.ok) {\n          return response;\n        }\n\n        throw Error(\"Błąd pobierania danych z API\");\n      }).then(response => response.json()).then(response => {\n        const localTime = new Date().toLocaleString();\n        console.log(response);\n        this.setState(state => ({\n          city: state.city,\n          country: response.sys.country,\n          date: CalDate(response.dt),\n          time: CalTime(response.dt, response.timezone),\n          weather: response.weather[0].description,\n          temp: CalCelsius(response.main.temp),\n          tempMax: CalCelsius(response.main.temp_max),\n          tempMin: CalCelsius(response.main.temp_min),\n          tempFeel: CalCelsius(response.main.feels_like),\n          pressure: response.main.pressure,\n          wind: CalWindSpeed(response.wind.speed),\n          image: weatherIcons[response.weather[0].id],\n          lat: response.coord.lat,\n          lon: response.coord.lon,\n          clouds: response.clouds.all,\n          humidity: response.main.humidity,\n          sunrise: CalTime(response.sys.sunrise, response.timezone),\n          sunset: CalTime(response.sys.sunset, response.timezone),\n          background: \"/images/cloudyCity.jpg\",\n          error: false\n        }));\n      }).catch(err => {\n        console.log(err);\n        this.setState(prevState => {\n          return {\n            error: true,\n            city: prevState.city\n          };\n        });\n      });\n    };\n\n    this.getWeather = e => {\n      e.preventDefault();\n      fetch(`http://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&lang=pl&APPID=${API_key}`).then(response => {\n        if (response.ok) {\n          return response;\n        }\n\n        throw Error(\"Błąd pobierania danych z API\");\n      }).then(response => response.json()).then(response => {\n        const localTime = new Date().toLocaleString();\n        console.log(response);\n        this.getForecastDaily(response.coord.lat, response.coord.lon);\n        this.getForecastHourly(response.coord.lat, response.coord.lon);\n        this.setState(state => ({\n          city: state.value,\n          country: response.sys.country,\n          date: CalDate(response.dt),\n          time: CalTime(response.dt, response.timezone),\n          weather: response.weather[0].description,\n          temp: CalCelsius(response.main.temp),\n          tempMax: CalCelsius(response.main.temp_max),\n          tempMin: CalCelsius(response.main.temp_min),\n          tempFeel: CalCelsius(response.main.feels_like),\n          pressure: response.main.pressure,\n          wind: CalWindSpeed(response.wind.speed),\n          image: weatherIcons[response.weather[0].id],\n          lat: response.coord.lat,\n          lon: response.coord.lon,\n          clouds: response.clouds.all,\n          humidity: response.main.humidity,\n          sunrise: CalTime(response.sys.sunrise, response.timezone),\n          sunset: CalTime(response.sys.sunset, response.timezone),\n          background: \"/images/cloudyCity.jpg\",\n          error: false\n        }));\n      }).catch(err => {\n        console.log(err);\n        this.setState(prevState => {\n          return {\n            error: true,\n            city: prevState.city\n          };\n        });\n      });\n    };\n\n    this.getForecastDaily = (lat, lon) => {\n      console.log(lat);\n      this.state.forecastDailyElements.length = 0;\n      fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&lang=pl&appid=${API_key}`).then(response => {\n        if (response.ok) {\n          return response;\n        }\n\n        throw Error(\"Błąd pobierania danych z API\");\n      }).then(response => response.json()).then(response => {\n        console.log(response);\n\n        for (var i = 0; i < 8; i++) {\n          this.setState({\n            forecastDailyElements: [...this.state.forecastDailyElements, {\n              'id': i,\n              'date': CalDate(response.daily[i].dt),\n              'weather': response.daily[i].weather[0].description,\n              'temp': CalCelsius(response.daily[i].temp.day),\n              'pressure': response.daily[i].pressure,\n              'wind': CalWindSpeed(response.daily[i].wind_speed),\n              'image': weatherIcons[response.daily[i].weather[0].id],\n              'background': \"/images/download.gif\"\n            }],\n            dailyProperty: this.state.forecastDailyElements[0]\n          });\n        }\n      });\n    };\n\n    this.getForecastHourly = (lat, lon) => {\n      this.state.forecastHourlyElements.length = 0;\n      fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&lang=pl&appid=${API_key}`).then(response => {\n        if (response.ok) {\n          return response;\n        }\n\n        throw Error(\"Błąd pobierania danych z API\");\n      }).then(response => response.json()).then(response => {\n        const localTime = new Date().toLocaleString();\n        console.log(response);\n\n        for (var i = 0; i < 48; i++) {\n          this.setState({\n            forecastHourlyElements: [...this.state.forecastHourlyElements, {\n              'id': i,\n              'date': CalDate(response.hourly[i].dt),\n              'time': CalTime(response.hourly[i].dt, response.timezone_offset),\n              'weather': response.hourly[i].weather[0].description,\n              'temp': CalCelsius(response.hourly[i].temp),\n              'pressure': response.hourly[i].pressure,\n              'wind': CalWindSpeed(response.hourly[i].wind_speed),\n              'image': weatherIcons[response.hourly[i].weather[0].id]\n            }],\n            hourlyProperty: this.state.forecastHourlyElements[0]\n          });\n        }\n      });\n    };\n\n    this.inputHandler = e => {\n      this.setState({\n        value: e.target.value\n      });\n    };\n\n    this.setForecast = () => {\n      if (this.state.forecast) {\n        this.setState({\n          forecast: false\n        });\n      } else {\n        this.setState({\n          forecast: true\n        });\n      }\n    };\n\n    this.state = {\n      value: \"\",\n      city: \"\",\n      country: \"\",\n      image: undefined,\n      background: undefined,\n      weather: undefined,\n      temp: undefined,\n      tempMax: undefined,\n      tempMin: undefined,\n      tempFeel: undefined,\n      pressurre: undefined,\n      wind: undefined,\n      lat: undefined,\n      lon: undefined,\n      clouds: undefined,\n      humidity: undefined,\n      sunrise: undefined,\n      sunset: undefined,\n      background: undefined,\n      forecastDailyElements: [],\n      forecastHourlyElements: [],\n      dailyProperty: undefined,\n      hourlyProperty: undefined,\n      forecast: true,\n      error: false\n    };\n  }\n\n  componentDidMount() {\n    this.defaultWeather(\"Warszawa\");\n  }\n\n  render() {\n    const {\n      forecastDailyElements,\n      forecastHourlyElements,\n      dailyProperty,\n      hourlyProperty\n    } = this.state;\n\n    if (this.state.forecast) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main\",\n        style: {\n          backgroundImage: `url(\"/images/bg.jpg\")`\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"city-form\",\n          children: /*#__PURE__*/_jsxDEV(Form, {\n            value: this.state.value,\n            handler: this.inputHandler,\n            submit: this.getWeather\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 267,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: this.state.city ? /*#__PURE__*/_jsxDEV(WeatherItem, {\n            weather: this.state\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 275,\n            columnNumber: 29\n          }, this) : null\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"forecast-main\",\n          children: dailyProperty ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"forecast-cards\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"left\",\n              style: {\n                backgroundImage: `url(\"/images/bg.jpg\")`\n              },\n              onClick: () => this.nextdailyProperty(),\n              disabled: dailyProperty.id === forecastDailyElements.length - 1,\n              children: \"Next\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 281,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"swap-button\",\n              onClick: () => this.setForecast(),\n              children: \"SWAP\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 287,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"main-cards\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"cards-slider\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"cards-slider-wrapper\",\n                  style: {\n                    'transform': `translateX(-${dailyProperty.id * (100 / forecastDailyElements.length)}%)`\n                  },\n                  children: forecastDailyElements.map(fde => /*#__PURE__*/_jsxDEV(ForecastDailyItem, {\n                    element: fde\n                  }, fde.id, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 299,\n                    columnNumber: 67\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 296,\n                  columnNumber: 29\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"right\",\n                  onClick: () => this.prevdailyProperty(),\n                  disabled: dailyProperty.id === 0,\n                  children: \"Prev\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 301,\n                  columnNumber: 29\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 294,\n                columnNumber: 25\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 292,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 280,\n            columnNumber: 25\n          }, this) : null\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 21\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main\",\n        style: {\n          backgroundImage: `url(\"/images/bg.jpg\")`\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"city-form\",\n          children: /*#__PURE__*/_jsxDEV(Form, {\n            value: this.state.value,\n            handler: this.inputHandler,\n            submit: this.getWeather\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 321,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 320,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: this.state.city ? /*#__PURE__*/_jsxDEV(WeatherItem, {\n            weather: this.state\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 329,\n            columnNumber: 25\n          }, this) : null\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"right\",\n          onClick: () => this.setForecast(),\n          children: \"SWAP\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 332,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"main-cards\",\n          children: hourlyProperty ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"cards-slider\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"left\",\n              onClick: () => this.nextHourlyProperty(),\n              disabled: hourlyProperty.id === forecastHourlyElements.length - 1,\n              children: \"Next\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 339,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"cards-slider-wrapper\",\n              style: {\n                'transform': `translateX(-${hourlyProperty.id * (100 / forecastHourlyElements.length)}%)`\n              },\n              children: forecastHourlyElements.map(fde => /*#__PURE__*/_jsxDEV(ForecastHourlyItem, {\n                element: fde\n              }, fde.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 347,\n                columnNumber: 68\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 344,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"right\",\n              onClick: () => this.prevHourlyProperty(),\n              disabled: hourlyProperty.id === 0,\n              children: \"Prev\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 349,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 338,\n            columnNumber: 25\n          }, this) : null\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 336,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 17\n      }, this);\n    }\n  }\n\n}\n\nconst weatherIcons = {\n  200: '/images/thunderstorm.png',\n  201: '/images/thunderstorm.png',\n  202: '/images/thunderstorm.png',\n  210: '/images/thunderstorm.png',\n  211: '/images/thunderstorm.png',\n  212: '/images/thunderstorm.png',\n  221: '/images/thunderstorm.png',\n  230: '/images/thunderstorm.png',\n  231: '/images/thunderstorm.png',\n  232: '/images/thunderstorm.png',\n  300: '/images/drizzle.png',\n  301: '/images/drizzle.png',\n  302: '/images/drizzle.png',\n  310: '/images/drizzle.png',\n  311: '/images/drizzle.png',\n  312: '/images/drizzle.png',\n  313: '/images/drizzle.png',\n  314: '/images/drizzle.png',\n  321: '/images/drizzle.png',\n  500: '/images/rain.png',\n  501: '/images/rain.png',\n  503: '/images/rain.png',\n  504: '/images/rain.png',\n  511: '/images/rain.png',\n  520: '/images/rain.png',\n  521: '/images/rain.png',\n  522: '/images/rain.png',\n  531: '/images/rain.png',\n  500: '/images/rain.png',\n  600: '/images/snow.png',\n  601: '/images/snow.png',\n  602: '/images/snow.png',\n  611: '/images/snow.png',\n  612: '/images/snow.png',\n  613: '/images/snow.png',\n  615: '/images/snow.png',\n  616: '/images/snow.png',\n  620: '/images/snow.png',\n  621: '/images/snow.png',\n  622: '/images/snow.png',\n  701: '/images/mist.png',\n  711: '/images/mist.png',\n  721: '/images/mist.png',\n  731: '/images/mist.png',\n  741: '/images/mist.png',\n  751: '/images/mist.png',\n  761: '/images/mist.png',\n  762: '/images/mist.png',\n  771: '/images/mist.png',\n  781: '/images/mist.png',\n  800: '/images/clear.png',\n  801: '/images/clouds.png',\n  802: '/images/clouds.png',\n  803: '/images/clouds.png',\n  804: '/images/clouds.png'\n};\nexport default CurrentWeather;","map":{"version":3,"sources":["C:/Users/vened/Desktop/Pogoda/my_weather/client/src/components/currentWeather/CurrentWeather.js"],"names":["React","WeatherItem","Form","CalDate","CalTime","CalCelsius","CalWindSpeed","ForecastDailyItem","ForecastHourlyItem","API_key","CurrentWeather","Component","constructor","props","nextdailyProperty","newIndex","state","dailyProperty","id","setState","forecastDailyElements","console","log","prevdailyProperty","nextHourlyProperty","hourlyProperty","forecastHourlyElements","prevHourlyProperty","defaultWeather","cityName","city","error","fetch","then","response","ok","Error","json","localTime","Date","toLocaleString","country","sys","date","dt","time","timezone","weather","description","temp","main","tempMax","temp_max","tempMin","temp_min","tempFeel","feels_like","pressure","wind","speed","image","weatherIcons","lat","coord","lon","clouds","all","humidity","sunrise","sunset","background","catch","err","prevState","getWeather","e","preventDefault","value","getForecastDaily","getForecastHourly","length","i","daily","day","wind_speed","hourly","timezone_offset","inputHandler","target","setForecast","forecast","undefined","pressurre","componentDidMount","render","backgroundImage","map","fde"],"mappings":"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","sourcesContent":["import React from 'react'\nimport WeatherItem from './WeatherItem';\nimport Form from '../Form/Form'\nimport CalDate from '../Functions/CalDate';\nimport CalTime from '../Functions/CalTime';\nimport CalCelsius from '../Functions/CalCelsius';\nimport CalWindSpeed from '../Functions/CalWindSpeed';\nimport ForecastDailyItem from './ForecastDailyItem';\nimport ForecastHourlyItem from './ForecastHourlyItem';\nimport './Forecast.css';\nimport './CurrentWeather.css';\n\nconst API_key=\"157d33f8987d245bc6a1997408e90015\"\n//const localTime = new Date().toLocaleString()\n\nclass CurrentWeather extends React.Component{\n    constructor(props){\n        super(props)\n        this.state={\n            value:\"\",\n            city:\"\",\n            country:\"\",\n            image:undefined,\n            background:undefined,\n            weather:undefined,\n            temp:undefined,\n            tempMax:undefined,\n            tempMin:undefined,\n            tempFeel:undefined,\n            pressurre:undefined,\n            wind:undefined,\n            lat:undefined,\n            lon:undefined,\n            clouds:undefined, \n            humidity:undefined,\n            sunrise:undefined,\n            sunset:undefined,\n            background:undefined,\n            forecastDailyElements:[\n            ],\n            forecastHourlyElements:[\n            ],\n            dailyProperty: undefined,\n            hourlyProperty: undefined,\n            forecast:true,\n            error:false\n        }\n    }\n\n    nextdailyProperty = () => {\n        const newIndex = this.state.dailyProperty.id +1\n        this.setState({\n            dailyProperty: this.state.forecastDailyElements[newIndex]\n        })\n        console.log(newIndex)\n    }\n\n    prevdailyProperty = () => {\n        const newIndex = this.state.dailyProperty.id -1\n        this.setState({\n            dailyProperty: this.state.forecastDailyElements[newIndex]\n        })\n    }\n\n    nextHourlyProperty = () => {\n        const newIndex = this.state.hourlyProperty.id +1\n        this.setState({\n            hourlyProperty: this.state.forecastHourlyElements[newIndex]\n        })\n    }\n    \n    prevHourlyProperty = () => {\n        const newIndex = this.state.hourlyProperty.id -1\n        this.setState({\n            hourlyProperty: this.state.forecastHourlyElements[newIndex]\n        })\n    }\n    defaultWeather = (cityName) => {\n        this.setState(state =>({\n            city:cityName,\n            error:false\n          }))\n          fetch(`http://api.openweathermap.org/data/2.5/weather?q=${cityName}&lang=pl&APPID=${API_key}`)\n          .then(response => {\n              if(response.ok){\n                  return response\n              }\n              throw Error(\"Błąd pobierania danych z API\")\n          })\n          .then(response => response.json())\n          .then(response => {\n              const localTime = new Date().toLocaleString()\n              console.log(response)\n              this.setState(state =>({\n                city:state.city,\n                country:response.sys.country,\n                date:CalDate(response.dt),\n                time:CalTime(response.dt,response.timezone),\n                weather:response.weather[0].description,\n                temp:CalCelsius(response.main.temp),\n                tempMax:CalCelsius(response.main.temp_max),\n                tempMin:CalCelsius(response.main.temp_min),\n                tempFeel:CalCelsius(response.main.feels_like),\n                pressure:response.main.pressure,\n                wind:CalWindSpeed(response.wind.speed),\n                image:weatherIcons[response.weather[0].id],\n                lat:response.coord.lat,\n                lon:response.coord.lon,\n                clouds:response.clouds.all, \n                humidity:response.main.humidity,\n                sunrise:CalTime(response.sys.sunrise,response.timezone),\n                sunset:CalTime(response.sys.sunset,response.timezone),\n                background:\"/images/cloudyCity.jpg\",\n                error:false\n              }))\n          })\n          .catch(err =>{\n            console.log(err)\n            this.setState(prevState =>{\n                return{\n                error:true,\n                city:prevState.city\n            }})\n        })\n    }\n    getWeather = (e) =>{\n        \n        e.preventDefault()\n          \n          fetch(`http://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&lang=pl&APPID=${API_key}`)\n          .then(response => {\n              if(response.ok){\n                  return response\n              }\n              throw Error(\"Błąd pobierania danych z API\")\n          })\n          .then(response => response.json())\n          .then(response => {\n              const localTime = new Date().toLocaleString()\n              console.log(response)\n              this.getForecastDaily(response.coord.lat,response.coord.lon)\n              this.getForecastHourly(response.coord.lat,response.coord.lon)\n              this.setState(state =>({\n                city:state.value,\n                country:response.sys.country,\n                date:CalDate(response.dt),\n                time:CalTime(response.dt,response.timezone),\n                weather:response.weather[0].description,\n                temp:CalCelsius(response.main.temp),\n                tempMax:CalCelsius(response.main.temp_max),\n                tempMin:CalCelsius(response.main.temp_min),\n                tempFeel:CalCelsius(response.main.feels_like),\n                pressure:response.main.pressure,\n                wind:CalWindSpeed(response.wind.speed),\n                image:weatherIcons[response.weather[0].id],\n                lat:response.coord.lat,\n                lon:response.coord.lon,\n                clouds:response.clouds.all, \n                humidity:response.main.humidity,\n                sunrise:CalTime(response.sys.sunrise,response.timezone),\n                sunset:CalTime(response.sys.sunset,response.timezone),\n                background:\"/images/cloudyCity.jpg\",\n                error:false\n              }))\n          })\n          .catch(err =>{\n            console.log(err)\n            this.setState(prevState =>{\n                return{\n                error:true,\n                city:prevState.city\n            }})\n        })\n        \n    }\n    getForecastDaily = (lat,lon)=>{\n\n        console.log(lat)\n        this.state.forecastDailyElements.length=0\n        \n        fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&lang=pl&appid=${API_key}`)\n          .then(response => {\n              if(response.ok){\n                  return response\n              }\n              throw Error(\"Błąd pobierania danych z API\")\n          })\n          .then(response => response.json())\n          .then(response => {\n              console.log(response)\n              for (var i = 0; i < 8; i++) {\n                this.setState({\n                    forecastDailyElements:[...this.state.forecastDailyElements,{\n                        'id':i,\n                        'date':CalDate(response.daily[i].dt),\n                        'weather':response.daily[i].weather[0].description,\n                        'temp':CalCelsius(response.daily[i].temp.day),\n                        'pressure':response.daily[i].pressure,\n                        'wind':CalWindSpeed(response.daily[i].wind_speed),\n                        'image':weatherIcons[response.daily[i].weather[0].id],\n                        'background':\"/images/download.gif\",\n                    }],\n                    dailyProperty:this.state.forecastDailyElements[0]\n                })\n            }   \n          })\n    }\n    getForecastHourly = (lat,lon)=>{\n\n        this.state.forecastHourlyElements.length=0\n        \n        fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&lang=pl&appid=${API_key}`)\n          .then(response => {\n              if(response.ok){\n                  return response\n              }\n              throw Error(\"Błąd pobierania danych z API\")\n          })\n          .then(response => response.json())\n          .then(response => {\n              const localTime = new Date().toLocaleString()\n              console.log(response)\n              for (var i = 0; i < 48; i++) {\n                this.setState({\n                    forecastHourlyElements:[...this.state.forecastHourlyElements,{\n                        'id':i,\n                        'date':CalDate(response.hourly[i].dt),\n                        'time':CalTime(response.hourly[i].dt,response.timezone_offset),\n                        'weather':response.hourly[i].weather[0].description,\n                        'temp':CalCelsius(response.hourly[i].temp),\n                        'pressure':response.hourly[i].pressure,\n                        'wind':CalWindSpeed(response.hourly[i].wind_speed),\n                        'image':weatherIcons[response.hourly[i].weather[0].id],\n                    }],\n                    hourlyProperty:this.state.forecastHourlyElements[0]\n                })\n            }\n          })\n    }\n    inputHandler=(e)=>{\n        this.setState({\n            value:e.target.value\n        })\n    }\n    componentDidMount(){\n        this.defaultWeather(\"Warszawa\")\n     }\n    setForecast=()=>{\n        if(this.state.forecast){\n            this.setState({\n                forecast:false\n            })\n        }else{\n            this.setState({\n                forecast:true\n            })\n        }\n    }\n    render(){\n        const {forecastDailyElements, forecastHourlyElements, dailyProperty, hourlyProperty}=this.state\n        if(this.state.forecast){\n            return(\n                    <div className=\"main\" style={{ \n                        backgroundImage: `url(\"/images/bg.jpg\")` \n                    }}>\n                        <div className=\"city-form\">\n                            <Form \n                                value={this.state.value}  \n                                handler={this.inputHandler}\n                                submit={this.getWeather}\n                            /> \n                        </div> \n                        <div>\n                            {this.state.city ?(\n                            <WeatherItem weather={this.state}/>   \n                            ):null}\n                        </div>\n                    <div className=\"forecast-main\">\n                        {dailyProperty ?( \n                        <div className=\"forecast-cards\">\n                            <button className=\"left\" style={{ \n                            backgroundImage: `url(\"/images/bg.jpg\")`}}\n                                onClick={() => this.nextdailyProperty()} \n                                disabled={dailyProperty.id === forecastDailyElements.length-1}\n                            >Next\n                            </button>\n                            <button className=\"swap-button\"\n                                onClick={() => this.setForecast()} \n                            >SWAP\n                            </button>\n\n                    <div className=\"main-cards\">\n                        \n                        <div className=\"cards-slider\">\n                            \n                            <div className=\"cards-slider-wrapper\" style={{\n                                'transform':`translateX(-${dailyProperty.id*(100/forecastDailyElements.length)}%)`\n                            }}>\n                                {forecastDailyElements.map(fde => <ForecastDailyItem key={fde.id} element={fde} />)}\n                            </div>\n                            <button className=\"right\"\n                                    onClick={() => this.prevdailyProperty()} \n                                    disabled={dailyProperty.id === 0}\n                            >Prev\n                            </button>\n                        </div>\n                        \n                    </div>\n                    \n                    </div>\n                    ):null}\n                </div>\n                </div>\n            )\n        }else{\n            return(\n                <div className=\"main\" style={{ \n                    backgroundImage: `url(\"/images/bg.jpg\")` \n                  }}>\n                    <div className=\"city-form\">\n                    <Form \n                    value={this.state.value}  \n                    handler={this.inputHandler}\n                    submit={this.getWeather}\n                    /> \n                    </div> \n                    <div>\n                    {this.state.city ?(\n                        <WeatherItem weather={this.state}/>   \n                    ):null}\n                    </div>\n                    <button className=\"right\"\n                                    onClick={() => this.setForecast()} \n                            >SWAP\n                    </button>\n                    <div className=\"main-cards\">\n                        {hourlyProperty ?( \n                        <div className=\"cards-slider\">\n                            <button className=\"left\" \n                                    onClick={() => this.nextHourlyProperty()} \n                                    disabled={hourlyProperty.id === forecastHourlyElements.length-1}\n                                    >Next\n                            </button>\n                            <div className=\"cards-slider-wrapper\" style={{\n                                'transform':`translateX(-${hourlyProperty.id*(100/forecastHourlyElements.length)}%)`\n                            }}>\n                                {forecastHourlyElements.map(fde => <ForecastHourlyItem key={fde.id} element={fde} />)}\n                            </div>\n                            <button className=\"right\"\n                                    onClick={() => this.prevHourlyProperty()} \n                                    disabled={hourlyProperty.id === 0}\n                            >Prev\n                            </button>\n                        </div>\n                        ):null}\n                    </div>\n                </div>\n            \n            )\n        }\n        \n    }\n}\nconst weatherIcons = {\n    200:'/images/thunderstorm.png',\n    201:'/images/thunderstorm.png',\n    202:'/images/thunderstorm.png',\n    210:'/images/thunderstorm.png',\n    211:'/images/thunderstorm.png',\n    212:'/images/thunderstorm.png',\n    221:'/images/thunderstorm.png',\n    230:'/images/thunderstorm.png',\n    231:'/images/thunderstorm.png',\n    232:'/images/thunderstorm.png',\n    300:'/images/drizzle.png',\n    301:'/images/drizzle.png',\n    302:'/images/drizzle.png',\n    310:'/images/drizzle.png',\n    311:'/images/drizzle.png',\n    312:'/images/drizzle.png',\n    313:'/images/drizzle.png',\n    314:'/images/drizzle.png',\n    321:'/images/drizzle.png',\n    500:'/images/rain.png',\n    501:'/images/rain.png',\n    503:'/images/rain.png',\n    504:'/images/rain.png',\n    511:'/images/rain.png',\n    520:'/images/rain.png',\n    521:'/images/rain.png',\n    522:'/images/rain.png',\n    531:'/images/rain.png',\n    500:'/images/rain.png',\n    600:'/images/snow.png',\n    601:'/images/snow.png',\n    602:'/images/snow.png',\n    611:'/images/snow.png',\n    612:'/images/snow.png',\n    613:'/images/snow.png',\n    615:'/images/snow.png',\n    616:'/images/snow.png',\n    620:'/images/snow.png',\n    621:'/images/snow.png',\n    622:'/images/snow.png',\n    701:'/images/mist.png',\n    711:'/images/mist.png',\n    721:'/images/mist.png',\n    731:'/images/mist.png',\n    741:'/images/mist.png',\n    751:'/images/mist.png',\n    761:'/images/mist.png',\n    762:'/images/mist.png',\n    771:'/images/mist.png',\n    781:'/images/mist.png',\n    800:'/images/clear.png',\n    801:'/images/clouds.png',\n    802:'/images/clouds.png',\n    803:'/images/clouds.png',\n    804:'/images/clouds.png',\n}\nexport default CurrentWeather"]},"metadata":{},"sourceType":"module"}