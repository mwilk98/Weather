{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vened\\\\Desktop\\\\Pogoda\\\\my_weather\\\\client\\\\src\\\\components\\\\Compare\\\\Compare.js\";\nimport React from 'react';\nimport Form from '../Form/Form';\nimport CalDate from '../Functions/CalDate';\nimport CalTime from '../Functions/CalTime';\nimport CalCelsius from '../Functions/CalCelsius';\nimport CalWindSpeed from '../Functions/CalWindSpeed';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_key_OWM = \"157d33f8987d245bc6a1997408e90015\";\nconst API_key_WA = \"d42d0d989ead4316b9d143558213105\";\nconst API_key_S = \"1e94fed6-c222-11eb-862d-0242ac130002-1e94ff80-c222-11eb-862d-0242ac130002\";\n\nclass Compare extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getWeatherOpenweathermap = e => {\n      e.preventDefault();\n      fetch(`http://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&lang=pl&APPID=${API_key_OWM}`).then(response => {\n        if (response.ok) {\n          return response;\n        }\n\n        throw Error(\"Błąd pobierania danych z API\");\n      }).then(response => response.json()).then(response => {\n        const localTime = new Date().toLocaleString();\n        console.log(response);\n        this.getWeatherWeatherApi(this.state.value);\n        this.getWeatherTommorowIo(response.coord.lat, response.coord.lon);\n        this.getWeatherStormglass(response.coord.lat, response.coord.lon);\n        this.setState(state => ({\n          city: state.value,\n          country: response.sys.country,\n          date: CalDate(response.dt),\n          time: CalTime(response.dt, response.timezone),\n          weather: response.weather[0].description,\n          temp: CalCelsius(response.main.temp),\n          tempMax: CalCelsius(response.main.temp_max),\n          tempMin: CalCelsius(response.main.temp_min),\n          tempFeel: CalCelsius(response.main.feels_like),\n          pressure: response.main.pressure,\n          wind: CalWindSpeed(response.wind.speed),\n          image: weatherIcons[response.weather[0].id],\n          lat: response.coord.lat,\n          lon: response.coord.lon,\n          clouds: response.clouds.all,\n          humidity: response.main.humidity,\n          sunrise: CalTime(response.sys.sunrise, response.timezone),\n          sunset: CalTime(response.sys.sunset, response.timezone),\n          background: \"/images/cloudyCity.jpg\",\n          error: false\n        }));\n      }).catch(err => {\n        console.log(err);\n        this.setState(prevState => {\n          return {\n            error: true,\n            city: prevState.city\n          };\n        });\n      });\n    };\n\n    this.getWeatherWeatherApi = city => {\n      fetch(`http://api.weatherapi.com/v1/forecast.json?key=${API_key_WA}&q=${city}&days=7&aqi=yes&alerts=yes\n        `).then(response => {\n        if (response.ok) {\n          return response;\n        }\n\n        throw Error(\"Błąd pobierania danych z API\");\n      }).then(response => response.json()).then(response => {\n        const localTime = new Date().toLocaleString();\n        console.log(response);\n        this.setState(state => ({\n          city: state.value,\n          error: false\n        }));\n      }).catch(err => {\n        console.log(err);\n        this.setState(prevState => {\n          return {\n            error: true,\n            city: prevState.city\n          };\n        });\n      });\n    };\n\n    this.getWeatherTommorowIo = (lat, lon) => {\n      fetch(`https://api.tomorrow.io/v4/timelines?location=${lat},${lon}&fields=temperature&timesteps=1h&units=metric&apikey=Xsa59kYGGrHiXs1TZ3cItU7zRZ4FfGQ8\n        `).then(response => {\n        if (response.ok) {\n          return response;\n        }\n\n        throw Error(\"Błąd pobierania danych z API\");\n      }).then(response => response.json()).then(response => {\n        const localTime = new Date().toLocaleString();\n        console.log(response);\n        this.setState(state => ({\n          city: state.value,\n          error: false\n        }));\n      }).catch(err => {\n        console.log(err);\n        this.setState(prevState => {\n          return {\n            error: true,\n            city: prevState.city\n          };\n        });\n      });\n    };\n\n    this.inputHandler = e => {\n      this.setState({\n        value: e.target.value\n      });\n    };\n\n    this.getWeatherStormglass = (lat, lon) => {\n      const params = 'waveHeight,airTemperature';\n      fetch(`https://api.stormglass.io/v2/weather/point?lat=${lat}&lng=${lon}&params=${params}`, {\n        headers: {\n          'Authorization': 'API_key_S'\n        }\n      }).then(response => {\n        if (response.ok) {\n          return response;\n        }\n\n        throw Error(\"Błąd pobierania danych z API\");\n      }).then(response => response.json()).then(response => {\n        const localTime = new Date().toLocaleString();\n        console.log(response);\n        this.setState(state => ({\n          city: state.value,\n          error: false\n        }));\n      }).catch(err => {\n        console.log(err);\n        this.setState(prevState => {\n          return {\n            error: true,\n            city: prevState.city\n          };\n        });\n      });\n    };\n\n    this.state = {\n      value: \"\",\n      error: false\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"POR\\xD3WNAJ PROGNOZY\", /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"city-form\",\n        children: /*#__PURE__*/_jsxDEV(Form, {\n          value: this.state.value,\n          handler: this.inputHandler,\n          submit: this.getWeatherOpenweathermap\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst weatherIcons = {\n  200: '/images/thunderstorm.png',\n  201: '/images/thunderstorm.png',\n  202: '/images/thunderstorm.png',\n  210: '/images/thunderstorm.png',\n  211: '/images/thunderstorm.png',\n  212: '/images/thunderstorm.png',\n  221: '/images/thunderstorm.png',\n  230: '/images/thunderstorm.png',\n  231: '/images/thunderstorm.png',\n  232: '/images/thunderstorm.png',\n  300: '/images/drizzle.png',\n  301: '/images/drizzle.png',\n  302: '/images/drizzle.png',\n  310: '/images/drizzle.png',\n  311: '/images/drizzle.png',\n  312: '/images/drizzle.png',\n  313: '/images/drizzle.png',\n  314: '/images/drizzle.png',\n  321: '/images/drizzle.png',\n  500: '/images/rain.png',\n  501: '/images/rain.png',\n  503: '/images/rain.png',\n  504: '/images/rain.png',\n  511: '/images/rain.png',\n  520: '/images/rain.png',\n  521: '/images/rain.png',\n  522: '/images/rain.png',\n  531: '/images/rain.png',\n  500: '/images/rain.png',\n  600: '/images/snow.png',\n  601: '/images/snow.png',\n  602: '/images/snow.png',\n  611: '/images/snow.png',\n  612: '/images/snow.png',\n  613: '/images/snow.png',\n  615: '/images/snow.png',\n  616: '/images/snow.png',\n  620: '/images/snow.png',\n  621: '/images/snow.png',\n  622: '/images/snow.png',\n  701: '/images/mist.png',\n  711: '/images/mist.png',\n  721: '/images/mist.png',\n  731: '/images/mist.png',\n  741: '/images/mist.png',\n  751: '/images/mist.png',\n  761: '/images/mist.png',\n  762: '/images/mist.png',\n  771: '/images/mist.png',\n  781: '/images/mist.png',\n  800: '/images/clear.png',\n  801: '/images/clouds.png',\n  802: '/images/clouds.png',\n  803: '/images/clouds.png',\n  804: '/images/clouds.png'\n};\nexport default Compare;","map":{"version":3,"sources":["C:/Users/vened/Desktop/Pogoda/my_weather/client/src/components/Compare/Compare.js"],"names":["React","Form","CalDate","CalTime","CalCelsius","CalWindSpeed","API_key_OWM","API_key_WA","API_key_S","Compare","Component","constructor","props","getWeatherOpenweathermap","e","preventDefault","fetch","state","value","then","response","ok","Error","json","localTime","Date","toLocaleString","console","log","getWeatherWeatherApi","getWeatherTommorowIo","coord","lat","lon","getWeatherStormglass","setState","city","country","sys","date","dt","time","timezone","weather","description","temp","main","tempMax","temp_max","tempMin","temp_min","tempFeel","feels_like","pressure","wind","speed","image","weatherIcons","id","clouds","all","humidity","sunrise","sunset","background","error","catch","err","prevState","inputHandler","target","params","headers","render"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport Form from '../Form/Form'\r\nimport CalDate from '../Functions/CalDate';\r\nimport CalTime from '../Functions/CalTime';\r\nimport CalCelsius from '../Functions/CalCelsius';\r\nimport CalWindSpeed from '../Functions/CalWindSpeed';\r\n\r\nconst API_key_OWM=\"157d33f8987d245bc6a1997408e90015\"\r\nconst API_key_WA = \"d42d0d989ead4316b9d143558213105\"\r\nconst API_key_S = \"1e94fed6-c222-11eb-862d-0242ac130002-1e94ff80-c222-11eb-862d-0242ac130002\"\r\nclass Compare extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state={\r\n            value:\"\",\r\n            error:false\r\n        }\r\n    }\r\n    getWeatherOpenweathermap = (e) =>{\r\n        e.preventDefault()\r\n            \r\n        fetch(`http://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&lang=pl&APPID=${API_key_OWM}`)\r\n        .then(response => {\r\n            if(response.ok){\r\n                return response\r\n            }\r\n            throw Error(\"Błąd pobierania danych z API\")\r\n        })\r\n        .then(response => response.json())\r\n        .then(response => {\r\n            const localTime = new Date().toLocaleString()\r\n            console.log(response)\r\n            this.getWeatherWeatherApi(this.state.value)\r\n            this.getWeatherTommorowIo(response.coord.lat,response.coord.lon)\r\n            this.getWeatherStormglass(response.coord.lat,response.coord.lon)\r\n            this.setState(state =>({\r\n            city:state.value,\r\n            country:response.sys.country,\r\n            date:CalDate(response.dt),\r\n            time:CalTime(response.dt,response.timezone),\r\n            weather:response.weather[0].description,\r\n            temp:CalCelsius(response.main.temp),\r\n            tempMax:CalCelsius(response.main.temp_max),\r\n            tempMin:CalCelsius(response.main.temp_min),\r\n            tempFeel:CalCelsius(response.main.feels_like),\r\n            pressure:response.main.pressure,\r\n            wind:CalWindSpeed(response.wind.speed),\r\n            image:weatherIcons[response.weather[0].id],\r\n            lat:response.coord.lat,\r\n            lon:response.coord.lon,\r\n            clouds:response.clouds.all, \r\n            humidity:response.main.humidity,\r\n            sunrise:CalTime(response.sys.sunrise,response.timezone),\r\n            sunset:CalTime(response.sys.sunset,response.timezone),\r\n            background:\"/images/cloudyCity.jpg\",\r\n            error:false\r\n            }))\r\n        })\r\n        .catch(err =>{\r\n        console.log(err)\r\n        this.setState(prevState =>{\r\n            return{\r\n            error:true,\r\n            city:prevState.city\r\n        }})\r\n    })\r\n    }\r\n    getWeatherWeatherApi = (city) =>{\r\n            \r\n        fetch(`http://api.weatherapi.com/v1/forecast.json?key=${API_key_WA}&q=${city}&days=7&aqi=yes&alerts=yes\r\n        `)\r\n        .then(response => {\r\n            if(response.ok){\r\n                return response\r\n            }\r\n            throw Error(\"Błąd pobierania danych z API\")\r\n        })\r\n        .then(response => response.json())\r\n        .then(response => {\r\n            const localTime = new Date().toLocaleString()\r\n            console.log(response)\r\n            this.setState(state =>({\r\n            city:state.value,\r\n            error:false\r\n            }))\r\n        })\r\n        .catch(err =>{\r\n        console.log(err)\r\n        this.setState(prevState =>{\r\n            return{\r\n            error:true,\r\n            city:prevState.city\r\n        }})\r\n    })\r\n    }\r\n    getWeatherTommorowIo = (lat,lon) =>{\r\n            \r\n        fetch(`https://api.tomorrow.io/v4/timelines?location=${lat},${lon}&fields=temperature&timesteps=1h&units=metric&apikey=Xsa59kYGGrHiXs1TZ3cItU7zRZ4FfGQ8\r\n        `)\r\n        .then(response => {\r\n            if(response.ok){\r\n                return response\r\n            }\r\n            throw Error(\"Błąd pobierania danych z API\")\r\n        })\r\n        .then(response => response.json())\r\n        .then(response => {\r\n            const localTime = new Date().toLocaleString()\r\n            console.log(response)\r\n            this.setState(state =>({\r\n            city:state.value,\r\n            error:false\r\n            }))\r\n        })\r\n        .catch(err =>{\r\n        console.log(err)\r\n        this.setState(prevState =>{\r\n            return{\r\n            error:true,\r\n            city:prevState.city\r\n        }})\r\n    })\r\n    }\r\n    inputHandler=(e)=>{\r\n        this.setState({\r\n            value:e.target.value\r\n        })\r\n    }\r\n    getWeatherStormglass = (lat,lon) =>{\r\n            \r\n        const params = 'waveHeight,airTemperature';\r\n        fetch(`https://api.stormglass.io/v2/weather/point?lat=${lat}&lng=${lon}&params=${params}`, {\r\n        headers: {\r\n            'Authorization': 'API_key_S'\r\n        }\r\n        })\r\n        .then(response => {\r\n            if(response.ok){\r\n                return response\r\n            }\r\n            throw Error(\"Błąd pobierania danych z API\")\r\n        })\r\n        .then(response => response.json())\r\n        .then(response => {\r\n            const localTime = new Date().toLocaleString()\r\n            console.log(response)\r\n            this.setState(state =>({\r\n            city:state.value,\r\n            error:false\r\n            }))\r\n        })\r\n        .catch(err =>{\r\n        console.log(err)\r\n        this.setState(prevState =>{\r\n            return{\r\n            error:true,\r\n            city:prevState.city\r\n        }})\r\n    })\r\n    }   \r\n    render(){\r\n        return(\r\n            <div>\r\n                PORÓWNAJ PROGNOZY\r\n                <div className=\"city-form\">\r\n                <Form \r\n                value={this.state.value}  \r\n                handler={this.inputHandler}\r\n                submit={this.getWeatherOpenweathermap}\r\n                /> \r\n                </div>\r\n            </div>\r\n\r\n        \r\n        )\r\n    }\r\n}\r\nconst weatherIcons = {\r\n    200:'/images/thunderstorm.png',\r\n    201:'/images/thunderstorm.png',\r\n    202:'/images/thunderstorm.png',\r\n    210:'/images/thunderstorm.png',\r\n    211:'/images/thunderstorm.png',\r\n    212:'/images/thunderstorm.png',\r\n    221:'/images/thunderstorm.png',\r\n    230:'/images/thunderstorm.png',\r\n    231:'/images/thunderstorm.png',\r\n    232:'/images/thunderstorm.png',\r\n    300:'/images/drizzle.png',\r\n    301:'/images/drizzle.png',\r\n    302:'/images/drizzle.png',\r\n    310:'/images/drizzle.png',\r\n    311:'/images/drizzle.png',\r\n    312:'/images/drizzle.png',\r\n    313:'/images/drizzle.png',\r\n    314:'/images/drizzle.png',\r\n    321:'/images/drizzle.png',\r\n    500:'/images/rain.png',\r\n    501:'/images/rain.png',\r\n    503:'/images/rain.png',\r\n    504:'/images/rain.png',\r\n    511:'/images/rain.png',\r\n    520:'/images/rain.png',\r\n    521:'/images/rain.png',\r\n    522:'/images/rain.png',\r\n    531:'/images/rain.png',\r\n    500:'/images/rain.png',\r\n    600:'/images/snow.png',\r\n    601:'/images/snow.png',\r\n    602:'/images/snow.png',\r\n    611:'/images/snow.png',\r\n    612:'/images/snow.png',\r\n    613:'/images/snow.png',\r\n    615:'/images/snow.png',\r\n    616:'/images/snow.png',\r\n    620:'/images/snow.png',\r\n    621:'/images/snow.png',\r\n    622:'/images/snow.png',\r\n    701:'/images/mist.png',\r\n    711:'/images/mist.png',\r\n    721:'/images/mist.png',\r\n    731:'/images/mist.png',\r\n    741:'/images/mist.png',\r\n    751:'/images/mist.png',\r\n    761:'/images/mist.png',\r\n    762:'/images/mist.png',\r\n    771:'/images/mist.png',\r\n    781:'/images/mist.png',\r\n    800:'/images/clear.png',\r\n    801:'/images/clouds.png',\r\n    802:'/images/clouds.png',\r\n    803:'/images/clouds.png',\r\n    804:'/images/clouds.png',\r\n}\r\nexport default Compare"]},"metadata":{},"sourceType":"module"}