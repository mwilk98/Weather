{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vened\\\\Desktop\\\\Weather\\\\my_weather\\\\client\\\\src\\\\components\\\\currentWeather\\\\CurrentWeather.js\";\nimport React from 'react';\nimport WeatherItem from './WeatherItem';\nimport Form from '../Form/Form';\nimport CalDate from '../Functions/CalDate';\nimport CalTime from '../Functions/CalTime';\nimport CalCelsius from '../Functions/CalCelsius';\nimport CalWindSpeed from '../Functions/CalWindSpeed';\nimport ForecastDailyItem from './ForecastDailyItem';\nimport ForecastHourlyItem from './ForecastHourlyItem';\nimport './Forecast.css';\nimport './CurrentWeather.css';\nimport { Line } from 'react-chartjs-2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst data = {\n  labels: ['0', '5', '10', '15', '20', '25', '30', '35', '40'],\n  datasets: [{\n    label: '# of Votes',\n    data: [12, 19, 3, 5, 2, 3],\n    fill: false,\n    backgroundColor: 'rgb(255, 99, 132)',\n    borderColor: 'rgba(255, 99, 132, 0.2)'\n  }]\n};\nconst options = {\n  scales: {\n    y: {\n      beginAtZero: true\n    }\n  }\n};\nconst API_key = \"157d33f8987d245bc6a1997408e90015\"; //const localTime = new Date().toLocaleString()\n\nclass CurrentWeather extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.nextdailyProperty = () => {\n      const newIndex = this.state.dailyProperty.id + 1;\n      this.setState({\n        dailyProperty: this.state.forecastDailyElements[newIndex]\n      });\n      console.log(newIndex);\n    };\n\n    this.prevdailyProperty = () => {\n      const newIndex = this.state.dailyProperty.id - 1;\n      this.setState({\n        dailyProperty: this.state.forecastDailyElements[newIndex]\n      });\n    };\n\n    this.nextHourlyProperty = () => {\n      const newIndex = this.state.hourlyProperty.id + 1;\n      this.setState({\n        hourlyProperty: this.state.forecastHourlyElements[newIndex]\n      });\n    };\n\n    this.prevHourlyProperty = () => {\n      const newIndex = this.state.hourlyProperty.id - 1;\n      this.setState({\n        hourlyProperty: this.state.forecastHourlyElements[newIndex]\n      });\n    };\n\n    this.defaultWeather = cityName => {\n      this.setState(state => ({\n        city: cityName,\n        error: false\n      }));\n      fetch(`http://api.openweathermap.org/data/2.5/weather?q=${cityName}&lang=pl&APPID=${API_key}`).then(response => {\n        if (response.ok) {\n          return response;\n        }\n\n        throw Error(\"Błąd pobierania danych z API\");\n      }).then(response => response.json()).then(response => {\n        this.getForecastDaily(response.coord.lat, response.coord.lon);\n        this.getForecastHourly(response.coord.lat, response.coord.lon);\n        this.getAirQuality(response.coord.lat, response.coord.lon);\n        console.log(response);\n        this.setState(state => ({\n          city: state.city,\n          country: response.sys.country,\n          date: CalDate(response.dt),\n          time: CalTime(response.dt, response.timezone),\n          weather: response.weather[0].description,\n          temp: CalCelsius(response.main.temp),\n          tempMax: CalCelsius(response.main.temp_max),\n          tempMin: CalCelsius(response.main.temp_min),\n          tempFeel: CalCelsius(response.main.feels_like),\n          pressure: response.main.pressure,\n          wind: CalWindSpeed(response.wind.speed),\n          image: weatherIcons[response.weather[0].id],\n          lat: response.coord.lat,\n          lon: response.coord.lon,\n          clouds: response.clouds.all,\n          humidity: response.main.humidity,\n          sunrise: CalTime(response.sys.sunrise, response.timezone),\n          sunset: CalTime(response.sys.sunset, response.timezone),\n          background: \"/images/cloudyCity.jpg\",\n          error: false\n        }));\n        console.log(\"TEST:\" + response.weather[0].id);\n        console.log(this.state.image);\n      }).catch(err => {\n        console.log(err);\n        this.setState(prevState => {\n          return {\n            error: true,\n            city: prevState.city\n          };\n        });\n      });\n    };\n\n    this.getWeather = e => {\n      e.preventDefault();\n      fetch(`http://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&lang=pl&APPID=${API_key}`).then(response => {\n        if (response.ok) {\n          return response;\n        }\n\n        throw Error(\"Błąd pobierania danych z API\");\n      }).then(response => response.json()).then(response => {\n        console.log(response);\n        this.getForecastDaily(response.coord.lat, response.coord.lon);\n        this.getForecastHourly(response.coord.lat, response.coord.lon);\n        this.getAirQuality(response.coord.lat, response.coord.lon);\n        this.setState(state => ({\n          city: state.value,\n          country: response.sys.country,\n          date: CalDate(response.dt),\n          time: CalTime(response.dt, response.timezone),\n          weather: response.weather[0].description,\n          temp: CalCelsius(response.main.temp),\n          tempMax: CalCelsius(response.main.temp_max),\n          tempMin: CalCelsius(response.main.temp_min),\n          tempFeel: CalCelsius(response.main.feels_like),\n          pressure: response.main.pressure,\n          wind: CalWindSpeed(response.wind.speed),\n          image: weatherIcons[response.weather[0].id],\n          lat: response.coord.lat,\n          lon: response.coord.lon,\n          clouds: response.clouds.all,\n          humidity: response.main.humidity,\n          sunrise: CalTime(response.sys.sunrise, response.timezone),\n          sunset: CalTime(response.sys.sunset, response.timezone),\n          background: \"/images/cloudyCity.jpg\",\n          error: false\n        }));\n      }).catch(err => {\n        console.log(err);\n        this.setState(prevState => {\n          return {\n            error: true,\n            city: prevState.city\n          };\n        });\n      });\n    };\n\n    this.getForecastDaily = (lat, lon) => {\n      console.log(lat);\n      this.setState({\n        forecastDailyElements: []\n      });\n      fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&lang=pl&appid=${API_key}`).then(response => {\n        if (response.ok) {\n          return response;\n        }\n\n        throw Error(\"Błąd pobierania danych z API\");\n      }).then(response => response.json()).then(response => {\n        console.log(response);\n\n        for (var i = 0; i < 8; i++) {\n          this.setState({\n            forecastDailyElements: [...this.state.forecastDailyElements, {\n              'id': i,\n              'date': CalDate(response.daily[i].dt),\n              'weather': response.daily[i].weather[0].description,\n              'tempMax': CalCelsius(response.daily[i].temp.max),\n              'tempMin': CalCelsius(response.daily[i].temp.min),\n              'pressure': response.daily[i].pressure,\n              'wind': CalWindSpeed(response.daily[i].wind_speed),\n              'image': weatherIcons[response.daily[i].weather[0].id],\n              'clouds': response.daily[i].clouds,\n              'humidity': response.daily[i].humidity,\n              'sunrise': CalTime(response.daily[i].sunrise, response.timezone_offset),\n              'sunset': CalTime(response.daily[i].sunset, response.timezone_offset)\n            }],\n            dailyProperty: this.state.forecastDailyElements[1]\n          });\n        }\n      });\n    };\n\n    this.getForecastHourly = (lat, lon) => {\n      this.setState({\n        forecastHourlyElements: []\n      });\n      fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&lang=pl&appid=${API_key}`).then(response => {\n        if (response.ok) {\n          return response;\n        }\n\n        throw Error(\"Błąd pobierania danych z API\");\n      }).then(response => response.json()).then(response => {\n        console.log(response);\n\n        for (var i = 0; i < 48; i++) {\n          this.setState({\n            forecastHourlyElements: [...this.state.forecastHourlyElements, {\n              'id': i,\n              'date': CalDate(response.hourly[i].dt),\n              'time': CalTime(response.hourly[i].dt, response.timezone_offset),\n              'weather': response.hourly[i].weather[0].description,\n              'temp': CalCelsius(response.hourly[i].temp),\n              'tempFeel': CalCelsius(response.hourly[i].feels_like),\n              'pressure': response.hourly[i].pressure,\n              'humidity': response.hourly[i].humidity,\n              'wind': CalWindSpeed(response.hourly[i].wind_speed),\n              'image': weatherIcons[response.hourly[i].weather[0].id],\n              'clouds': response.hourly[i].clouds\n            }],\n            hourlyProperty: this.state.forecastHourlyElements[1],\n            data: [...this.state.data, {}]\n          });\n        }\n      });\n    };\n\n    this.inputHandler = e => {\n      this.setState({\n        value: e.target.value\n      });\n    };\n\n    this.setForecast = () => {\n      if (this.state.forecast) {\n        this.setState({\n          forecast: false\n        });\n      } else {\n        this.setState({\n          forecast: true\n        });\n      }\n    };\n\n    this.state = {\n      value: \"\",\n      city: \"\",\n      country: \"\",\n      aqi: undefined,\n      image: undefined,\n      background: undefined,\n      weather: undefined,\n      temp: undefined,\n      tempMax: undefined,\n      tempMin: undefined,\n      tempFeel: undefined,\n      pressurre: undefined,\n      wind: undefined,\n      lat: undefined,\n      lon: undefined,\n      clouds: undefined,\n      humidity: undefined,\n      sunrise: undefined,\n      sunset: undefined,\n      forecastDailyElements: [],\n      forecastHourlyElements: [],\n      dailyProperty: undefined,\n      hourlyProperty: undefined,\n      forecast: true,\n      error: false,\n      data: {\n        labels: ['1', '2', '3', '4', '5', '6'],\n        datasets: [{\n          label: '# of Votes',\n          data: [12, 19, 3, 5, 2, 3],\n          fill: false,\n          backgroundColor: 'rgb(255, 99, 132)',\n          borderColor: 'rgba(255, 99, 132, 0.2)'\n        }]\n      },\n      options: {\n        scales: {\n          y: {\n            beginAtZero: true\n          }\n        }\n      }\n    };\n  }\n\n  getAirQuality(lat, lon) {\n    fetch(`http://api.openweathermap.org/data/2.5/air_pollution?lat=${lat}&lon=${lon}&appid=${API_key}`).then(response2 => {\n      if (response2.ok) {\n        return response2;\n      }\n\n      throw Error(\"Błąd pobierania danych z API\");\n    }).then(response2 => response2.json()).then(response2 => {\n      console.log(response2);\n      this.setState(state => ({\n        aqi: airConditions[response2.list[0].main.aqi],\n        color: response2.list[0].main.aqi,\n        error: false\n      }));\n    }).catch(err => {\n      console.log(err);\n      this.setState(prevState => {\n        return {\n          error: true,\n          city: prevState.city\n        };\n      });\n    });\n  }\n\n  componentDidMount() {\n    this.defaultWeather(\"Warszawa\");\n  }\n\n  render() {\n    const {\n      forecastDailyElements,\n      forecastHourlyElements,\n      dailyProperty,\n      hourlyProperty\n    } = this.state;\n\n    if (this.state.forecast) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main\",\n        style: {\n          backgroundImage: `url(\"/images/bg.jpg\")`\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"city-form\",\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \"Wyszukaj miasto dla kt\\xF3rego chcesz sprawdzi\\u0107 obecne warunki pogodowe oraz prognozy pogody\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 353,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Form, {\n            value: this.state.value,\n            handler: this.inputHandler,\n            submit: this.getWeather\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 354,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 352,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"current-main\",\n          children: this.state.city ? /*#__PURE__*/_jsxDEV(WeatherItem, {\n            weather: this.state\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 362,\n            columnNumber: 29\n          }, this) : null\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 360,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"forecast-main\",\n          children: dailyProperty ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"forecast-cards\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"left\",\n              onClick: () => this.nextdailyProperty(),\n              disabled: dailyProperty.id === forecastDailyElements.length - 3,\n              children: \"Next\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 368,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"swap-button\",\n              onClick: () => this.setForecast(),\n              children: \"GODZINOWA\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 373,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"right\",\n              onClick: () => this.prevdailyProperty(),\n              disabled: dailyProperty.id === 1,\n              children: \"Prev\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 377,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"main-cards\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"cards-slider\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"cards-slider-wrapper\",\n                  style: {\n                    'transform': `translateX(-${dailyProperty.id * (100 / forecastDailyElements.length)}%)`\n                  },\n                  children: forecastDailyElements.map(fde => /*#__PURE__*/_jsxDEV(ForecastDailyItem, {\n                    element: fde\n                  }, fde.id, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 387,\n                    columnNumber: 75\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 384,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 383,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 382,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 367,\n            columnNumber: 25\n          }, this) : null\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 365,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 21\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main\",\n        style: {\n          backgroundImage: `url(\"/images/bg.jpg\")`\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"city-form\",\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \"Wyszukaj miasto dla kt\\xF3rego chcesz sprawdzi\\u0107 obecne warunki pogodowe oraz prognozy pogody\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 402,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form, {\n            value: this.state.value,\n            handler: this.inputHandler,\n            submit: this.getWeather\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 403,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 401,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"current-main\",\n          children: this.state.city ? /*#__PURE__*/_jsxDEV(WeatherItem, {\n            weather: this.state\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 411,\n            columnNumber: 25\n          }, this) : null\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 409,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"forecast-main\",\n          children: hourlyProperty ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"forecast-cards\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"left\",\n              onClick: () => this.nextHourlyProperty(),\n              disabled: hourlyProperty.id === forecastHourlyElements.length - 3,\n              children: \"Next\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 417,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"swap-button\",\n              onClick: () => this.setForecast(),\n              children: \"DZIENNA\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 422,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"right\",\n              onClick: () => this.prevHourlyProperty(),\n              disabled: hourlyProperty.id === 1,\n              children: \"Prev\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 426,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"main-cards\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"cards-slider\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"cards-slider-wrapper\",\n                  style: {\n                    'transform': `translateX(-${hourlyProperty.id * (100 / forecastHourlyElements.length)}%)`\n                  },\n                  children: forecastHourlyElements.map(fde => /*#__PURE__*/_jsxDEV(ForecastHourlyItem, {\n                    element: fde\n                  }, fde.id, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 436,\n                    columnNumber: 72\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 433,\n                  columnNumber: 33\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 432,\n                columnNumber: 29\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 431,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 416,\n            columnNumber: 21\n          }, this) : null\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 414,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 398,\n        columnNumber: 17\n      }, this);\n    }\n  }\n\n}\n\nconst weatherIcons = {\n  200: '/images/200.png',\n  201: '/images/201.png',\n  202: '/images/202.png',\n  210: '/images/210.png',\n  211: '/images/211.png',\n  212: '/images/212.png',\n  221: '/images/212.png',\n  230: '/images/230D.png',\n  231: '/images/231.png',\n  232: '/images/232.png',\n  300: '/images/300D.png',\n  301: '/images/301.png',\n  302: '/images/302.png',\n  310: '/images/310D.png',\n  311: '/images/311.png',\n  312: '/images/312.png',\n  313: '/images/313_1.png',\n  314: '/images/314.png',\n  321: '/images/321.png',\n  500: '/images/500D.png',\n  501: '/images/501.png',\n  502: '/images/502.png',\n  503: '/images/503.png',\n  504: '/images/504.png',\n  511: '/images/511.png',\n  520: '/images/520D.png',\n  521: '/images/521_2.png',\n  522: '/images/522_1.png',\n  531: '/images/522_1.png',\n  600: '/images/600D.png',\n  601: '/images/601.png',\n  602: '/images/602.png',\n  611: '/images/611.png',\n  612: '/images/612D.png',\n  613: '/images/613.png',\n  615: '/images/615D.png',\n  616: '/images/616.png',\n  620: '/images/620D.png',\n  621: '/images/621.png',\n  622: '/images/622.png',\n  701: '/images/701_2.png',\n  711: '/images/701_2.png',\n  721: '/images/701_2.png',\n  731: '/images/701_2.png',\n  741: '/images/701_2.png',\n  751: '/images/701_2.png',\n  761: '/images/701_2.png',\n  762: '/images/701_2.png',\n  771: '/images/701_2.png',\n  781: '/images/701_2.png',\n  800: '/images/800D.png',\n  801: '/images/801D.png',\n  802: '/images/802D.png',\n  803: '/images/803D.png',\n  804: '/images/804.png'\n};\nconst airConditions = {\n  1: 'Bardzo dobra',\n  2: 'Dobra',\n  3: 'Średnia',\n  4: 'Zła',\n  5: 'Bardzo zła'\n};\nexport default CurrentWeather;","map":{"version":3,"sources":["C:/Users/vened/Desktop/Weather/my_weather/client/src/components/currentWeather/CurrentWeather.js"],"names":["React","WeatherItem","Form","CalDate","CalTime","CalCelsius","CalWindSpeed","ForecastDailyItem","ForecastHourlyItem","Line","data","labels","datasets","label","fill","backgroundColor","borderColor","options","scales","y","beginAtZero","API_key","CurrentWeather","Component","constructor","props","nextdailyProperty","newIndex","state","dailyProperty","id","setState","forecastDailyElements","console","log","prevdailyProperty","nextHourlyProperty","hourlyProperty","forecastHourlyElements","prevHourlyProperty","defaultWeather","cityName","city","error","fetch","then","response","ok","Error","json","getForecastDaily","coord","lat","lon","getForecastHourly","getAirQuality","country","sys","date","dt","time","timezone","weather","description","temp","main","tempMax","temp_max","tempMin","temp_min","tempFeel","feels_like","pressure","wind","speed","image","weatherIcons","clouds","all","humidity","sunrise","sunset","background","catch","err","prevState","getWeather","e","preventDefault","value","i","daily","max","min","wind_speed","timezone_offset","hourly","inputHandler","target","setForecast","forecast","aqi","undefined","pressurre","response2","airConditions","list","color","componentDidMount","render","backgroundImage","length","map","fde"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport WeatherItem from './WeatherItem';\r\nimport Form from '../Form/Form'\r\nimport CalDate from '../Functions/CalDate';\r\nimport CalTime from '../Functions/CalTime';\r\nimport CalCelsius from '../Functions/CalCelsius';\r\nimport CalWindSpeed from '../Functions/CalWindSpeed';\r\nimport ForecastDailyItem from './ForecastDailyItem';\r\nimport ForecastHourlyItem from './ForecastHourlyItem';\r\nimport './Forecast.css';\r\nimport './CurrentWeather.css';\r\nimport { Line } from 'react-chartjs-2';\r\n\r\nconst data = {\r\n    labels: ['0', '5', '10', '15', '20', '25', '30', '35', '40'],\r\n    datasets: [\r\n      {\r\n        label: '# of Votes',\r\n        data: [12, 19, 3, 5, 2, 3],\r\n        fill: false,\r\n        backgroundColor: 'rgb(255, 99, 132)',\r\n        borderColor: 'rgba(255, 99, 132, 0.2)',\r\n      },\r\n    ],\r\n  };\r\n  const options = {\r\n    scales: {\r\n      y: {\r\n        beginAtZero: true,\r\n      }\r\n    }\r\n  };\r\n\r\nconst API_key=\"157d33f8987d245bc6a1997408e90015\"\r\n//const localTime = new Date().toLocaleString()\r\n\r\nclass CurrentWeather extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state={\r\n            value:\"\",\r\n            city:\"\",\r\n            country:\"\",\r\n            aqi:undefined,\r\n            image:undefined,\r\n            background:undefined,\r\n            weather:undefined,\r\n            temp:undefined,\r\n            tempMax:undefined,\r\n            tempMin:undefined,\r\n            tempFeel:undefined,\r\n            pressurre:undefined,\r\n            wind:undefined,\r\n            lat:undefined,\r\n            lon:undefined,\r\n            clouds:undefined, \r\n            humidity:undefined,\r\n            sunrise:undefined,\r\n            sunset:undefined,\r\n            forecastDailyElements:[\r\n            ],\r\n            forecastHourlyElements:[\r\n            ],\r\n            dailyProperty: undefined,\r\n            hourlyProperty: undefined,\r\n            forecast:true,\r\n            error:false,\r\n            data :{\r\n                labels: ['1', '2', '3', '4', '5', '6'],\r\n                datasets: [\r\n                  {\r\n                    label: '# of Votes',\r\n                    data: [12, 19, 3, 5, 2, 3],\r\n                    fill: false,\r\n                    backgroundColor: 'rgb(255, 99, 132)',\r\n                    borderColor: 'rgba(255, 99, 132, 0.2)',\r\n                  },\r\n                ],\r\n            },\r\n            options : {\r\n                scales: {\r\n                  y: {\r\n                    beginAtZero: true\r\n                  }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    nextdailyProperty = () => {\r\n        const newIndex = this.state.dailyProperty.id +1\r\n        this.setState({\r\n            dailyProperty: this.state.forecastDailyElements[newIndex]\r\n        })\r\n        console.log(newIndex)\r\n    }\r\n\r\n    prevdailyProperty = () => {\r\n        const newIndex = this.state.dailyProperty.id -1\r\n        this.setState({\r\n            dailyProperty: this.state.forecastDailyElements[newIndex]\r\n        })\r\n    }\r\n\r\n    nextHourlyProperty = () => {\r\n        const newIndex = this.state.hourlyProperty.id +1\r\n        this.setState({\r\n            hourlyProperty: this.state.forecastHourlyElements[newIndex]\r\n        })\r\n    }\r\n    \r\n    prevHourlyProperty = () => {\r\n        const newIndex = this.state.hourlyProperty.id -1\r\n        this.setState({\r\n            hourlyProperty: this.state.forecastHourlyElements[newIndex]\r\n        })\r\n    }\r\n    defaultWeather = (cityName) => {\r\n        this.setState(state =>({\r\n            city:cityName,\r\n            error:false\r\n          }))\r\n          fetch(`http://api.openweathermap.org/data/2.5/weather?q=${cityName}&lang=pl&APPID=${API_key}`)\r\n          .then(response => {\r\n              if(response.ok){\r\n                  return response\r\n              }\r\n              throw Error(\"Błąd pobierania danych z API\")\r\n          })\r\n          .then(response => response.json())\r\n          .then(response => {\r\n            this.getForecastDaily(response.coord.lat,response.coord.lon)\r\n            this.getForecastHourly(response.coord.lat,response.coord.lon)\r\n            this.getAirQuality(response.coord.lat,response.coord.lon)\r\n              console.log(response)\r\n              this.setState(state =>({\r\n                city:state.city,\r\n                country:response.sys.country,\r\n                date:CalDate(response.dt),\r\n                time:CalTime(response.dt,response.timezone),\r\n                weather:response.weather[0].description,\r\n                temp:CalCelsius(response.main.temp),\r\n                tempMax:CalCelsius(response.main.temp_max),\r\n                tempMin:CalCelsius(response.main.temp_min),\r\n                tempFeel:CalCelsius(response.main.feels_like),\r\n                pressure:response.main.pressure,\r\n                wind:CalWindSpeed(response.wind.speed),\r\n                image:weatherIcons[response.weather[0].id],\r\n                lat:response.coord.lat,\r\n                lon:response.coord.lon,\r\n                clouds:response.clouds.all, \r\n                humidity:response.main.humidity,\r\n                sunrise:CalTime(response.sys.sunrise,response.timezone),\r\n                sunset:CalTime(response.sys.sunset,response.timezone),\r\n                background:\"/images/cloudyCity.jpg\",\r\n                error:false\r\n              }))\r\n                      \r\n            console.log(\"TEST:\"+response.weather[0].id)\r\n            console.log(this.state.image)\r\n          })\r\n          .catch(err =>{\r\n            console.log(err)\r\n            this.setState(prevState =>{\r\n                return{\r\n                error:true,\r\n                city:prevState.city\r\n            }})\r\n        })\r\n    }\r\n    getWeather = (e) =>{\r\n        \r\n        e.preventDefault()\r\n          \r\n          fetch(`http://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&lang=pl&APPID=${API_key}`)\r\n          .then(response => {\r\n              if(response.ok){\r\n                  return response\r\n              }\r\n              throw Error(\"Błąd pobierania danych z API\")\r\n          })\r\n          .then(response => response.json())\r\n          .then(response => {\r\n              console.log(response)\r\n              this.getForecastDaily(response.coord.lat,response.coord.lon)\r\n              this.getForecastHourly(response.coord.lat,response.coord.lon)\r\n              this.getAirQuality(response.coord.lat,response.coord.lon)\r\n              this.setState(state =>({\r\n                city:state.value,\r\n                country:response.sys.country,\r\n                date:CalDate(response.dt),\r\n                time:CalTime(response.dt,response.timezone),\r\n                weather:response.weather[0].description,\r\n                temp:CalCelsius(response.main.temp),\r\n                tempMax:CalCelsius(response.main.temp_max),\r\n                tempMin:CalCelsius(response.main.temp_min),\r\n                tempFeel:CalCelsius(response.main.feels_like),\r\n                pressure:response.main.pressure,\r\n                wind:CalWindSpeed(response.wind.speed),\r\n                image:weatherIcons[response.weather[0].id],\r\n                lat:response.coord.lat,\r\n                lon:response.coord.lon,\r\n                clouds:response.clouds.all, \r\n                humidity:response.main.humidity,\r\n                sunrise:CalTime(response.sys.sunrise,response.timezone),\r\n                sunset:CalTime(response.sys.sunset,response.timezone),\r\n                background:\"/images/cloudyCity.jpg\",\r\n                error:false\r\n              }))\r\n          })\r\n          .catch(err =>{\r\n            console.log(err)\r\n            this.setState(prevState =>{\r\n                return{\r\n                error:true,\r\n                city:prevState.city\r\n            }})\r\n        })\r\n        \r\n    }\r\n    getAirQuality(lat,lon){\r\n        fetch(`http://api.openweathermap.org/data/2.5/air_pollution?lat=${lat}&lon=${lon}&appid=${API_key}`)\r\n          .then(response2 => {\r\n              if(response2.ok){\r\n                  return response2\r\n              }\r\n              throw Error(\"Błąd pobierania danych z API\")\r\n          })\r\n          .then(response2 => response2.json())\r\n          .then(response2 => {\r\n              console.log(response2)\r\n              this.setState(state =>({\r\n                aqi:airConditions[response2.list[0].main.aqi],\r\n                color:response2.list[0].main.aqi,\r\n                error:false\r\n              }))\r\n          })\r\n          .catch(err =>{\r\n            console.log(err)\r\n            this.setState(prevState =>{\r\n                return{\r\n                error:true,\r\n                city:prevState.city\r\n            }})\r\n        })\r\n    }\r\n    getForecastDaily = (lat,lon)=>{\r\n\r\n        console.log(lat)\r\n        this.setState({\r\n            forecastDailyElements:[\r\n            ]\r\n        })\r\n        \r\n        fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&lang=pl&appid=${API_key}`)\r\n          .then(response => {\r\n              if(response.ok){\r\n                  return response\r\n              }\r\n              throw Error(\"Błąd pobierania danych z API\")\r\n          })\r\n          .then(response => response.json())\r\n          .then(response => {\r\n              console.log(response)\r\n              for (var i = 0; i < 8; i++) {\r\n                this.setState({\r\n                    forecastDailyElements:[...this.state.forecastDailyElements,{\r\n                        'id':i,\r\n                        'date':CalDate(response.daily[i].dt),\r\n                        'weather':response.daily[i].weather[0].description,\r\n                        'tempMax':CalCelsius(response.daily[i].temp.max),\r\n                        'tempMin':CalCelsius(response.daily[i].temp.min),\r\n                        'pressure':response.daily[i].pressure,\r\n                        'wind':CalWindSpeed(response.daily[i].wind_speed),\r\n                        'image':weatherIcons[response.daily[i].weather[0].id],\r\n                        'clouds':response.daily[i].clouds,\r\n                        'humidity':response.daily[i].humidity,\r\n                        'sunrise':CalTime(response.daily[i].sunrise,response.timezone_offset) ,\r\n                        'sunset':CalTime(response.daily[i].sunset,response.timezone_offset)\r\n                    }],\r\n                    dailyProperty:this.state.forecastDailyElements[1]\r\n                })\r\n            }  \r\n          })\r\n    }\r\n    getForecastHourly = (lat,lon)=>{\r\n\r\n        this.setState({\r\n            forecastHourlyElements:[\r\n            ]\r\n        })\r\n        \r\n        fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&lang=pl&appid=${API_key}`)\r\n          .then(response => {\r\n              if(response.ok){\r\n                  return response\r\n              }\r\n              throw Error(\"Błąd pobierania danych z API\")\r\n          })\r\n          .then(response => response.json())\r\n          .then(response => {\r\n              console.log(response)\r\n              for (var i = 0; i < 48; i++) {\r\n                this.setState({\r\n                    forecastHourlyElements:[...this.state.forecastHourlyElements,{\r\n                        'id':i,\r\n                        'date':CalDate(response.hourly[i].dt),\r\n                        'time':CalTime(response.hourly[i].dt,response.timezone_offset),\r\n                        'weather':response.hourly[i].weather[0].description,\r\n                        'temp':CalCelsius(response.hourly[i].temp),\r\n                        'tempFeel':CalCelsius(response.hourly[i].feels_like),\r\n                        'pressure':response.hourly[i].pressure,\r\n                        'humidity':response.hourly[i].humidity,\r\n                        'wind':CalWindSpeed(response.hourly[i].wind_speed),\r\n                        'image':weatherIcons[response.hourly[i].weather[0].id],\r\n                        'clouds':response.hourly[i].clouds,\r\n                    }],\r\n                    hourlyProperty:this.state.forecastHourlyElements[1],\r\n                    data:[...this.state.data,{\r\n                        \r\n                    }]  \r\n                })\r\n            }\r\n          })\r\n    }\r\n    inputHandler=(e)=>{\r\n        this.setState({\r\n            value:e.target.value\r\n        })\r\n    }\r\n    componentDidMount(){\r\n        this.defaultWeather(\"Warszawa\")\r\n     }\r\n    setForecast=()=>{\r\n        if(this.state.forecast){\r\n            this.setState({\r\n                forecast:false\r\n            })\r\n        }else{\r\n            this.setState({\r\n                forecast:true\r\n            })\r\n        }\r\n    }\r\n    render(){\r\n        const {forecastDailyElements, forecastHourlyElements, dailyProperty, hourlyProperty}=this.state\r\n        if(this.state.forecast){\r\n            return(\r\n                    <div className=\"main\" style={{ \r\n                        backgroundImage: `url(\"/images/bg.jpg\")` \r\n                    }}>\r\n                        <div className=\"city-form\">\r\n                            <h1>Wyszukaj miasto dla którego chcesz sprawdzić obecne warunki pogodowe oraz prognozy pogody</h1>\r\n                            <Form \r\n                                value={this.state.value}  \r\n                                handler={this.inputHandler}\r\n                                submit={this.getWeather}\r\n                            /> \r\n                        </div> \r\n                        <div className=\"current-main\">\r\n                            {this.state.city ?(\r\n                            <WeatherItem weather={this.state}/>   \r\n                            ):null}\r\n                        </div>\r\n                    <div className=\"forecast-main\">\r\n                        {dailyProperty ?( \r\n                        <div className=\"forecast-cards\">\r\n                            <button className=\"left\" \r\n                                onClick={() => this.nextdailyProperty()} \r\n                                disabled={dailyProperty.id === forecastDailyElements.length-3}\r\n                            >Next\r\n                            </button>\r\n                            <button className=\"swap-button\"\r\n                                onClick={() => this.setForecast()} \r\n                            >GODZINOWA\r\n                            </button>\r\n                            <button className=\"right\"\r\n                                    onClick={() => this.prevdailyProperty()} \r\n                                    disabled={dailyProperty.id === 1}\r\n                            >Prev\r\n                            </button>\r\n                            <div className=\"main-cards\">  \r\n                                <div className=\"cards-slider\">         \r\n                                    <div className=\"cards-slider-wrapper\" style={{\r\n                                                                            'transform':`translateX(-${dailyProperty.id*(100/forecastDailyElements.length)}%)`\r\n                                    }}>\r\n                                        {forecastDailyElements.map(fde => <ForecastDailyItem key={fde.id} element={fde} />)}\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    ):null}\r\n                    </div>\r\n                    </div>\r\n            )\r\n        }else{\r\n            return(\r\n                <div className=\"main\" style={{ \r\n                    backgroundImage: `url(\"/images/bg.jpg\")` \r\n                }}>\r\n                    <div className=\"city-form\">\r\n                        <h1>Wyszukaj miasto dla którego chcesz sprawdzić obecne warunki pogodowe oraz prognozy pogody</h1>\r\n                        <Form \r\n                            value={this.state.value}  \r\n                            handler={this.inputHandler}\r\n                            submit={this.getWeather}\r\n                        /> \r\n                    </div> \r\n                    <div className=\"current-main\">\r\n                        {this.state.city ?(\r\n                        <WeatherItem weather={this.state}/>   \r\n                        ):null}\r\n                    </div>\r\n                <div className=\"forecast-main\">\r\n                    {hourlyProperty ?( \r\n                    <div className=\"forecast-cards\">\r\n                        <button className=\"left\" \r\n                            onClick={() => this.nextHourlyProperty()} \r\n                            disabled={hourlyProperty.id === forecastHourlyElements.length-3}\r\n                        >Next\r\n                        </button>\r\n                        <button className=\"swap-button\"\r\n                            onClick={() => this.setForecast()} \r\n                        >DZIENNA\r\n                        </button>\r\n                        <button className=\"right\"\r\n                                onClick={() => this.prevHourlyProperty()} \r\n                                disabled={hourlyProperty.id === 1}\r\n                        >Prev\r\n                        </button>\r\n                        <div className=\"main-cards\">  \r\n                            <div className=\"cards-slider\">         \r\n                                <div className=\"cards-slider-wrapper\" style={{\r\n                                                                        'transform':`translateX(-${hourlyProperty.id*(100/forecastHourlyElements.length)}%)`\r\n                                }}>\r\n                                    {forecastHourlyElements.map(fde => <ForecastHourlyItem key={fde.id} element={fde} />)}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                ):null}\r\n                </div>\r\n                </div>\r\n            )\r\n        }\r\n        \r\n    }\r\n}\r\nconst weatherIcons = {\r\n    200:'/images/200.png',\r\n    201:'/images/201.png',\r\n    202:'/images/202.png',\r\n    210:'/images/210.png',\r\n    211:'/images/211.png',\r\n    212:'/images/212.png',\r\n    221:'/images/212.png',\r\n    230:'/images/230D.png',\r\n    231:'/images/231.png',\r\n    232:'/images/232.png',\r\n    300:'/images/300D.png',\r\n    301:'/images/301.png',\r\n    302:'/images/302.png',\r\n    310:'/images/310D.png',\r\n    311:'/images/311.png',\r\n    312:'/images/312.png',\r\n    313:'/images/313_1.png',\r\n    314:'/images/314.png',\r\n    321:'/images/321.png',\r\n    500:'/images/500D.png',\r\n    501:'/images/501.png',\r\n    502:'/images/502.png',\r\n    503:'/images/503.png',\r\n    504:'/images/504.png',\r\n    511:'/images/511.png',\r\n    520:'/images/520D.png',\r\n    521:'/images/521_2.png',\r\n    522:'/images/522_1.png',\r\n    531:'/images/522_1.png',\r\n    600:'/images/600D.png',\r\n    601:'/images/601.png',\r\n    602:'/images/602.png',\r\n    611:'/images/611.png',\r\n    612:'/images/612D.png',\r\n    613:'/images/613.png',\r\n    615:'/images/615D.png',\r\n    616:'/images/616.png',\r\n    620:'/images/620D.png',\r\n    621:'/images/621.png',\r\n    622:'/images/622.png',\r\n    701:'/images/701_2.png',\r\n    711:'/images/701_2.png',\r\n    721:'/images/701_2.png',\r\n    731:'/images/701_2.png',\r\n    741:'/images/701_2.png',\r\n    751:'/images/701_2.png',\r\n    761:'/images/701_2.png',\r\n    762:'/images/701_2.png',\r\n    771:'/images/701_2.png',\r\n    781:'/images/701_2.png',\r\n    800:'/images/800D.png',\r\n    801:'/images/801D.png',\r\n    802:'/images/802D.png',\r\n    803:'/images/803D.png',\r\n    804:'/images/804.png',\r\n}\r\nconst airConditions = {\r\n    1:'Bardzo dobra',\r\n    2:'Dobra',\r\n    3:'Średnia',\r\n    4:'Zła',\r\n    5:'Bardzo zła',\r\n}\r\nexport default CurrentWeather"]},"metadata":{},"sourceType":"module"}