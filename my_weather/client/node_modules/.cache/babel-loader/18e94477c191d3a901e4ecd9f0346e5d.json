{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vened\\\\Desktop\\\\Pogoda\\\\my_weather\\\\client\\\\src\\\\components\\\\currentWeather\\\\CurrentWeather.js\";\nimport React from 'react';\nimport WeatherItem from './WeatherItem';\nimport Form from '../Form/Form';\nimport CalDate from '../Functions/CalDate';\nimport CalTime from '../Functions/CalTime';\nimport CalCelsius from '../Functions/CalCelsius';\nimport CalWindSpeed from '../Functions/CalWindSpeed';\nimport ForecastDailyItem from './ForecastDailyItem';\nimport ForecastHourlyItem from './ForecastHourlyItem';\nimport './Forecast.css';\nimport './CurrentWeather.css';\nimport Switch from \"react-switch\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_key = \"157d33f8987d245bc6a1997408e90015\"; //const localTime = new Date().toLocaleString()\n\nclass CurrentWeather extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.nextdailyProperty = () => {\n      const newIndex = this.state.dailyProperty.id + 1;\n      this.setState({\n        dailyProperty: this.state.forecastDailyElements[newIndex]\n      });\n    };\n\n    this.prevdailyProperty = () => {\n      const newIndex = this.state.dailyProperty.id - 1;\n      this.setState({\n        dailyProperty: this.state.forecastDailyElements[newIndex]\n      });\n    };\n\n    this.nextHourlyProperty = () => {\n      const newIndex = this.state.hourlyProperty.id + 1;\n      this.setState({\n        hourlyProperty: this.state.forecastHourlyElements[newIndex]\n      });\n    };\n\n    this.prevHourlyProperty = () => {\n      const newIndex = this.state.hourlyProperty.id - 1;\n      this.setState({\n        hourlyProperty: this.state.forecastHourlyElements[newIndex]\n      });\n    };\n\n    this.defaultWeather = () => {\n      this.setState(state => ({\n        city: \"Warszawa\",\n        error: false\n      }));\n      fetch(`http://api.openweathermap.org/data/2.5/weather?q=warszawa&lang=pl&APPID=${API_key}`).then(response => {\n        if (response.ok) {\n          return response;\n        }\n\n        throw Error(\"Błąd pobierania danych z API\");\n      }).then(response => response.json()).then(response => {\n        const localTime = new Date().toLocaleString();\n        console.log(response);\n        this.getForecastDaily(response.coord.lat, response.coord.lon);\n        this.getForecastHourly(response.coord.lat, response.coord.lon);\n        this.setState(state => ({\n          city: state.city,\n          country: response.sys.country,\n          date: CalDate(response.dt),\n          time: CalTime(response.dt, response.timezone),\n          weather: response.weather[0].description,\n          temp: CalCelsius(response.main.temp),\n          tempMax: CalCelsius(response.main.temp_max),\n          tempMin: CalCelsius(response.main.temp_min),\n          tempFeel: CalCelsius(response.main.feels_like),\n          pressure: response.main.pressure,\n          wind: CalWindSpeed(response.wind.speed),\n          image: weatherIcons[response.weather[0].id],\n          lat: response.coord.lat,\n          lon: response.coord.lon,\n          clouds: response.clouds.all,\n          humidity: response.main.humidity,\n          sunrise: CalTime(response.sys.sunrise, response.timezone),\n          sunset: CalTime(response.sys.sunset, response.timezone),\n          background: \"/images/cloudyCity.jpg\",\n          error: false\n        }));\n      }).catch(err => {\n        console.log(err);\n        this.setState(prevState => {\n          return {\n            error: true,\n            city: prevState.city\n          };\n        });\n      });\n    };\n\n    this.getWeather = e => {\n      e.preventDefault();\n      fetch(`http://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&lang=pl&APPID=${API_key}`).then(response => {\n        if (response.ok) {\n          return response;\n        }\n\n        throw Error(\"Błąd pobierania danych z API\");\n      }).then(response => response.json()).then(response => {\n        const localTime = new Date().toLocaleString();\n        console.log(response);\n        this.getForecastDaily(response.coord.lat, response.coord.lon);\n        this.getForecastHourly(response.coord.lat, response.coord.lon);\n        this.setState(state => ({\n          city: state.value,\n          country: response.sys.country,\n          date: CalDate(response.dt),\n          time: CalTime(response.dt, response.timezone),\n          weather: response.weather[0].description,\n          temp: CalCelsius(response.main.temp),\n          tempMax: CalCelsius(response.main.temp_max),\n          tempMin: CalCelsius(response.main.temp_min),\n          tempFeel: CalCelsius(response.main.feels_like),\n          pressure: response.main.pressure,\n          wind: CalWindSpeed(response.wind.speed),\n          image: weatherIcons[response.weather[0].id],\n          lat: response.coord.lat,\n          lon: response.coord.lon,\n          clouds: response.clouds.all,\n          humidity: response.main.humidity,\n          sunrise: CalTime(response.sys.sunrise, response.timezone),\n          sunset: CalTime(response.sys.sunset, response.timezone),\n          background: \"/images/cloudyCity.jpg\",\n          error: false\n        }));\n      }).catch(err => {\n        console.log(err);\n        this.setState(prevState => {\n          return {\n            error: true,\n            city: prevState.city\n          };\n        });\n      });\n    };\n\n    this.getForecastDaily = (lat, lon) => {\n      console.log(lat);\n      this.state.forecastDailyElements.length = 0;\n      fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&lang=pl&appid=${API_key}`).then(response => {\n        if (response.ok) {\n          return response;\n        }\n\n        throw Error(\"Błąd pobierania danych z API\");\n      }).then(response => response.json()).then(response => {\n        console.log(response);\n\n        for (var i = 0; i < 8; i++) {\n          this.setState({\n            forecastDailyElements: [...this.state.forecastDailyElements, {\n              'id': i,\n              'date': CalDate(response.daily[i].dt),\n              'weather': response.daily[i].weather[0].description,\n              'temp': CalCelsius(response.daily[i].temp.day),\n              'pressure': response.daily[i].pressure,\n              'wind': CalWindSpeed(response.daily[i].wind_speed),\n              'image': weatherIcons[response.daily[i].weather[0].id],\n              'background': \"/images/download.gif\"\n            }],\n            dailyProperty: this.state.forecastDailyElements[0]\n          });\n        }\n      });\n    };\n\n    this.getForecastHourly = (lat, lon) => {\n      this.state.forecastHourlyElements.length = 0;\n      fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&lang=pl&appid=${API_key}`).then(response => {\n        if (response.ok) {\n          return response;\n        }\n\n        throw Error(\"Błąd pobierania danych z API\");\n      }).then(response => response.json()).then(response => {\n        const localTime = new Date().toLocaleString();\n        console.log(response);\n\n        for (var i = 0; i < 48; i++) {\n          this.setState({\n            forecastHourlyElements: [...this.state.forecastHourlyElements, {\n              'id': i,\n              'date': CalDate(response.hourly[i].dt),\n              'time': CalTime(response.hourly[i].dt, response.timezone_offset),\n              'weather': response.hourly[i].weather[0].description,\n              'temp': CalCelsius(response.hourly[i].temp),\n              'pressure': response.hourly[i].pressure,\n              'wind': CalWindSpeed(response.hourly[i].wind_speed),\n              'image': weatherIcons[response.hourly[i].weather[0].id]\n            }],\n            hourlyProperty: this.state.forecastHourlyElements[0]\n          });\n        }\n      });\n    };\n\n    this.inputHandler = e => {\n      this.setState({\n        value: e.target.value\n      });\n    };\n\n    this.state = {\n      checked: false,\n      value: \"\",\n      city: \"\",\n      country: \"\",\n      image: undefined,\n      background: undefined,\n      weather: undefined,\n      temp: undefined,\n      tempMax: undefined,\n      tempMin: undefined,\n      tempFeel: undefined,\n      pressurre: undefined,\n      wind: undefined,\n      lat: undefined,\n      lon: undefined,\n      clouds: undefined,\n      humidity: undefined,\n      sunrise: undefined,\n      sunset: undefined,\n      background: undefined,\n      forecastDailyElements: [],\n      forecastHourlyElements: [],\n      dailyProperty: undefined,\n      hourlyProperty: undefined,\n      error: false\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(checked) {\n    this.setState({\n      checked\n    });\n  }\n\n  componentDidMount() {\n    this.defaultWeather();\n  }\n\n  render() {\n    const {\n      forecastDailyElements,\n      forecastHourlyElements,\n      dailyProperty,\n      hourlyProperty\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main\",\n      style: {\n        backgroundImage: `url(\"/images/bg.jpg\")`\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"city-form\",\n        children: /*#__PURE__*/_jsxDEV(Form, {\n          value: this.state.value,\n          handler: this.inputHandler,\n          submit: this.getWeather\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [this.state.city ? /*#__PURE__*/_jsxDEV(WeatherItem, {\n          weather: this.state\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 21\n        }, this) : null, /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Switch with default style\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 271,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Switch, {\n            onChange: this.handleChange,\n            checked: this.state.checked,\n            checkedIcon: \"D\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 272,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main-cards\",\n        children: dailyProperty ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"cards-slider\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"left\",\n            onClick: () => this.nextdailyProperty(),\n            disabled: dailyProperty.id === forecastDailyElements.length - 1,\n            children: \"Next\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 278,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"cards-slider-wrapper\",\n            style: {\n              'transform': `translateX(-${dailyProperty.id * (100 / forecastDailyElements.length)}%)`\n            },\n            children: forecastDailyElements.map(fde => /*#__PURE__*/_jsxDEV(ForecastDailyItem, {\n              element: fde\n            }, fde.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 286,\n              columnNumber: 63\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 283,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"right\",\n            onClick: () => this.prevdailyProperty(),\n            disabled: dailyProperty.id === 0,\n            children: \"Prev\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 288,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 21\n        }, this) : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main-cards\",\n        children: hourlyProperty ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"cards-slider\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"left\",\n            onClick: () => this.nextHourlyProperty(),\n            disabled: hourlyProperty.id === forecastHourlyElements.length - 1,\n            children: \"Next\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 299,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"cards-slider-wrapper\",\n            style: {\n              'transform': `translateX(-${hourlyProperty.id * (100 / forecastHourlyElements.length)}%)`\n            },\n            children: forecastHourlyElements.map(fde => /*#__PURE__*/_jsxDEV(ForecastHourlyItem, {\n              element: fde\n            }, fde.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 307,\n              columnNumber: 64\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 304,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"right\",\n            onClick: () => this.prevHourlyProperty(),\n            disabled: hourlyProperty.id === 0,\n            children: \"Prev\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 309,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 21\n        }, this) : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst weatherIcons = {\n  200: '/images/thunderstorm.png',\n  201: '/images/thunderstorm.png',\n  202: '/images/thunderstorm.png',\n  210: '/images/thunderstorm.png',\n  211: '/images/thunderstorm.png',\n  212: '/images/thunderstorm.png',\n  221: '/images/thunderstorm.png',\n  230: '/images/thunderstorm.png',\n  231: '/images/thunderstorm.png',\n  232: '/images/thunderstorm.png',\n  300: '/images/drizzle.png',\n  301: '/images/drizzle.png',\n  302: '/images/drizzle.png',\n  310: '/images/drizzle.png',\n  311: '/images/drizzle.png',\n  312: '/images/drizzle.png',\n  313: '/images/drizzle.png',\n  314: '/images/drizzle.png',\n  321: '/images/drizzle.png',\n  500: '/images/rain.png',\n  501: '/images/rain.png',\n  503: '/images/rain.png',\n  504: '/images/rain.png',\n  511: '/images/rain.png',\n  520: '/images/rain.png',\n  521: '/images/rain.png',\n  522: '/images/rain.png',\n  531: '/images/rain.png',\n  500: '/images/rain.png',\n  600: '/images/snow.png',\n  601: '/images/snow.png',\n  602: '/images/snow.png',\n  611: '/images/snow.png',\n  612: '/images/snow.png',\n  613: '/images/snow.png',\n  615: '/images/snow.png',\n  616: '/images/snow.png',\n  620: '/images/snow.png',\n  621: '/images/snow.png',\n  622: '/images/snow.png',\n  701: '/images/mist.png',\n  711: '/images/mist.png',\n  721: '/images/mist.png',\n  731: '/images/mist.png',\n  741: '/images/mist.png',\n  751: '/images/mist.png',\n  761: '/images/mist.png',\n  762: '/images/mist.png',\n  771: '/images/mist.png',\n  781: '/images/mist.png',\n  800: '/images/clear.png',\n  801: '/images/clouds.png',\n  802: '/images/clouds.png',\n  803: '/images/clouds.png',\n  804: '/images/clouds.png'\n};\nexport default CurrentWeather;","map":{"version":3,"sources":["C:/Users/vened/Desktop/Pogoda/my_weather/client/src/components/currentWeather/CurrentWeather.js"],"names":["React","WeatherItem","Form","CalDate","CalTime","CalCelsius","CalWindSpeed","ForecastDailyItem","ForecastHourlyItem","Switch","API_key","CurrentWeather","Component","constructor","props","nextdailyProperty","newIndex","state","dailyProperty","id","setState","forecastDailyElements","prevdailyProperty","nextHourlyProperty","hourlyProperty","forecastHourlyElements","prevHourlyProperty","defaultWeather","city","error","fetch","then","response","ok","Error","json","localTime","Date","toLocaleString","console","log","getForecastDaily","coord","lat","lon","getForecastHourly","country","sys","date","dt","time","timezone","weather","description","temp","main","tempMax","temp_max","tempMin","temp_min","tempFeel","feels_like","pressure","wind","speed","image","weatherIcons","clouds","all","humidity","sunrise","sunset","background","catch","err","prevState","getWeather","e","preventDefault","value","length","i","daily","day","wind_speed","hourly","timezone_offset","inputHandler","target","checked","undefined","pressurre","handleChange","bind","componentDidMount","render","backgroundImage","map","fde"],"mappings":"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","sourcesContent":["import React from 'react'\nimport WeatherItem from './WeatherItem';\nimport Form from '../Form/Form'\nimport CalDate from '../Functions/CalDate';\nimport CalTime from '../Functions/CalTime';\nimport CalCelsius from '../Functions/CalCelsius';\nimport CalWindSpeed from '../Functions/CalWindSpeed';\nimport ForecastDailyItem from './ForecastDailyItem';\nimport ForecastHourlyItem from './ForecastHourlyItem';\nimport './Forecast.css';\nimport './CurrentWeather.css';\nimport Switch from \"react-switch\";\n\nconst API_key=\"157d33f8987d245bc6a1997408e90015\"\n//const localTime = new Date().toLocaleString()\n\nclass CurrentWeather extends React.Component{\n    constructor(props){\n        super(props)\n        this.state={\n            checked: false,\n            value:\"\",\n            city:\"\",\n            country:\"\",\n            image:undefined,\n            background:undefined,\n            weather:undefined,\n            temp:undefined,\n            tempMax:undefined,\n            tempMin:undefined,\n            tempFeel:undefined,\n            pressurre:undefined,\n            wind:undefined,\n            lat:undefined,\n            lon:undefined,\n            clouds:undefined, \n            humidity:undefined,\n            sunrise:undefined,\n            sunset:undefined,\n            background:undefined,\n            forecastDailyElements:[\n            ],\n            forecastHourlyElements:[\n            ],\n            dailyProperty: undefined,\n            hourlyProperty: undefined,\n            error:false\n        }\n        this.handleChange = this.handleChange.bind(this);\n    }\n    handleChange(checked) {\n        this.setState({ checked });\n      }\n    nextdailyProperty = () => {\n        const newIndex = this.state.dailyProperty.id +1\n        this.setState({\n            dailyProperty: this.state.forecastDailyElements[newIndex]\n        })\n    }\n\n    prevdailyProperty = () => {\n        const newIndex = this.state.dailyProperty.id -1\n        this.setState({\n            dailyProperty: this.state.forecastDailyElements[newIndex]\n        })\n    }\n\n    nextHourlyProperty = () => {\n        const newIndex = this.state.hourlyProperty.id +1\n        this.setState({\n            hourlyProperty: this.state.forecastHourlyElements[newIndex]\n        })\n    }\n    \n    prevHourlyProperty = () => {\n        const newIndex = this.state.hourlyProperty.id -1\n        this.setState({\n            hourlyProperty: this.state.forecastHourlyElements[newIndex]\n        })\n    }\n    defaultWeather = () => {\n        this.setState(state =>({\n            city:\"Warszawa\",\n            error:false\n          }))\n          fetch(`http://api.openweathermap.org/data/2.5/weather?q=warszawa&lang=pl&APPID=${API_key}`)\n          .then(response => {\n              if(response.ok){\n                  return response\n              }\n              throw Error(\"Błąd pobierania danych z API\")\n          })\n          .then(response => response.json())\n          .then(response => {\n              const localTime = new Date().toLocaleString()\n              console.log(response)\n              this.getForecastDaily(response.coord.lat,response.coord.lon)\n              this.getForecastHourly(response.coord.lat,response.coord.lon)\n              this.setState(state =>({\n                city:state.city,\n                country:response.sys.country,\n                date:CalDate(response.dt),\n                time:CalTime(response.dt,response.timezone),\n                weather:response.weather[0].description,\n                temp:CalCelsius(response.main.temp),\n                tempMax:CalCelsius(response.main.temp_max),\n                tempMin:CalCelsius(response.main.temp_min),\n                tempFeel:CalCelsius(response.main.feels_like),\n                pressure:response.main.pressure,\n                wind:CalWindSpeed(response.wind.speed),\n                image:weatherIcons[response.weather[0].id],\n                lat:response.coord.lat,\n                lon:response.coord.lon,\n                clouds:response.clouds.all, \n                humidity:response.main.humidity,\n                sunrise:CalTime(response.sys.sunrise,response.timezone),\n                sunset:CalTime(response.sys.sunset,response.timezone),\n                background:\"/images/cloudyCity.jpg\",\n                error:false\n              }))\n          })\n          .catch(err =>{\n            console.log(err)\n            this.setState(prevState =>{\n                return{\n                error:true,\n                city:prevState.city\n            }})\n        })\n    }\n    getWeather = (e) =>{\n        \n        e.preventDefault()\n          \n          fetch(`http://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&lang=pl&APPID=${API_key}`)\n          .then(response => {\n              if(response.ok){\n                  return response\n              }\n              throw Error(\"Błąd pobierania danych z API\")\n          })\n          .then(response => response.json())\n          .then(response => {\n              const localTime = new Date().toLocaleString()\n              console.log(response)\n              this.getForecastDaily(response.coord.lat,response.coord.lon)\n              this.getForecastHourly(response.coord.lat,response.coord.lon)\n              this.setState(state =>({\n                city:state.value,\n                country:response.sys.country,\n                date:CalDate(response.dt),\n                time:CalTime(response.dt,response.timezone),\n                weather:response.weather[0].description,\n                temp:CalCelsius(response.main.temp),\n                tempMax:CalCelsius(response.main.temp_max),\n                tempMin:CalCelsius(response.main.temp_min),\n                tempFeel:CalCelsius(response.main.feels_like),\n                pressure:response.main.pressure,\n                wind:CalWindSpeed(response.wind.speed),\n                image:weatherIcons[response.weather[0].id],\n                lat:response.coord.lat,\n                lon:response.coord.lon,\n                clouds:response.clouds.all, \n                humidity:response.main.humidity,\n                sunrise:CalTime(response.sys.sunrise,response.timezone),\n                sunset:CalTime(response.sys.sunset,response.timezone),\n                background:\"/images/cloudyCity.jpg\",\n                error:false\n              }))\n          })\n          .catch(err =>{\n            console.log(err)\n            this.setState(prevState =>{\n                return{\n                error:true,\n                city:prevState.city\n            }})\n        })\n        \n    }\n    getForecastDaily = (lat,lon)=>{\n\n        console.log(lat)\n        this.state.forecastDailyElements.length=0\n        \n        fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&lang=pl&appid=${API_key}`)\n          .then(response => {\n              if(response.ok){\n                  return response\n              }\n              throw Error(\"Błąd pobierania danych z API\")\n          })\n          .then(response => response.json())\n          .then(response => {\n              console.log(response)\n              for (var i = 0; i < 8; i++) {\n                this.setState({\n                    forecastDailyElements:[...this.state.forecastDailyElements,{\n                        'id':i,\n                        'date':CalDate(response.daily[i].dt),\n                        'weather':response.daily[i].weather[0].description,\n                        'temp':CalCelsius(response.daily[i].temp.day),\n                        'pressure':response.daily[i].pressure,\n                        'wind':CalWindSpeed(response.daily[i].wind_speed),\n                        'image':weatherIcons[response.daily[i].weather[0].id],\n                        'background':\"/images/download.gif\",\n                    }],\n                    dailyProperty:this.state.forecastDailyElements[0]\n                })\n            }   \n          })\n    }\n    getForecastHourly = (lat,lon)=>{\n\n        this.state.forecastHourlyElements.length=0\n        \n        fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&lang=pl&appid=${API_key}`)\n          .then(response => {\n              if(response.ok){\n                  return response\n              }\n              throw Error(\"Błąd pobierania danych z API\")\n          })\n          .then(response => response.json())\n          .then(response => {\n              const localTime = new Date().toLocaleString()\n              console.log(response)\n              for (var i = 0; i < 48; i++) {\n                this.setState({\n                    forecastHourlyElements:[...this.state.forecastHourlyElements,{\n                        'id':i,\n                        'date':CalDate(response.hourly[i].dt),\n                        'time':CalTime(response.hourly[i].dt,response.timezone_offset),\n                        'weather':response.hourly[i].weather[0].description,\n                        'temp':CalCelsius(response.hourly[i].temp),\n                        'pressure':response.hourly[i].pressure,\n                        'wind':CalWindSpeed(response.hourly[i].wind_speed),\n                        'image':weatherIcons[response.hourly[i].weather[0].id],\n                    }],\n                    hourlyProperty:this.state.forecastHourlyElements[0]\n                })\n            }\n          })\n    }\n    inputHandler=(e)=>{\n        this.setState({\n            value:e.target.value\n        })\n    }\n    componentDidMount(){\n        this.defaultWeather()\n     }\n    render(){\n        const {forecastDailyElements, forecastHourlyElements, dailyProperty, hourlyProperty}=this.state\n        return(\n            <div className=\"main\" style={{ \n                backgroundImage: `url(\"/images/bg.jpg\")` \n              }}>\n                <div className=\"city-form\">\n                <Form \n                value={this.state.value}  \n                handler={this.inputHandler}\n                submit={this.getWeather}\n                /> \n                </div> \n                <div>\n                {this.state.city ?(\n                    <WeatherItem weather={this.state}/>   \n                ):null}\n                <label>\n                <span>Switch with default style</span>\n                <Switch onChange={this.handleChange} checked={this.state.checked} checkedIcon={\"D\"} />\n                </label>\n                </div>\n                <div className=\"main-cards\">\n                    {dailyProperty ?( \n                    <div className=\"cards-slider\">\n                        <button className=\"left\" \n                                onClick={() => this.nextdailyProperty()} \n                                disabled={dailyProperty.id === forecastDailyElements.length-1}\n                                >Next\n                        </button>\n                        <div className=\"cards-slider-wrapper\" style={{\n                            'transform':`translateX(-${dailyProperty.id*(100/forecastDailyElements.length)}%)`\n                        }}>\n                            {forecastDailyElements.map(fde => <ForecastDailyItem key={fde.id} element={fde} />)}\n                        </div>\n                        <button className=\"right\"\n                                onClick={() => this.prevdailyProperty()} \n                                disabled={dailyProperty.id === 0}\n                        >Prev\n                        </button>\n                    </div>\n                    ):null}\n                </div>\n                <div className=\"main-cards\">\n                    {hourlyProperty ?( \n                    <div className=\"cards-slider\">\n                        <button className=\"left\" \n                                onClick={() => this.nextHourlyProperty()} \n                                disabled={hourlyProperty.id === forecastHourlyElements.length-1}\n                                >Next\n                        </button>\n                        <div className=\"cards-slider-wrapper\" style={{\n                            'transform':`translateX(-${hourlyProperty.id*(100/forecastHourlyElements.length)}%)`\n                        }}>\n                            {forecastHourlyElements.map(fde => <ForecastHourlyItem key={fde.id} element={fde} />)}\n                        </div>\n                        <button className=\"right\"\n                                onClick={() => this.prevHourlyProperty()} \n                                disabled={hourlyProperty.id === 0}\n                        >Prev\n                        </button>\n                    </div>\n                    ):null}\n                </div>\n            </div>\n        \n        )\n    }\n}\nconst weatherIcons = {\n    200:'/images/thunderstorm.png',\n    201:'/images/thunderstorm.png',\n    202:'/images/thunderstorm.png',\n    210:'/images/thunderstorm.png',\n    211:'/images/thunderstorm.png',\n    212:'/images/thunderstorm.png',\n    221:'/images/thunderstorm.png',\n    230:'/images/thunderstorm.png',\n    231:'/images/thunderstorm.png',\n    232:'/images/thunderstorm.png',\n    300:'/images/drizzle.png',\n    301:'/images/drizzle.png',\n    302:'/images/drizzle.png',\n    310:'/images/drizzle.png',\n    311:'/images/drizzle.png',\n    312:'/images/drizzle.png',\n    313:'/images/drizzle.png',\n    314:'/images/drizzle.png',\n    321:'/images/drizzle.png',\n    500:'/images/rain.png',\n    501:'/images/rain.png',\n    503:'/images/rain.png',\n    504:'/images/rain.png',\n    511:'/images/rain.png',\n    520:'/images/rain.png',\n    521:'/images/rain.png',\n    522:'/images/rain.png',\n    531:'/images/rain.png',\n    500:'/images/rain.png',\n    600:'/images/snow.png',\n    601:'/images/snow.png',\n    602:'/images/snow.png',\n    611:'/images/snow.png',\n    612:'/images/snow.png',\n    613:'/images/snow.png',\n    615:'/images/snow.png',\n    616:'/images/snow.png',\n    620:'/images/snow.png',\n    621:'/images/snow.png',\n    622:'/images/snow.png',\n    701:'/images/mist.png',\n    711:'/images/mist.png',\n    721:'/images/mist.png',\n    731:'/images/mist.png',\n    741:'/images/mist.png',\n    751:'/images/mist.png',\n    761:'/images/mist.png',\n    762:'/images/mist.png',\n    771:'/images/mist.png',\n    781:'/images/mist.png',\n    800:'/images/clear.png',\n    801:'/images/clouds.png',\n    802:'/images/clouds.png',\n    803:'/images/clouds.png',\n    804:'/images/clouds.png',\n}\nexport default CurrentWeather"]},"metadata":{},"sourceType":"module"}