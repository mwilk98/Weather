{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vened\\\\Desktop\\\\Pogoda\\\\my_weather\\\\src\\\\components\\\\forecast\\\\Forecast.js\";\nimport React from 'react';\nimport ForecastDailyItem from './ForecastDailyItem';\nimport ForecastHourlyItem from './ForecastHourlyItem';\nimport CurrentWeather from '../currentWeather/CurrentWeather';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_key = \"157d33f8987d245bc6a1997408e90015\";\n\nclass Forecast extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      elements: [],\n      elements2: []\n    };\n\n    this.getWeather = e => {\n      e.preventDefault();\n      fetch(`http://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&APPID=${API_key}`).then(response => {\n        if (response.ok) {\n          return response;\n        }\n\n        throw Error(\"Błąd pobierania danych z API\");\n      }).then(response => response.json()).then(response => {\n        const localTime = new Date().toLocaleString();\n        console.log(response);\n        this.setState(state => ({\n          city: state.value,\n          country: response.sys.country,\n          date: this.calDate(response.dt),\n          time: this.calTime(response.dt, response.timezone),\n          weather: response.weather[0].description,\n          temp: this.calCelsius(response.main.temp),\n          tempMax: this.calCelsius(response.main.temp_max),\n          tempMin: this.calCelsius(response.main.temp_min),\n          pressure: response.main.pressure,\n          wind: this.calWindSpeed(response.wind.speed),\n          lat: response.coord.lat,\n          lon: response.coord.lon,\n          error: false\n        }));\n      }).catch(err => {\n        console.log(err);\n        this.setState(prevState => {\n          return {\n            error: true,\n            city: prevState.city\n          };\n        });\n      });\n    };\n\n    this.getForecastDaily = props => {\n      e.preventDefault();\n      this.state.elements.length = 0;\n      fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${this.props.lat}&lon=${this.props.lon}&appid=${API_key}`).then(response => {\n        if (response.ok) {\n          return response;\n        }\n\n        throw Error(\"Błąd pobierania danych z API\");\n      }).then(response => response.json()).then(response => {\n        const localTime = new Date().toLocaleString();\n        console.log(response);\n\n        for (var i = 1; i < 8; i++) {\n          this.setState({\n            elements: [...this.state.elements, {\n              'id': response.daily[i],\n              'date': this.calDate(response.daily[i].dt),\n              'weather': response.daily[i].weather[0].description,\n              'temp': this.calCelsius(response.daily[i].temp.day),\n              'pressure': response.daily[i].pressure,\n              'wind': this.calWindSpeed(response.daily[i].wind_speed)\n            }]\n          });\n        }\n      });\n    };\n\n    this.getForecastHourly = async props => {\n      this.state.elements2.length = 0;\n      const api_call = await fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${this.props.lat}&lon=${this.props.lon}&appid=${API_key}`);\n      const response = await api_call.json();\n\n      for (var i = 0; i < 48; i++) {\n        this.setState({\n          elements2: [...this.state.elements2, {\n            'id': response.hourly[i],\n            'date': this.calDate(response.hourly[i].dt),\n            'time': this.calTime(response.hourly[i].dt, response.timezone_offset),\n            'weather': response.hourly[i].weather[0].description,\n            'temp': this.calCelsius(response.hourly[i].temp),\n            'pressure': response.hourly[i].pressure,\n            'wind': this.calWindSpeed(response.hourly[i].wind_speed)\n          }]\n        });\n      }\n    };\n  }\n\n  calDate(time) {\n    var date = new Date(time * 1000); // Hours part from the timestamp\n\n    var year = date.getFullYear();\n    var month = date.getMonth() + 1;\n    var day = date.getDate();\n    var daytime = day + '-' + 0 + month + '-' + year;\n    return daytime;\n  }\n\n  calTime(time, timezone) {\n    var date = new Date(time * 1000 + timezone * 1000);\n    var hours = date.getHours(); // Minutes part from the timestamp\n\n    var minutes = date.getMinutes(); // Seconds part from the timestamp\n\n    var seconds = date.getSeconds();\n    var daytime = hours + ':' + minutes + ':' + seconds;\n    return daytime;\n  }\n\n  calCelsius(temp) {\n    let cell = Math.floor(temp - 273.15);\n    return cell;\n  }\n\n  calWindSpeed(wind) {\n    let cell = Math.floor(wind * 3.6);\n    return cell;\n  }\n\n  componentDidMount() {\n    this.getForecastDaily();\n    this.getForecastHourly();\n  }\n\n  render() {\n    const elements = this.state.elements.map(e => {\n      return /*#__PURE__*/_jsxDEV(ForecastDailyItem, {\n        element: e\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 20\n      }, this);\n    });\n    const elements2 = this.state.elements2.map(e => {\n      return /*#__PURE__*/_jsxDEV(ForecastHourlyItem, {\n        element: e\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 20\n      }, this);\n    });\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.getForecastDaily.bind(this),\n        children: \"Refresh Component\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.getForecastHourly.bind(this),\n        children: \"Refresh Component\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card2\",\n        children: elements\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card2\",\n        children: elements2\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Forecast;","map":{"version":3,"sources":["C:/Users/vened/Desktop/Pogoda/my_weather/src/components/forecast/Forecast.js"],"names":["React","ForecastDailyItem","ForecastHourlyItem","CurrentWeather","API_key","Forecast","Component","state","elements","elements2","getWeather","e","preventDefault","fetch","value","then","response","ok","Error","json","localTime","Date","toLocaleString","console","log","setState","city","country","sys","date","calDate","dt","time","calTime","timezone","weather","description","temp","calCelsius","main","tempMax","temp_max","tempMin","temp_min","pressure","wind","calWindSpeed","speed","lat","coord","lon","error","catch","err","prevState","getForecastDaily","props","length","i","daily","day","wind_speed","getForecastHourly","api_call","hourly","timezone_offset","year","getFullYear","month","getMonth","getDate","daytime","hours","getHours","minutes","getMinutes","seconds","getSeconds","cell","Math","floor","componentDidMount","render","map","bind"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport ForecastDailyItem from './ForecastDailyItem';\r\nimport ForecastHourlyItem from './ForecastHourlyItem';\r\nimport CurrentWeather from '../currentWeather/CurrentWeather'\r\n\r\nconst API_key=\"157d33f8987d245bc6a1997408e90015\"\r\n\r\nclass Forecast extends React.Component{\r\n    state={\r\n        elements:[\r\n        ],\r\n        elements2:[\r\n        ]\r\n    }\r\n    calDate(time){\r\n        var date = new Date(time * 1000);\r\n        // Hours part from the timestamp\r\n        var year = date.getFullYear();\r\n        var month = date.getMonth()+1;\r\n        var day = date.getDate();\r\n        var daytime=day+'-'+0+month+'-'+year;\r\n        return daytime;\r\n      }\r\n      calTime(time,timezone){\r\n        var date = new Date(time*1000+timezone*1000);\r\n        var hours = date.getHours();\r\n        // Minutes part from the timestamp\r\n        var minutes = date.getMinutes();\r\n        // Seconds part from the timestamp\r\n        var seconds = date.getSeconds();\r\n    \r\n        var daytime=hours+':'+minutes+':'+seconds;\r\n        return daytime;\r\n      }\r\n    calCelsius(temp){\r\n        let cell= Math.floor(temp-273.15)\r\n        return cell;\r\n    }\r\n    calWindSpeed(wind){\r\n        let cell= Math.floor(wind*3.6)\r\n        return cell;\r\n    }\r\n    getWeather = (e) =>{\r\n        \r\n        e.preventDefault()\r\n          \r\n          fetch(`http://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&APPID=${API_key}`)\r\n          .then(response => {\r\n              if(response.ok){\r\n                  return response\r\n              }\r\n              throw Error(\"Błąd pobierania danych z API\")\r\n          })\r\n          .then(response => response.json())\r\n          .then(response => {\r\n              const localTime = new Date().toLocaleString()\r\n              console.log(response)\r\n              this.setState(state =>({\r\n                city:state.value,\r\n                country:response.sys.country,\r\n                date:this.calDate(response.dt),\r\n                time:this.calTime(response.dt,response.timezone),\r\n                weather:response.weather[0].description,\r\n                temp:this.calCelsius(response.main.temp),\r\n                tempMax:this.calCelsius(response.main.temp_max),\r\n                tempMin:this.calCelsius(response.main.temp_min),\r\n                pressure:response.main.pressure,\r\n                wind:this.calWindSpeed(response.wind.speed),\r\n                lat:response.coord.lat,\r\n                lon:response.coord.lon, \r\n                error:false\r\n              }))\r\n          })\r\n          .catch(err =>{\r\n            console.log(err)\r\n            this.setState(prevState =>{\r\n                return{\r\n                error:true,\r\n                city:prevState.city\r\n            }})\r\n        })\r\n    }\r\n    getForecastDaily = (props)=>{\r\n        e.preventDefault()\r\n        this.state.elements.length=0\r\n        fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${this.props.lat}&lon=${this.props.lon}&appid=${API_key}`)\r\n          .then(response => {\r\n              if(response.ok){\r\n                  return response\r\n              }\r\n              throw Error(\"Błąd pobierania danych z API\")\r\n          })\r\n          .then(response => response.json())\r\n          .then(response => {\r\n              const localTime = new Date().toLocaleString()\r\n              console.log(response)\r\n              for (var i = 1; i < 8; i++) {\r\n                this.setState({\r\n                    elements:[...this.state.elements,{\r\n                        'id':response.daily[i],\r\n                        'date':this.calDate(response.daily[i].dt),\r\n                        'weather':response.daily[i].weather[0].description,\r\n                        'temp':this.calCelsius(response.daily[i].temp.day),\r\n                        'pressure':response.daily[i].pressure,\r\n                        'wind':this.calWindSpeed(response.daily[i].wind_speed),\r\n                    }],\r\n                })\r\n            }\r\n          })\r\n    }\r\n    getForecastHourly = async(props)=>{\r\n        this.state.elements2.length=0\r\n\r\n        const api_call = await fetch(\r\n          `https://api.openweathermap.org/data/2.5/onecall?lat=${this.props.lat}&lon=${this.props.lon}&appid=${API_key}`\r\n          );\r\n    \r\n        const response = await api_call.json();\r\n    \r\n      for (var i = 0; i < 48; i++) {\r\n          this.setState({\r\n              elements2:[...this.state.elements2,{\r\n                  'id':response.hourly[i],\r\n                  'date':this.calDate(response.hourly[i].dt),\r\n                  'time':this.calTime(response.hourly[i].dt,response.timezone_offset),\r\n                  'weather':response.hourly[i].weather[0].description,\r\n                  'temp':this.calCelsius(response.hourly[i].temp),\r\n                  'pressure':response.hourly[i].pressure,\r\n                  'wind':this.calWindSpeed(response.hourly[i].wind_speed),\r\n              }],\r\n          })\r\n      }   \r\n  }\r\n  componentDidMount(){\r\n       this.getForecastDaily()\r\n       this.getForecastHourly()  \r\n    }\r\n\r\n    render(){\r\n        const elements = this.state.elements.map(e=>{\r\n            return <ForecastDailyItem element={e}/>\r\n        })\r\n        const elements2 = this.state.elements2.map(e=>{\r\n            return <ForecastHourlyItem element={e}/>\r\n        })\r\n        return(\r\n            <div >\r\n                <button onClick={ this.getForecastDaily.bind(this) }>Refresh Component</button>\r\n                <button onClick={ this.getForecastHourly.bind(this) }>Refresh Component</button>\r\n                <div className=\"card2\">\r\n                {elements}\r\n                </div>\r\n                <div className=\"card2\">\r\n                {elements2}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Forecast"]},"metadata":{},"sourceType":"module"}