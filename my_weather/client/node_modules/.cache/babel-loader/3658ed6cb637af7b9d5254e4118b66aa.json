{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vened\\\\Desktop\\\\Weather\\\\my_weather\\\\client\\\\src\\\\components\\\\currentWeather\\\\CurrentWeather.js\";\nimport React from 'react';\nimport WeatherItem from './WeatherItem';\nimport Form from '../Form/Form';\nimport CalDate from '../Functions/CalDate';\nimport CalTime from '../Functions/CalTime';\nimport CalCelsius from '../Functions/CalCelsius';\nimport CalWindSpeed from '../Functions/CalWindSpeed';\nimport ForecastDailyItem from './ForecastDailyItem';\nimport ForecastHourlyItem from './ForecastHourlyItem';\nimport './Forecast.css';\nimport './CurrentWeather.css';\nimport { Line } from 'react-chartjs-2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_key = \"157d33f8987d245bc6a1997408e90015\"; //const localTime = new Date().toLocaleString()\n\nclass CurrentWeather extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.nextProperty = (Property, Elements) => {\n      const newIndex = Property.id + 1;\n      this.setState({\n        Property: Elements[newIndex]\n      });\n      console.log(newIndex);\n    };\n\n    this.prevProperty = (Property, Elements) => {\n      const newIndex = Property.id - 1;\n      this.setState({\n        Property: Elements[newIndex]\n      });\n    };\n\n    this.defaultWeather = cityName => {\n      this.setState(state => ({\n        city: cityName,\n        error: false\n      }));\n      fetch(`http://api.openweathermap.org/data/2.5/weather?q=${cityName}&lang=pl&APPID=${API_key}`).then(response => {\n        if (response.ok) {\n          return response;\n        }\n\n        throw Error(\"Błąd pobierania danych z API\");\n      }).then(response => response.json()).then(response => {\n        this.getForecastDaily(response.coord.lat, response.coord.lon);\n        this.getForecastHourly(response.coord.lat, response.coord.lon);\n        this.getAirQuality(response.coord.lat, response.coord.lon);\n        this.setState(state => ({\n          city: state.city,\n          country: response.sys.country,\n          date: CalDate(response.dt, response.timezone),\n          time: CalTime(response.dt, response.timezone),\n          timezone: response.timezone,\n          weather: response.weather[0].description,\n          temp: CalCelsius(response.main.temp),\n          tempMax: CalCelsius(response.main.temp_max),\n          tempMin: CalCelsius(response.main.temp_min),\n          tempFeel: CalCelsius(response.main.feels_like),\n          pressure: response.main.pressure,\n          wind: CalWindSpeed(response.wind.speed),\n          image: weatherIcons[response.weather[0].id],\n          lat: response.coord.lat,\n          lon: response.coord.lon,\n          clouds: response.clouds.all,\n          humidity: response.main.humidity,\n          sunrise: CalTime(response.sys.sunrise, response.timezone),\n          sunset: CalTime(response.sys.sunset, response.timezone),\n          background: \"/images/cloudyCity.jpg\",\n          error: false\n        }));\n\n        for (var i = 0; i < 12; i++) {\n          if (this.state.time > this.state.sunset && response.weather[0].id == nightIcons[i]) {\n            this.setState({\n              image: weatherIcons[response.weather[0].id + 1000]\n            });\n          }\n        }\n      }).catch(err => {\n        console.log(err);\n        this.setState(prevState => {\n          return {\n            error: true,\n            city: prevState.city\n          };\n        });\n      });\n    };\n\n    this.getWeather = e => {\n      e.preventDefault();\n      fetch(`http://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&lang=pl&APPID=${API_key}`).then(response => {\n        if (response.ok) {\n          return response;\n        }\n\n        throw Error(\"Błąd pobierania danych z API\");\n      }).then(response => response.json()).then(response => {\n        console.log(response);\n        this.setState(state => ({\n          city: state.value,\n          country: response.sys.country,\n          timezone: response.timezone,\n          date: CalDate(response.dt, response.timezone),\n          time: CalTime(response.dt, response.timezone),\n          weather: response.weather[0].description,\n          temp: CalCelsius(response.main.temp),\n          tempMax: CalCelsius(response.main.temp_max),\n          tempMin: CalCelsius(response.main.temp_min),\n          tempFeel: CalCelsius(response.main.feels_like),\n          pressure: response.main.pressure,\n          wind: CalWindSpeed(response.wind.speed),\n          image: weatherIcons[response.weather[0].id],\n          lat: response.coord.lat,\n          lon: response.coord.lon,\n          clouds: response.clouds.all,\n          humidity: response.main.humidity,\n          sunrise: CalTime(response.sys.sunrise, response.timezone),\n          sunset: CalTime(response.sys.sunset, response.timezone),\n          background: \"/images/cloudyCity.jpg\",\n          error: false\n        }));\n\n        for (var i = 0; i < 12; i++) {\n          if (this.state.time > this.state.sunset && response.weather[0].id == nightIcons[i]) {\n            this.setState({\n              image: weatherIcons[response.weather[0].id + 1000]\n            });\n          }\n        }\n\n        this.getForecastDaily(response.coord.lat, response.coord.lon);\n        this.getForecastHourly(response.coord.lat, response.coord.lon);\n        this.getAirQuality(response.coord.lat, response.coord.lon);\n      }).catch(err => {\n        console.log(err);\n        this.setState(prevState => {\n          return {\n            error: true,\n            city: prevState.city\n          };\n        });\n      });\n    };\n\n    this.getForecastDaily = (lat, lon, typeF) => {\n      this.setState({\n        forecastElements: []\n      });\n      fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&lang=pl&appid=${API_key}`).then(response => {\n        if (response.ok) {\n          return response;\n        }\n\n        throw Error(\"Błąd pobierania danych z API\");\n      }).then(response => response.json()).then(response => {\n        for (var i = 0; i < 8; i++) {\n          this.setState({\n            forecastElements: [...this.state.forecastElements, {\n              'id': i,\n              'date': CalDate(response.daily[i].dt, this.state.timezone),\n              'weather': response.daily[i].weather[0].description,\n              'tempMax': CalCelsius(response.daily[i].temp.max),\n              'tempMin': CalCelsius(response.daily[i].temp.min),\n              'pressure': response.daily[i].pressure,\n              'wind': CalWindSpeed(response.daily[i].wind_speed),\n              'image': weatherIcons[response.daily[i].weather[0].id],\n              'clouds': response.daily[i].clouds,\n              'humidity': response.daily[i].humidity,\n              'sunrise': CalTime(response.daily[i].sunrise, response.timezone_offset),\n              'sunset': CalTime(response.daily[i].sunset, response.timezone_offset)\n            }]\n          });\n        }\n\n        this.setState({\n          Property: this.state.forecastElements[0]\n        });\n      });\n    };\n\n    this.getForecastHourly = (lat, lon) => {\n      this.setState({\n        forecastElements: [],\n        tempData: [],\n        tempTime: [],\n        tempPress: [],\n        tempHumid: []\n      });\n      fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&lang=pl&appid=${API_key}`).then(response => {\n        if (response.ok) {\n          return response;\n        }\n\n        throw Error(\"Błąd pobierania danych z API\");\n      }).then(response => response.json()).then(response => {\n        for (var i = 0; i < 48; i++) {\n          this.setState({\n            forecastElements: [...this.state.forecastElements, {\n              'id': i,\n              'date': CalDate(response.hourly[i].dt, this.state.timezone),\n              'time': CalTime(response.hourly[i].dt, response.timezone_offset),\n              'weather': response.hourly[i].weather[0].description,\n              'temp': CalCelsius(response.hourly[i].temp),\n              'tempFeel': CalCelsius(response.hourly[i].feels_like),\n              'pressure': response.hourly[i].pressure,\n              'humidity': response.hourly[i].humidity,\n              'wind': CalWindSpeed(response.hourly[i].wind_speed),\n              'image': weatherIcons[response.hourly[i].weather[0].id],\n              'clouds': response.hourly[i].clouds\n            }],\n            tempData: [...this.state.tempData, CalCelsius(response.hourly[i].temp)],\n            tempTime: [...this.state.tempTime, CalTime(response.hourly[i].dt, response.timezone_offset)],\n            tempPress: [...this.state.tempPress, response.hourly[i].pressure],\n            tempHumid: [...this.state.tempHumid, response.hourly[i].humidity]\n          });\n          this.setState({\n            Property: this.state.forecastElements[0]\n          });\n        }\n\n        this.setState({\n          dataTemperature: {\n            labels: this.state.tempTime,\n            datasets: [{\n              label: 'Temperatura:',\n              data: this.state.tempData,\n              fill: false,\n              backgroundColor: 'rgb(209, 157, 12)',\n              borderColor: 'rgb(0, 0, 0)'\n            }]\n          },\n          dataPressure: {\n            labels: this.state.tempTime,\n            datasets: [{\n              label: 'Ciśnienie:',\n              data: this.state.tempPress,\n              fill: false,\n              backgroundColor: 'rgb(209, 157, 12)',\n              borderColor: 'rgb(0, 0, 0)'\n            }]\n          },\n          dataHumiity: {\n            labels: this.state.tempTime,\n            datasets: [{\n              label: 'Wilgotność:',\n              data: this.state.tempHumid,\n              fill: false,\n              backgroundColor: 'rgb(209, 157, 12)',\n              borderColor: 'rgb(0, 0, 0)'\n            }]\n          }\n        });\n        this.setState({\n          data: this.state.dataTemperature\n        });\n      });\n    };\n\n    this.inputHandler = e => {\n      this.setState({\n        value: e.target.value\n      });\n    };\n\n    this.setForecast = () => {\n      if (this.state.forecast) {\n        this.setState({\n          forecast: false,\n          Property: this.state.forecastElements[0]\n        });\n      } else {\n        this.setState({\n          forecast: true,\n          Property: this.state.forecastElements[0]\n        });\n      }\n    };\n\n    this.selectData = chartDataSource => {\n      if (chartDataSource == 1) {\n        this.setState({\n          data: this.state.dataTemperature\n        });\n      }\n\n      if (chartDataSource == 2) {\n        this.setState({\n          data: this.state.dataPressure\n        });\n      }\n\n      if (chartDataSource == 3) {\n        this.setState({\n          data: this.state.dataHumiity\n        });\n      }\n    };\n\n    this.state = {\n      value: \"\",\n      city: \"\",\n      country: \"\",\n      aqi: undefined,\n      pm2_5: undefined,\n      image: undefined,\n      background: undefined,\n      weather: undefined,\n      temp: undefined,\n      tempMax: undefined,\n      tempMin: undefined,\n      tempFeel: undefined,\n      pressurre: undefined,\n      wind: undefined,\n      lat: undefined,\n      lon: undefined,\n      clouds: undefined,\n      humidity: undefined,\n      sunrise: undefined,\n      sunset: undefined,\n      content: undefined,\n      forecastElements: [],\n      forecastHourlyElements: [],\n      Property: undefined,\n      hourlyProperty: undefined,\n      forecast: true,\n      error: false,\n      tempData: [],\n      tempPress: [],\n      tempHumid: [],\n      tempTime: [],\n      data: {\n        labels: [],\n        datasets: [{\n          label: '',\n          data: [],\n          fill: false,\n          backgroundColor: 'rgb(0, 0, 0)',\n          borderColor: 'rgba(0, 0, 0, 0)'\n        }]\n      },\n      dataTemperature: {\n        labels: [],\n        datasets: [{\n          label: '',\n          data: [],\n          fill: false,\n          backgroundColor: 'rgb(0, 0, 0)',\n          borderColor: 'rgba(0, 0, 0, 0)'\n        }]\n      },\n      dataPressure: {\n        labels: [],\n        datasets: [{\n          label: '',\n          data: [],\n          fill: false,\n          backgroundColor: 'rgb(0, 0, 0)',\n          borderColor: 'rgba(0, 0, 0, 0)'\n        }]\n      },\n      dataHumiity: {\n        labels: [],\n        datasets: [{\n          label: '',\n          data: [],\n          fill: false,\n          backgroundColor: 'rgb(0, 0, 0)',\n          borderColor: 'rgba(0, 0, 0, 0)'\n        }]\n      },\n      options: {\n        plugins: {\n          legend: {\n            display: true,\n            labels: {\n              color: 'black'\n            }\n          }\n        },\n        maintainAspectRatio: false,\n        scales: {\n          y: {\n            ticks: {\n              color: \"black\",\n              font: {\n                size: 10\n              },\n              stepSize: 1,\n              beginAtZero: true\n            }\n          },\n          x: {\n            ticks: {\n              color: \"black\",\n              font: {\n                size: 14\n              },\n              stepSize: 1,\n              beginAtZero: true\n            }\n          }\n        }\n      }\n    };\n  }\n\n  getAirQuality(lat, lon) {\n    fetch(`http://api.openweathermap.org/data/2.5/air_pollution?lat=${lat}&lon=${lon}&appid=${API_key}`).then(response => {\n      if (response.ok) {\n        return response;\n      }\n\n      throw Error(\"Błąd pobierania danych z API\");\n    }).then(response => response.json()).then(response => {\n      this.setState(state => ({\n        aqi: airConditions[response.list[0].main.aqi],\n        pm2_5: response.list[0].components.pm2_5,\n        color: response.list[0].main.aqi,\n        error: false\n      }));\n    }).catch(err => {\n      console.log(err);\n      this.setState(prevState => {\n        return {\n          error: true,\n          city: prevState.city\n        };\n      });\n    });\n  }\n\n  componentDidMount() {\n    this.defaultWeather(\"Warszawa\");\n  }\n\n  render() {\n    if (this.state.forecast) {\n      this.state.content = this.state.forecastElements.map(fde => /*#__PURE__*/_jsxDEV(ForecastDailyItem, {\n        element: fde\n      }, fde.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 541,\n        columnNumber: 56\n      }, this));\n    } else {\n      this.state.content = this.state.forecastElements.map(fde => /*#__PURE__*/_jsxDEV(ForecastHourlyItem, {\n        element: fde\n      }, fde.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 545,\n        columnNumber: 56\n      }, this));\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main\",\n      style: {\n        backgroundImage: `url(\"/images/bg.jpg\")`\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"city-form\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Wyszukaj miasto dla kt\\xF3rego chcesz sprawdzi\\u0107 obecne warunki pogodowe oraz prognozy pogody\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 555,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(Form, {\n          value: this.state.value,\n          handler: this.inputHandler,\n          submit: this.getWeather\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 556,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 554,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"current-main\",\n        children: this.state.city ? /*#__PURE__*/_jsxDEV(WeatherItem, {\n          element: this.state,\n          selectD: this.selectData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 564,\n          columnNumber: 33\n        }, this) : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 562,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"forecast-main\",\n        children: this.state.Property ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"forecast-cards\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"left\",\n            style: {\n              backgroundImage: `url(\"/images/arrow_left.png\")`\n            },\n            onClick: () => this.prevProperty(this.state.Property, this.state.forecastElements),\n            disabled: this.state.Property.id === 0\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 570,\n            columnNumber: 37\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"swap-button\",\n            onClick: () => this.setForecast(),\n            children: \"GODZINOWA\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 578,\n            columnNumber: 37\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"right\",\n            style: {\n              backgroundImage: `url(\"/images/arrow_right.png\")`\n            },\n            onClick: () => this.nextProperty(this.state.Property, this.state.forecastElements),\n            disabled: this.state.Property.id === this.state.forecastElements.length - 3\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 583,\n            columnNumber: 37\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"main-cards\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"cards-slider\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"cards-slider-wrapper\",\n                style: {\n                  'transform': `translateX(-${this.state.Property.id * (100 / this.state.forecastElements.length)}%)`\n                },\n                children: this.state.content\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 593,\n                columnNumber: 45\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 592,\n              columnNumber: 41\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 591,\n            columnNumber: 37\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 569,\n          columnNumber: 33\n        }, this) : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 567,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 549,\n      columnNumber: 21\n    }, this);\n  }\n\n}\n\n;\nconst nightIcons = {\n  0: 230,\n  1: 300,\n  2: 310,\n  3: 500,\n  4: 520,\n  5: 600,\n  6: 612,\n  7: 615,\n  8: 620,\n  9: 800,\n  10: 801,\n  11: 802,\n  12: 803\n};\nconst weatherIcons = {\n  200: '/images/200.png',\n  201: '/images/201.png',\n  202: '/images/202.png',\n  210: '/images/210.png',\n  211: '/images/211.png',\n  212: '/images/212.png',\n  221: '/images/212.png',\n  230: '/images/230D.png',\n  1230: '/images/230N.png',\n  231: '/images/231.png',\n  232: '/images/232.png',\n  300: '/images/300D.png',\n  1300: '/images/300N.png',\n  301: '/images/301.png',\n  302: '/images/302.png',\n  310: '/images/310D.png',\n  1310: '/images/310N.png',\n  311: '/images/311.png',\n  312: '/images/312.png',\n  313: '/images/313_1.png',\n  314: '/images/314.png',\n  321: '/images/321.png',\n  500: '/images/500D.png',\n  1500: '/images/500N.png',\n  501: '/images/501.png',\n  502: '/images/502.png',\n  503: '/images/503.png',\n  504: '/images/504.png',\n  511: '/images/511.png',\n  520: '/images/520D.png',\n  1520: '/images/520N_1.png',\n  521: '/images/521_2.png',\n  522: '/images/522_1.png',\n  531: '/images/522_1.png',\n  600: '/images/600D.png',\n  1600: '/images/600N.png',\n  601: '/images/601.png',\n  602: '/images/602.png',\n  611: '/images/611.png',\n  612: '/images/612D.png',\n  1612: '/images/612N.png',\n  613: '/images/613.png',\n  615: '/images/615D.png',\n  1615: '/images/615N.png',\n  616: '/images/616.png',\n  620: '/images/620D.png',\n  1620: '/images/620N.png',\n  621: '/images/621.png',\n  622: '/images/622.png',\n  701: '/images/701_2.png',\n  711: '/images/701_2.png',\n  721: '/images/701_2.png',\n  731: '/images/701_2.png',\n  741: '/images/701_2.png',\n  751: '/images/701_2.png',\n  761: '/images/701_2.png',\n  762: '/images/701_2.png',\n  771: '/images/701_2.png',\n  781: '/images/701_2.png',\n  800: '/images/800D.png',\n  1800: '/images/800N.png',\n  801: '/images/801D.png',\n  1801: '/images/801N.png',\n  802: '/images/802D.png',\n  1802: '/images/802N.png',\n  803: '/images/803D.png',\n  1803: '/images/803N.png',\n  804: '/images/804.png'\n};\nconst airConditions = {\n  1: 'Bardzo dobra',\n  2: 'Dobra',\n  3: 'Średnia',\n  4: 'Zła',\n  5: 'Bardzo zła'\n};\nexport default CurrentWeather;","map":{"version":3,"sources":["C:/Users/vened/Desktop/Weather/my_weather/client/src/components/currentWeather/CurrentWeather.js"],"names":["React","WeatherItem","Form","CalDate","CalTime","CalCelsius","CalWindSpeed","ForecastDailyItem","ForecastHourlyItem","Line","API_key","CurrentWeather","Component","constructor","props","nextProperty","Property","Elements","newIndex","id","setState","console","log","prevProperty","defaultWeather","cityName","state","city","error","fetch","then","response","ok","Error","json","getForecastDaily","coord","lat","lon","getForecastHourly","getAirQuality","country","sys","date","dt","timezone","time","weather","description","temp","main","tempMax","temp_max","tempMin","temp_min","tempFeel","feels_like","pressure","wind","speed","image","weatherIcons","clouds","all","humidity","sunrise","sunset","background","i","nightIcons","catch","err","prevState","getWeather","e","preventDefault","value","typeF","forecastElements","daily","max","min","wind_speed","timezone_offset","tempData","tempTime","tempPress","tempHumid","hourly","dataTemperature","labels","datasets","label","data","fill","backgroundColor","borderColor","dataPressure","dataHumiity","inputHandler","target","setForecast","forecast","selectData","chartDataSource","aqi","undefined","pm2_5","pressurre","content","forecastHourlyElements","hourlyProperty","options","plugins","legend","display","color","maintainAspectRatio","scales","y","ticks","font","size","stepSize","beginAtZero","x","airConditions","list","components","componentDidMount","render","map","fde","backgroundImage","length"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport WeatherItem from './WeatherItem';\r\nimport Form from '../Form/Form'\r\nimport CalDate from '../Functions/CalDate';\r\nimport CalTime from '../Functions/CalTime';\r\nimport CalCelsius from '../Functions/CalCelsius';\r\nimport CalWindSpeed from '../Functions/CalWindSpeed';\r\nimport ForecastDailyItem from './ForecastDailyItem';\r\nimport ForecastHourlyItem from './ForecastHourlyItem';\r\nimport './Forecast.css';\r\nimport './CurrentWeather.css';\r\nimport { Line } from 'react-chartjs-2';\r\n\r\n\r\n\r\nconst API_key=\"157d33f8987d245bc6a1997408e90015\"\r\n//const localTime = new Date().toLocaleString()\r\n\r\nclass CurrentWeather extends React.Component\r\n{\r\n    constructor(props)\r\n    {\r\n        \r\n        super(props)\r\n        this.state=\r\n        {\r\n            value:\"\",\r\n            city:\"\",\r\n            country:\"\",\r\n            aqi:undefined,\r\n            pm2_5:undefined,\r\n            image:undefined,\r\n            background:undefined,\r\n            weather:undefined,\r\n            temp:undefined,\r\n            tempMax:undefined,\r\n            tempMin:undefined,\r\n            tempFeel:undefined,\r\n            pressurre:undefined,\r\n            wind:undefined,\r\n            lat:undefined,\r\n            lon:undefined,\r\n            clouds:undefined, \r\n            humidity:undefined,\r\n            sunrise:undefined,\r\n            sunset:undefined,\r\n            content:undefined,\r\n            forecastElements:[],\r\n            forecastHourlyElements:[],\r\n            Property: undefined,\r\n            hourlyProperty: undefined,\r\n            forecast:true,\r\n            error:false,\r\n            tempData:[],\r\n            tempPress:[],\r\n            tempHumid:[],\r\n            tempTime:[],\r\n            data :{\r\n                labels: [],\r\n                datasets: [\r\n                  {\r\n                    label: '',\r\n                    data: [],\r\n                    fill: false,\r\n                    backgroundColor: 'rgb(0, 0, 0)',\r\n                    borderColor: 'rgba(0, 0, 0, 0)',\r\n                  },\r\n                ],\r\n            },\r\n            dataTemperature :{\r\n                labels: [],\r\n                datasets: [\r\n                  {\r\n                    label: '',\r\n                    data: [],\r\n                    fill: false,\r\n                    backgroundColor: 'rgb(0, 0, 0)',\r\n                    borderColor: 'rgba(0, 0, 0, 0)',\r\n                  },\r\n                ],\r\n            },\r\n            dataPressure :{\r\n                labels: [],\r\n                datasets: [\r\n                  {\r\n                    label: '',\r\n                    data: [],\r\n                    fill: false,\r\n                    backgroundColor: 'rgb(0, 0, 0)',\r\n                    borderColor: 'rgba(0, 0, 0, 0)',\r\n                  },\r\n                ],\r\n            },\r\n            dataHumiity :{\r\n                labels: [],\r\n                datasets: [\r\n                  {\r\n                    label: '',\r\n                    data: [],\r\n                    fill: false,\r\n                    backgroundColor: 'rgb(0, 0, 0)',\r\n                    borderColor: 'rgba(0, 0, 0, 0)',\r\n                  },\r\n                ],\r\n            },\r\n            options : {\r\n                plugins: {\r\n                    legend: {\r\n                        display: true,\r\n                        labels: {\r\n                            color: 'black'\r\n                        }\r\n                    }\r\n                },\r\n                maintainAspectRatio: false,\r\n                scales: {\r\n                    y: {  \r\n                        ticks: {\r\n                          color: \"black\", \r\n                          font: {\r\n                            size: 10,\r\n                          },\r\n                          stepSize: 1,\r\n                          beginAtZero: true\r\n                        }\r\n                      },\r\n                      x: { \r\n                        ticks: {\r\n                          color: \"black\", \r\n                        \r\n                          font: {\r\n                            size: 14 \r\n                          },\r\n                          stepSize: 1,\r\n                          beginAtZero: true\r\n                        }\r\n                    }\r\n                },\r\n            }\r\n        }\r\n    }\r\n\r\n    \r\n    nextProperty = (Property,Elements) => \r\n    {\r\n        const newIndex = Property.id +1;\r\n\r\n        this.setState(\r\n        {\r\n            Property: Elements[newIndex]\r\n        });\r\n\r\n        console.log(newIndex);\r\n    };\r\n\r\n    prevProperty= (Property,Elements) => \r\n    {\r\n        const newIndex = Property.id -1;\r\n\r\n        this.setState(\r\n        {\r\n            Property: Elements[newIndex]\r\n        });\r\n    };\r\n\r\n    defaultWeather = (cityName) => \r\n    {\r\n        this.setState(state =>(\r\n        {\r\n            city:cityName,\r\n            error:false\r\n        }))\r\n        fetch(`http://api.openweathermap.org/data/2.5/weather?q=${cityName}&lang=pl&APPID=${API_key}`)\r\n        .then(response => \r\n        {\r\n            if(response.ok)\r\n            {\r\n                return response;\r\n            }\r\n                throw Error(\"Błąd pobierania danych z API\");\r\n        })\r\n        .then(response => response.json())\r\n        .then(response => \r\n        {\r\n\r\n            this.getForecastDaily(response.coord.lat,response.coord.lon)\r\n            this.getForecastHourly(response.coord.lat,response.coord.lon)\r\n            this.getAirQuality(response.coord.lat,response.coord.lon)\r\n            this.setState(state =>(\r\n            {\r\n                city:state.city,\r\n                country:response.sys.country,\r\n                date:CalDate(response.dt,response.timezone),\r\n                time:CalTime(response.dt,response.timezone),\r\n                timezone:response.timezone,\r\n                weather:response.weather[0].description,\r\n                temp:CalCelsius(response.main.temp),\r\n                tempMax:CalCelsius(response.main.temp_max),\r\n                tempMin:CalCelsius(response.main.temp_min),\r\n                tempFeel:CalCelsius(response.main.feels_like),\r\n                pressure:response.main.pressure,\r\n                wind:CalWindSpeed(response.wind.speed),\r\n                image:weatherIcons[response.weather[0].id],\r\n                lat:response.coord.lat,\r\n                lon:response.coord.lon,\r\n                clouds:response.clouds.all, \r\n                humidity:response.main.humidity,\r\n                sunrise:CalTime(response.sys.sunrise,response.timezone),\r\n                sunset:CalTime(response.sys.sunset,response.timezone),\r\n                background:\"/images/cloudyCity.jpg\",\r\n                error:false,\r\n            }))\r\n            for(var i=0; i<12;i++){\r\n                if((this.state.time>this.state.sunset) && (response.weather[0].id==nightIcons[i])){\r\n                    this.setState({\r\n                        image:weatherIcons[response.weather[0].id+1000],\r\n                    })\r\n                }\r\n              }\r\n        })\r\n        .catch(err =>\r\n        {\r\n            console.log(err)\r\n            this.setState(prevState =>\r\n            {\r\n                return{\r\n                error:true,\r\n                city:prevState.city\r\n            }})\r\n        })\r\n    };\r\n\r\n    getWeather = (e) =>\r\n    {\r\n        \r\n        e.preventDefault()\r\n          \r\n        fetch(`http://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&lang=pl&APPID=${API_key}`)\r\n        .then(response => \r\n        {\r\n            if(response.ok)\r\n            {\r\n                return response;\r\n            }\r\n                throw Error(\"Błąd pobierania danych z API\")\r\n        })\r\n        .then(response => response.json())\r\n        .then(response => \r\n        {\r\n            console.log(response)\r\n            this.setState(state =>(\r\n            {\r\n                city:state.value,\r\n                country:response.sys.country,\r\n                timezone:response.timezone,\r\n                date:CalDate(response.dt,response.timezone),\r\n                time:CalTime(response.dt,response.timezone),\r\n                weather:response.weather[0].description,\r\n                temp:CalCelsius(response.main.temp),\r\n                tempMax:CalCelsius(response.main.temp_max),\r\n                tempMin:CalCelsius(response.main.temp_min),\r\n                tempFeel:CalCelsius(response.main.feels_like),\r\n                pressure:response.main.pressure,\r\n                wind:CalWindSpeed(response.wind.speed),\r\n                image:weatherIcons[response.weather[0].id],\r\n                lat:response.coord.lat,\r\n                lon:response.coord.lon,\r\n                clouds:response.clouds.all, \r\n                humidity:response.main.humidity,\r\n                sunrise:CalTime(response.sys.sunrise,response.timezone),\r\n                sunset:CalTime(response.sys.sunset,response.timezone),\r\n                background:\"/images/cloudyCity.jpg\",\r\n                error:false\r\n              }))\r\n              for(var i=0; i<12;i++){\r\n                if((this.state.time>this.state.sunset) && (response.weather[0].id==nightIcons[i])){\r\n                    this.setState({\r\n                        image:weatherIcons[response.weather[0].id+1000],\r\n                    })\r\n                }\r\n              }\r\n              \r\n              this.getForecastDaily(response.coord.lat,response.coord.lon)\r\n              this.getForecastHourly(response.coord.lat,response.coord.lon)\r\n              this.getAirQuality(response.coord.lat,response.coord.lon)\r\n        })\r\n        .catch(err =>\r\n        {\r\n            console.log(err)\r\n            this.setState(prevState =>\r\n            {\r\n                return{\r\n                error:true,\r\n                city:prevState.city\r\n            }})\r\n        })\r\n    };\r\n\r\n    getAirQuality(lat,lon)\r\n    {\r\n        fetch(`http://api.openweathermap.org/data/2.5/air_pollution?lat=${lat}&lon=${lon}&appid=${API_key}`)\r\n        .then(response => \r\n        {\r\n            if(response.ok)\r\n            {\r\n                return response;\r\n            }\r\n                throw Error(\"Błąd pobierania danych z API\");\r\n          })\r\n        .then(response=> response.json())\r\n        .then(response => \r\n        {\r\n            this.setState(state =>(\r\n            {\r\n                aqi:airConditions[response.list[0].main.aqi],\r\n                pm2_5:response.list[0].components.pm2_5,\r\n                color:response.list[0].main.aqi,\r\n                error:false\r\n            }))\r\n        })\r\n        .catch(err =>\r\n        {\r\n            console.log(err)\r\n            this.setState(prevState =>\r\n            {\r\n                return{\r\n                error:true,\r\n                city:prevState.city\r\n            }})\r\n        })\r\n    };\r\n\r\n    getForecastDaily = (lat,lon,typeF)=>\r\n    {\r\n        this.setState(\r\n        {\r\n            forecastElements:[]\r\n        })\r\n        \r\n        fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&lang=pl&appid=${API_key}`)\r\n        .then(response => \r\n        {\r\n            if(response.ok)\r\n            {\r\n                return response;\r\n            }\r\n                throw Error(\"Błąd pobierania danych z API\");\r\n        })\r\n        .then(response => response.json())\r\n        .then(response => \r\n        {\r\n            for (var i = 0; i < 8; i++) \r\n            {\r\n                this.setState(\r\n                {\r\n                    forecastElements:[...this.state.forecastElements,\r\n                    {\r\n                        'id':i,\r\n                        'date':CalDate(response.daily[i].dt,this.state.timezone),\r\n                        'weather':response.daily[i].weather[0].description,\r\n                        'tempMax':CalCelsius(response.daily[i].temp.max),\r\n                        'tempMin':CalCelsius(response.daily[i].temp.min),\r\n                        'pressure':response.daily[i].pressure,\r\n                        'wind':CalWindSpeed(response.daily[i].wind_speed),\r\n                        'image':weatherIcons[response.daily[i].weather[0].id],\r\n                        'clouds':response.daily[i].clouds,\r\n                        'humidity':response.daily[i].humidity,\r\n                        'sunrise':CalTime(response.daily[i].sunrise,response.timezone_offset) ,\r\n                        'sunset':CalTime(response.daily[i].sunset,response.timezone_offset)\r\n                    }],\r\n                    \r\n                })\r\n            }\r\n            this.setState(\r\n            {\r\n                Property:this.state.forecastElements[0]\r\n            })  \r\n          })\r\n    };\r\n\r\n    getForecastHourly = (lat,lon)=>\r\n    {\r\n        this.setState(\r\n        {\r\n            forecastElements:[],\r\n            tempData:[],\r\n            tempTime:[],\r\n            tempPress:[],\r\n            tempHumid:[],\r\n        })\r\n\r\n        fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&lang=pl&appid=${API_key}`)\r\n        .then(response => \r\n        {\r\n            if(response.ok)\r\n            {\r\n                return response;\r\n            }\r\n                throw Error(\"Błąd pobierania danych z API\");\r\n        })\r\n        .then(response => response.json())\r\n        .then(response => \r\n        {\r\n            for (var i = 0; i < 48; i++) \r\n            {\r\n                this.setState(\r\n                {\r\n                    forecastElements:[...this.state.forecastElements,\r\n                    {\r\n                        'id':i,\r\n                        'date':CalDate(response.hourly[i].dt,this.state.timezone),\r\n                        'time':CalTime(response.hourly[i].dt,response.timezone_offset),\r\n                        'weather':response.hourly[i].weather[0].description,\r\n                        'temp':CalCelsius(response.hourly[i].temp),\r\n                        'tempFeel':CalCelsius(response.hourly[i].feels_like),\r\n                        'pressure':response.hourly[i].pressure,\r\n                        'humidity':response.hourly[i].humidity,\r\n                        'wind':CalWindSpeed(response.hourly[i].wind_speed),\r\n                        'image':weatherIcons[response.hourly[i].weather[0].id],\r\n                        'clouds':response.hourly[i].clouds,\r\n                    }],\r\n                    \r\n                    tempData:[...this.state.tempData,CalCelsius(response.hourly[i].temp)],\r\n                    tempTime:[...this.state.tempTime,CalTime(response.hourly[i].dt,response.timezone_offset)],\r\n                    tempPress:[...this.state.tempPress,response.hourly[i].pressure],\r\n                    tempHumid:[...this.state.tempHumid,response.hourly[i].humidity],\r\n                    \r\n                })\r\n            this.setState(\r\n            {\r\n                Property:this.state.forecastElements[0],\r\n            })\r\n            }\r\n            this.setState(\r\n            {\r\n                dataTemperature:{\r\n                    labels: this.state.tempTime,\r\n                    datasets: [\r\n                    {\r\n                        label: 'Temperatura:',\r\n                        data: this.state.tempData,\r\n                        fill: false,\r\n                        backgroundColor: 'rgb(209, 157, 12)',\r\n                        borderColor: 'rgb(0, 0, 0)',\r\n                    },\r\n                    ],\r\n                },\r\n                dataPressure:{\r\n                    labels: this.state.tempTime,\r\n                    datasets: [\r\n                    {\r\n                        label: 'Ciśnienie:',\r\n                        data: this.state.tempPress,\r\n                        fill: false,\r\n                        backgroundColor: 'rgb(209, 157, 12)',\r\n                        borderColor: 'rgb(0, 0, 0)',\r\n                    },\r\n                ],\r\n                },\r\n                dataHumiity:{\r\n                    labels: this.state.tempTime,\r\n                    datasets: [\r\n                    {\r\n                        label: 'Wilgotność:',\r\n                        data: this.state.tempHumid,\r\n                        fill: false,\r\n                        backgroundColor: 'rgb(209, 157, 12)',\r\n                        borderColor: 'rgb(0, 0, 0)',\r\n                    },\r\n                ],\r\n                }\r\n                \r\n            })\r\n            this.setState(\r\n            {\r\n                data:this.state.dataTemperature\r\n            })\r\n          })\r\n    };\r\n\r\n    inputHandler=(e)=>\r\n    {\r\n        this.setState(\r\n            {\r\n            value:e.target.value\r\n        })\r\n    };\r\n\r\n    componentDidMount()\r\n    {\r\n        this.defaultWeather(\"Warszawa\")\r\n    };\r\n\r\n    setForecast=()=>\r\n    {\r\n        if(this.state.forecast)\r\n        {\r\n            this.setState(\r\n            {\r\n                forecast:false,\r\n                Property:this.state.forecastElements[0]\r\n            })\r\n        }\r\n        else\r\n        {\r\n            this.setState(\r\n            {\r\n                forecast:true,\r\n                Property:this.state.forecastElements[0]\r\n            })\r\n        }\r\n    };\r\n\r\n    selectData = (chartDataSource) => {\r\n        if(chartDataSource==1)\r\n        {\r\n            this.setState({\r\n                data:this.state.dataTemperature\r\n            })\r\n        }\r\n        if(chartDataSource==2)\r\n        {\r\n            this.setState({\r\n                data:this.state.dataPressure\r\n            })\r\n        }\r\n        if(chartDataSource==3)\r\n        {\r\n            this.setState({\r\n                data:this.state.dataHumiity\r\n            })\r\n        }\r\n    };\r\n\r\n    render()\r\n    {\r\n        \r\n        if(this.state.forecast)\r\n        {\r\n            this.state.content = (\r\n                this.state.forecastElements.map(fde => <ForecastDailyItem key={fde.id} element={fde} />)\r\n            )\r\n        }else{\r\n            this.state.content = (\r\n                this.state.forecastElements.map(fde => <ForecastHourlyItem key={fde.id} element={fde} />)\r\n            )\r\n        }\r\n            return(\r\n                    <div className=\"main\"   style={\r\n                                            { \r\n                                                backgroundImage: `url(\"/images/bg.jpg\")` \r\n                                            }\r\n                    }>\r\n                        <div className=\"city-form\">\r\n                            <h1>Wyszukaj miasto dla którego chcesz sprawdzić obecne warunki pogodowe oraz prognozy pogody</h1>\r\n                            <Form \r\n                                value={this.state.value}  \r\n                                handler={this.inputHandler}\r\n                                submit={this.getWeather}\r\n                            /> \r\n                        </div> \r\n                        <div className=\"current-main\">\r\n                            {this.state.city ?(\r\n                                <WeatherItem element={this.state} selectD={this.selectData}/>   \r\n                            ):null}\r\n                        </div>\r\n                        <div className=\"forecast-main\">\r\n                            {this.state.Property ?( \r\n                                <div className=\"forecast-cards\" >\r\n                                    <button className=\"left\"    style={\r\n                                                                { \r\n                                                                backgroundImage: `url(\"/images/arrow_left.png\")` \r\n                                                                }}\r\n                                            onClick={() => this.prevProperty(this.state.Property,this.state.forecastElements)} \r\n                                            disabled={this.state.Property.id === 0}\r\n                                    >\r\n                                    </button>\r\n                                    <button className=\"swap-button\"\r\n                                        onClick={() => this.setForecast()} \r\n                                    >\r\n                                        GODZINOWA\r\n                                    </button>\r\n                                    <button className=\"right\"   style={\r\n                                                                { \r\n                                                                    backgroundImage: `url(\"/images/arrow_right.png\")` \r\n                                                                }}\r\n                                            onClick={() => this.nextProperty(this.state.Property,this.state.forecastElements)} \r\n                                            disabled={this.state.Property.id === this.state.forecastElements.length-3}\r\n                                        >\r\n                                    </button>\r\n                                    <div className=\"main-cards\">  \r\n                                        <div className=\"cards-slider\">         \r\n                                            <div className=\"cards-slider-wrapper\"   style={\r\n                                                                                    {\r\n                                                                                        'transform':`translateX(-${this.state.Property.id*(100/this.state.forecastElements.length)}%)`\r\n                                                                                    }\r\n                                            }>\r\n                                                {this.state.content}\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            ):null}\r\n                        </div>\r\n                    </div>\r\n                )\r\n        }\r\n};\r\nconst nightIcons = {\r\n    0:230,\r\n    1:300,\r\n    2:310,\r\n    3:500,\r\n    4:520,\r\n    5:600,\r\n    6:612,\r\n    7:615,\r\n    8:620,\r\n    9:800,\r\n    10:801,\r\n    11:802,\r\n    12:803\r\n}\r\nconst weatherIcons = \r\n{\r\n    200:'/images/200.png',\r\n    201:'/images/201.png',\r\n    202:'/images/202.png',\r\n    210:'/images/210.png',\r\n    211:'/images/211.png',\r\n    212:'/images/212.png',\r\n    221:'/images/212.png',\r\n    230:'/images/230D.png',\r\n    1230:'/images/230N.png',\r\n    231:'/images/231.png',\r\n    232:'/images/232.png',\r\n    300:'/images/300D.png',\r\n    1300:'/images/300N.png',\r\n    301:'/images/301.png',\r\n    302:'/images/302.png',\r\n    310:'/images/310D.png',\r\n    1310:'/images/310N.png',\r\n    311:'/images/311.png',\r\n    312:'/images/312.png',\r\n    313:'/images/313_1.png',\r\n    314:'/images/314.png',\r\n    321:'/images/321.png',\r\n    500:'/images/500D.png',\r\n    1500:'/images/500N.png',\r\n    501:'/images/501.png',\r\n    502:'/images/502.png',\r\n    503:'/images/503.png',\r\n    504:'/images/504.png',\r\n    511:'/images/511.png',\r\n    520:'/images/520D.png',\r\n    1520:'/images/520N_1.png',\r\n    521:'/images/521_2.png',\r\n    522:'/images/522_1.png',\r\n    531:'/images/522_1.png',\r\n    600:'/images/600D.png',\r\n    1600:'/images/600N.png',\r\n    601:'/images/601.png',\r\n    602:'/images/602.png',\r\n    611:'/images/611.png',\r\n    612:'/images/612D.png',\r\n    1612:'/images/612N.png',\r\n    613:'/images/613.png',\r\n    615:'/images/615D.png',\r\n    1615:'/images/615N.png',\r\n    616:'/images/616.png',\r\n    620:'/images/620D.png',\r\n    1620:'/images/620N.png',\r\n    621:'/images/621.png',\r\n    622:'/images/622.png',\r\n    701:'/images/701_2.png',\r\n    711:'/images/701_2.png',\r\n    721:'/images/701_2.png',\r\n    731:'/images/701_2.png',\r\n    741:'/images/701_2.png',\r\n    751:'/images/701_2.png',\r\n    761:'/images/701_2.png',\r\n    762:'/images/701_2.png',\r\n    771:'/images/701_2.png',\r\n    781:'/images/701_2.png',\r\n    800:'/images/800D.png',\r\n    1800:'/images/800N.png',\r\n    801:'/images/801D.png',\r\n    1801:'/images/801N.png',\r\n    802:'/images/802D.png',\r\n    1802:'/images/802N.png',\r\n    803:'/images/803D.png',\r\n    1803:'/images/803N.png',\r\n    804:'/images/804.png',\r\n};\r\n\r\nconst airConditions = \r\n{\r\n    1:'Bardzo dobra',\r\n    2:'Dobra',\r\n    3:'Średnia',\r\n    4:'Zła',\r\n    5:'Bardzo zła',\r\n};\r\n\r\nexport default CurrentWeather;"]},"metadata":{},"sourceType":"module"}