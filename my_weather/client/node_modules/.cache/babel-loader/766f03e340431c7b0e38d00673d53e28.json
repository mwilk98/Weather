{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vened\\\\Desktop\\\\Weather\\\\my_weather\\\\client\\\\src\\\\components\\\\Compare\\\\Compare.js\";\nimport React from 'react';\nimport Form from '../Form/Form';\nimport CalDate from '../Functions/CalDate';\nimport CalCelsius from '../Functions/CalCelsius';\nimport CalWindSpeed from '../Functions/CalWindSpeed';\nimport CompareCurrentWeatherItem from './CompareCurrentWeatherItem';\nimport CompareForecastItem from './CompareForecastItem';\nimport './Compare.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_key_OWM = \"157d33f8987d245bc6a1997408e90015\";\nconst API_key_WA = \"d42d0d989ead4316b9d143558213105\";\nconst API_key_w = \"4c7c27f8abf34ae09c61bad9a897be7e\";\n\nclass Compare extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.nextProperty = (Property, Elements) => {\n      const newIndex = Property.id + 1;\n      this.setState({\n        Property: Elements[newIndex]\n      });\n      console.log(newIndex);\n    };\n\n    this.prevProperty = (Property, Elements) => {\n      const newIndex = Property.id - 1;\n      this.setState({\n        Property: Elements[newIndex]\n      });\n    };\n\n    this.setSource = source => {\n      this.setState({\n        source: source\n      });\n\n      if (source === \"OpenWeatherMap\") {\n        this.getForecastDailyOWM(this.state.lat, this.state.lon);\n      }\n\n      if (source === \"WeatherApi\") {\n        this.getForecastDailyWA(this.state.city);\n      }\n\n      if (source === \"TomorrowIO\") {\n        this.getForecastDailyTI(this.state.lat, this.state.lon);\n      }\n\n      if (source === \"VisualCrossing\") {\n        this.getForecastDailyVC(this.state.city);\n      }\n\n      if (source === \"Weatherbit\") {\n        this.getForecastDailyWB(this.state.city);\n      }\n    };\n\n    this.getDefaultCompare = (e, city) => {\n      e.preventDefault();\n      console.log(city);\n      this.setState({\n        compareCurrentElements: []\n      });\n      const result = fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city}&lang=pl&APPID=${API_key_OWM}`).then(response => {\n        if (response.ok) {\n          return response;\n        }\n\n        throw Error(\"Błąd pobierania danych z API\");\n      }).then(response => response.json()).then(response => {\n        console.log(response);\n        this.getForecastDailyOWM(response.coord.lat, response.coord.lon);\n        this.getWeatherWeatherApi(city);\n        this.getWeatherTommorowIo(response.coord.lat, response.coord.lon);\n        this.getWeatherVisualcrossing(city);\n        this.getWeatherWeatherbit(city);\n        this.setState({\n          compareCurrentElements: [...this.state.compareCurrentElements, {\n            'id': 1,\n            'date': CalDate(response.dt),\n            'weather': response.weather[0].description,\n            'temp': CalCelsius(response.main.temp),\n            'pressure': response.main.pressure,\n            'wind': CalWindSpeed(response.wind.speed),\n            'image': weatherIcons[response.weather[0].id],\n            'source': \"OpenWeatherMap\"\n          }],\n          city: response.name,\n          lat: response.coord.lat,\n          lon: response.coord.lon,\n          weatherComp: response.weather[0].description,\n          tempComp: CalCelsius(response.main.temp),\n          pressureComp: response.main.pressure,\n          windComp: CalWindSpeed(response.wind.speed)\n        });\n        this.setState({\n          currentProperty: this.state.compareCurrentElements[0]\n        });\n        return fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city}&lang=pl&APPID=${API_key_OWM}`);\n      }).then(responseAirQuality => responseAirQuality.json()).catch(err => {\n        console.log(err);\n        this.setState(prevState => {\n          return {\n            error: true,\n            city: prevState.city\n          };\n        });\n      });\n      result.then(r => {\n        console.log(r.weather[0].id);\n        fetch(`http://localhost:3001/api/weather`, {\n          method: 'post',\n          body: JSON.stringify({\n            id: 200\n          }),\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        }).then(response => {\n          if (response.ok) {\n            return response;\n          }\n\n          throw Error(\"Błąd pobierania danych z API\");\n        }).then(response => response.json()).then(response => {\n          console.log(response);\n          console.log(this.state.compareCurrentElements[0]);\n          const newIds = this.state.compareCurrentElements.slice(); //copy the array\n\n          newIds[0].image = response[0].path; //execute the manipulations\n\n          this.setState({\n            compareCurrentElements: newIds\n          });\n        });\n      });\n    };\n\n    this.getWeatherCompare = e => {\n      e.preventDefault();\n      this.setState({\n        compareCurrentElements: []\n      });\n      const result = fetch(`http://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&lang=pl&APPID=${API_key_OWM}`).then(response => {\n        if (response.ok) {\n          return response;\n        }\n\n        throw Error(\"Błąd pobierania danych z API\");\n      }).then(response => response.json()).then(response => {\n        console.log(response);\n        this.getForecastDailyOWM(response.coord.lat, response.coord.lon);\n        this.getWeatherWeatherApi(this.state.value);\n        this.getWeatherTommorowIo(response.coord.lat, response.coord.lon);\n        this.getWeatherVisualcrossing(this.state.value);\n        this.getWeatherWeatherbit(this.state.value);\n        this.setState({\n          compareCurrentElements: [...this.state.compareCurrentElements, {\n            'id': 1,\n            'date': CalDate(response.dt),\n            'weather': response.weather[0].description,\n            'temp': CalCelsius(response.main.temp),\n            'pressure': response.main.pressure,\n            'wind': CalWindSpeed(response.wind.speed),\n            'image': weatherIcons[response.weather[0].id],\n            'source': \"OpenWeatherMap\"\n          }],\n          city: response.name,\n          lat: response.coord.lat,\n          lon: response.coord.lon,\n          weatherComp: response.weather[0].description,\n          tempComp: CalCelsius(response.main.temp),\n          pressureComp: response.main.pressure,\n          windComp: CalWindSpeed(response.wind.speed)\n        });\n        this.setState({\n          currentProperty: this.state.compareCurrentElements[0]\n        });\n        return fetch(`http://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&lang=pl&APPID=${API_key_OWM}`);\n      }).then(responseAirQuality => responseAirQuality.json()).catch(err => {\n        console.log(err);\n        this.setState(prevState => {\n          return {\n            error: true,\n            city: prevState.city\n          };\n        });\n      });\n      result.then(r => {\n        console.log(r.weather[0].id);\n        fetch(`http://localhost:3001/api/weather`, {\n          method: 'post',\n          body: JSON.stringify({\n            id: 200\n          }),\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        }).then(response => {\n          if (response.ok) {\n            return response;\n          }\n\n          throw Error(\"Błąd pobierania danych z API\");\n        }).then(response => response.json()).then(response => {\n          console.log(response);\n          console.log(this.state.compareCurrentElements[0]);\n          const newIds = this.state.compareCurrentElements.slice(); //copy the array\n\n          newIds[0].image = response[0].path; //execute the manipulations\n\n          this.setState({\n            compareCurrentElements: newIds\n          });\n        });\n      });\n    };\n\n    this.getForecastDailyOWM = (lat, lon) => {\n      console.log(lat);\n      this.setState({\n        ForecastDailyElements: []\n      });\n      fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&lang=pl&appid=${API_key_OWM}`).then(response => {\n        if (response.ok) {\n          return response;\n        }\n\n        throw Error(\"Błąd pobierania danych z API\");\n      }).then(response => response.json()).then(response => {\n        console.log(response);\n\n        for (var i = 0; i < 8; i++) {\n          this.setState({\n            ForecastDailyElements: [...this.state.ForecastDailyElements, {\n              'id': i,\n              'date': CalDate(response.daily[i].dt),\n              'weather': response.daily[i].weather[0].description,\n              'tempMax': CalCelsius(response.daily[i].temp.max),\n              'tempMin': CalCelsius(response.daily[i].temp.min),\n              'pressure': response.daily[i].pressure,\n              'wind': CalWindSpeed(response.daily[i].wind_speed),\n              'image': weatherIcons[response.daily[i].weather[0].id],\n              'clouds': response.daily[i].clouds,\n              'humidity': response.daily[i].humidity\n            }]\n          });\n        }\n\n        ;\n        this.setState({\n          Property: this.state.ForecastDailyElements[1]\n        });\n      });\n    };\n\n    this.getWeatherWeatherApi = city => {\n      fetch(`http://api.weatherapi.com/v1/current.json?key=${API_key_WA}&q=${city}&days=7&aqi=yes&alerts=yes&lang=pl`).then(response => {\n        if (response.ok) {\n          return response;\n        }\n\n        throw Error(\"Błąd pobierania danych z API\");\n      }).then(response => response.json()).then(response => {\n        console.log(response);\n        this.setState({\n          compareCurrentElements: [...this.state.compareCurrentElements, {\n            'id': 2,\n            'date': response.current.last_updated,\n            'weather': response.current.condition.text,\n            'temp': response.current.temp_c,\n            'pressure': response.current.pressure_mb,\n            'wind': response.current.wind_kph,\n            'image': weatherIcons[response.current.condition.code],\n            'source': \"WeatherApi\"\n          }]\n        });\n      }).catch(err => {\n        console.log(err);\n        this.setState(prevState => {\n          return {\n            error: true,\n            city: prevState.city\n          };\n        });\n      });\n    };\n\n    this.getForecastDailyWA = city => {\n      this.setState({\n        ForecastDailyElements: []\n      });\n      fetch(`http://api.weatherapi.com/v1/forecast.json?key=${API_key_WA}&q=${city}&days=4&aqi=yes&alerts=yes&lang=pl`).then(response => {\n        if (response.ok) {\n          return response;\n        }\n\n        throw Error(\"Błąd pobierania danych z API\");\n      }).then(response => response.json()).then(response => {\n        console.log(response);\n\n        for (var i = 0; i < 3; i++) {\n          this.setState({\n            ForecastDailyElements: [...this.state.ForecastDailyElements, {\n              'id': i,\n              'date': response.forecast.forecastday[i].date,\n              'weather': response.forecast.forecastday[i].day.condition.text,\n              'tempMax': response.forecast.forecastday[i].day.maxtemp_c,\n              'tempMin': response.forecast.forecastday[i].day.mintemp_c,\n              'pressure': \"-\",\n              'wind': \"-\",\n              'image': weatherIcons[response.forecast.forecastday[i].day.condition.code],\n              'clouds': \"-\",\n              'humidity': response.forecast.forecastday[i].day.avghumidity\n            }]\n          });\n        }\n\n        this.setState({\n          Property: this.state.ForecastDailyElements[1]\n        });\n      }).catch(err => {\n        console.log(err);\n        this.setState(prevState => {\n          return {\n            error: true,\n            city: prevState.city\n          };\n        });\n      });\n    };\n\n    this.getWeatherTommorowIo = (lat, lon) => {\n      this.setState({\n        ForecastDailyElements: []\n      });\n      fetch(`https://api.tomorrow.io/v4/timelines?location=${lat},${lon}&fields=temperature,humidity,windSpeed,cloudCover,weatherCode,pressureSurfaceLevel&timesteps=1d&units=metric&apikey=Xsa59kYGGrHiXs1TZ3cItU7zRZ4FfGQ8\n        `).then(response => {\n        if (response.ok) {\n          return response;\n        }\n\n        throw Error(\"Błąd pobierania danych z API\");\n      }).then(response => response.json()).then(response => {\n        console.log(response);\n        this.setState({\n          compareCurrentElements: [...this.state.compareCurrentElements, {\n            'id': 3,\n            'date': response.data.timelines[0].startTime,\n            'weather': weatherConditions[response.data.timelines[0].intervals[0].values.weatherCode],\n            'temp': response.data.timelines[0].intervals[0].values.temperature,\n            'pressure': response.data.timelines[0].intervals[0].values.pressureSurfaceLevel,\n            'wind': CalWindSpeed(response.data.timelines[0].intervals[0].values.windSpeed),\n            'image': weatherIcons[response.data.timelines[0].intervals[0].values.weatherCode],\n            'source': \"TommorowIo\"\n          }]\n        });\n      }).catch(err => {\n        console.log(err);\n        this.setState(prevState => {\n          return {\n            error: true,\n            city: prevState.city\n          };\n        });\n      });\n    };\n\n    this.getForecastDailyTI = (lat, lon) => {\n      this.setState({\n        ForecastDailyElements: []\n      });\n      fetch(`https://api.tomorrow.io/v4/timelines?location=${lat},${lon}&fields=temperature,humidity,windSpeed,cloudCover,weatherCode,pressureSurfaceLevel&timesteps=1d&units=metric&apikey=Xsa59kYGGrHiXs1TZ3cItU7zRZ4FfGQ8\n        `).then(response => {\n        if (response.ok) {\n          return response;\n        }\n\n        throw Error(\"Błąd pobierania danych z API\");\n      }).then(response => response.json()).then(response => {\n        console.log(response);\n\n        for (var i = 0; i < 8; i++) {\n          this.setState({\n            ForecastDailyElements: [...this.state.ForecastDailyElements, {\n              'id': i,\n              'date': response.data.timelines[0].intervals[i].startTime,\n              'weather': weatherConditions[response.data.timelines[0].intervals[i].values.weatherCode],\n              'tempMax': response.data.timelines[0].intervals[i].values.temperature,\n              'tempMin': response.data.timelines[0].intervals[i].values.temperature,\n              'pressure': response.data.timelines[0].intervals[i].values.pressureSurfaceLevel,\n              'wind': response.data.timelines[0].intervals[i].values.windSpeed,\n              'image': weatherIcons[response.data.timelines[0].intervals[i].values.weatherCode],\n              'clouds': response.data.timelines[0].intervals[i].values.cloudCover,\n              'humidity': response.data.timelines[0].intervals[i].values.humidity\n            }]\n          });\n        }\n\n        this.setState({\n          Property: this.state.ForecastDailyElements[1]\n        });\n      }).catch(err => {\n        console.log(err);\n        this.setState(prevState => {\n          return {\n            error: true,\n            city: prevState.city\n          };\n        });\n      });\n    };\n\n    this.getWeatherVisualcrossing = city => {\n      this.setState({\n        ForecastDailyElements: []\n      });\n      fetch(`https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/weatherdata/forecast?aggregateHours=24&combinationMethod=aggregate&contentType=json&unitGroup=metric&locationMode=single&iconSet=icons2&key=LHKNDUGQ4MSQTL5749JVGX4XV&dataElements=default&locations=${city}\n        `).then(response => {\n        if (response.ok) {\n          return response;\n        }\n\n        throw Error(\"Błąd pobierania danych z API\");\n      }).then(response => response.json()).then(response => {\n        console.log(response);\n        this.setState({\n          compareCurrentElements: [...this.state.compareCurrentElements, {\n            'id': 4,\n            'date': response.location.currentConditions.datetime,\n            'weather': response.location.currentConditions.icon,\n            'temp': response.location.currentConditions.temp,\n            'pressure': response.location.currentConditions.sealevelpressure,\n            'wind': response.location.currentConditions.wspd,\n            'image': weatherIcons[0],\n            'source': \"VisualCrossing\"\n          }]\n        });\n      }).catch(err => {\n        console.log(err);\n        this.setState(prevState => {\n          return {\n            error: true,\n            city: prevState.city\n          };\n        });\n      });\n    };\n\n    this.getForecastDailyVC = city => {\n      this.setState({\n        ForecastDailyElements: []\n      });\n      fetch(`https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/weatherdata/forecast?aggregateHours=24&combinationMethod=aggregate&contentType=json&unitGroup=metric&locationMode=single&iconSet=icons2&key=LHKNDUGQ4MSQTL5749JVGX4XV&dataElements=default&locations=${city}\n        `).then(response => {\n        if (response.ok) {\n          return response;\n        }\n\n        throw Error(\"Błąd pobierania danych z API\");\n      }).then(response => response.json()).then(response => {\n        console.log(response);\n\n        for (var i = 0; i < 8; i++) {\n          this.setState({\n            ForecastDailyElements: [...this.state.ForecastDailyElements, {\n              'id': i,\n              'date': CalDate(response.location.values[i].datetime),\n              'weather': response.location.values[i].conditions,\n              'tempMax': response.location.values[i].maxt,\n              'tempMin': response.location.values[i].mint,\n              'pressure': \"-\",\n              'wind': 1.6 * response.location.values[i].wspd,\n              'image': \"-\",\n              'clouds': response.location.values[i].cloudcover,\n              'humidity': response.location.values[i].humidity\n            }]\n          });\n        }\n\n        this.setState({\n          Property: this.state.ForecastDailyElements[1]\n        });\n      }).catch(err => {\n        console.log(err);\n        this.setState(prevState => {\n          return {\n            error: true,\n            city: prevState.city\n          };\n        });\n      });\n    };\n\n    this.getWeatherWeatherbit = city => {\n      this.setState({\n        ForecastDailyElements: []\n      });\n      fetch(` https://api.weatherbit.io/v2.0/forecast/daily?city=${city}&lang=pl&key=${API_key_w}\n        `).then(response => {\n        if (response.ok) {\n          return response;\n        }\n\n        throw Error(\"Błąd pobierania danych z API\");\n      }).then(response => response.json()).then(response => {\n        console.log(response);\n        this.setState({\n          compareCurrentElements: [...this.state.compareCurrentElements, {\n            'id': 5,\n            'date': response.data[0].ob_time,\n            'weather': response.data[0].weather.description,\n            'temp': response.data[0].temp,\n            'pressure': Math.floor(response.data[0].pres),\n            'wind': Math.floor(1.609 * response.data[0].wind_spd),\n            'image': weatherIcons[response.data[0].weather.code],\n            'source': \"Weatherbit\"\n          }]\n        });\n      }).catch(err => {\n        console.log(err);\n        this.setState(prevState => {\n          return {\n            error: true,\n            city: prevState.city\n          };\n        });\n      });\n    };\n\n    this.getForecastDailyWB = city => {\n      this.setState({\n        ForecastDailyElements: []\n      });\n      fetch(` https://api.weatherbit.io/v2.0/forecast/daily?city=${city}&lang=pl&key=${API_key_w}\n        `).then(response => {\n        if (response.ok) {\n          return response;\n        }\n\n        throw Error(\"Błąd pobierania danych z API\");\n      }).then(response => response.json()).then(response => {\n        console.log(response);\n\n        for (var i = 0; i < 8; i++) {\n          this.setState({\n            ForecastDailyElements: [...this.state.ForecastDailyElements, {\n              'id': i,\n              'date': response.data[i].datetime,\n              'weather': response.data[i].weather.description,\n              'tempMax': response.data[i].max_temp,\n              'tempMin': response.data[i].min_temp,\n              'pressure': response.data[i].pres,\n              'wind': Math.floor(1.609 * response.data[i].wind_spd),\n              'image': weatherIcons[response.data[i].weather.code],\n              'clouds': response.data[i].clouds,\n              'humidity': \"-\"\n            }]\n          });\n        }\n\n        this.setState({\n          Property: this.state.ForecastDailyElements[1]\n        });\n      }).catch(err => {\n        console.log(err);\n        this.setState(prevState => {\n          return {\n            error: true,\n            city: prevState.city\n          };\n        });\n      });\n    };\n\n    this.inputHandler = e => {\n      this.setState({\n        value: e.target.value\n      });\n    };\n\n    this.state = {\n      value: \"\",\n      compareCurrentElements: [],\n      ForecastDailyElements: [],\n      ForecastDailyElements: [],\n      source: \"OpenWeatherMap\",\n      city: undefined,\n      lat: undefined,\n      lon: undefined,\n      currentProperty: undefined,\n      Property: undefined,\n      Property: undefined,\n      weatherComp: undefined,\n      tempComp: undefined,\n      pressureComp: undefined,\n      windComp: undefined,\n      error: false\n    };\n  }\n\n  componentDidMount() {\n    this.getDefaultCompare(\"Warszawa\");\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        backgroundImage: `url(\"/images/bg_comp.jpg\")`\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"city-form\",\n        children: /*#__PURE__*/_jsxDEV(Form, {\n          value: this.state.value,\n          handler: this.inputHandler,\n          submit: this.getWeatherCompare\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 705,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 704,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"compare-main-cards\",\n        children: this.state.currentProperty ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"compare-cards-slider\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"compare-cards-slider-wrapper\",\n            style: {\n              'transform': `translateX(-${this.state.currentProperty.id * (100 / this.state.compareCurrentElements.length)}%)`\n            },\n            children: this.state.compareCurrentElements.map(fde => /*#__PURE__*/_jsxDEV(CompareCurrentWeatherItem, {\n              compare: this.state,\n              element: fde\n            }, fde.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 717,\n              columnNumber: 75\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 714,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 713,\n          columnNumber: 21\n        }, this) : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 711,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.setSource(\"OpenWeatherMap\"),\n        children: \"OpenWeatherMap\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 723,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.setSource(\"WeatherApi\"),\n        children: \"WeatherApi\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 727,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.setSource(\"TommorowIO\"),\n        children: \"TommorowIO\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 731,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.setSource(\"VisualCrossing\"),\n        children: \"VisualCrossing\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 735,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.setSource(\"Weatherbit\"),\n        children: \"Weatherbit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 739,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"compare-main\",\n        children: this.state.Property ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"main-cards\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"left\",\n            onClick: () => this.nextProperty(this.state.Property, this.state.ForecastDailyElements),\n            disabled: this.state.Property.id === this.state.ForecastDailyElements.length - 3,\n            children: \"Next\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 746,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"right\",\n            onClick: () => this.prevProperty(this.state.Property, this.state.ForecastDailyElements),\n            disabled: this.state.Property.id === 1,\n            children: \"Prev\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 751,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"cards-slider\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"cards-slider-wrapper\",\n              style: {\n                'transform': `translateX(-${this.state.Property.id * (100 / this.state.ForecastDailyElements.length)}%)`\n              },\n              children: this.state.ForecastDailyElements.map(fde => /*#__PURE__*/_jsxDEV(CompareForecastItem, {\n                element: fde\n              }, fde.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 760,\n                columnNumber: 86\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 757,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 756,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 745,\n          columnNumber: 17\n        }, this) : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 743,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 701,\n      columnNumber: 21\n    }, this);\n  }\n\n}\n\nconst weatherIcons = {\n  200: '/images/200.png',\n  201: '/images/201.png',\n  202: '/images/202.png',\n  210: '/images/210.png',\n  211: '/images/211.png',\n  212: '/images/212.png',\n  221: '/images/212.png',\n  230: '/images/230D.png',\n  231: '/images/231.png',\n  232: '/images/232.png',\n  300: '/images/300D.png',\n  301: '/images/301.png',\n  302: '/images/302.png',\n  310: '/images/310D.png',\n  311: '/images/311.png',\n  312: '/images/312.png',\n  313: '/images/313_1.png',\n  314: '/images/314.png',\n  321: '/images/321.png',\n  500: '/images/500D.png',\n  501: '/images/501.png',\n  502: '/images/502.png',\n  503: '/images/503.png',\n  504: '/images/504.png',\n  511: '/images/511.png',\n  520: '/images/520D.png',\n  521: '/images/521_2.png',\n  522: '/images/522_1.png',\n  531: '/images/522_1.png',\n  600: '/images/600D.png',\n  601: '/images/601.png',\n  602: '/images/602.png',\n  611: '/images/611.png',\n  612: '/images/612D.png',\n  613: '/images/613.png',\n  615: '/images/615D.png',\n  616: '/images/616.png',\n  620: '/images/620D.png',\n  621: '/images/621.png',\n  622: '/images/622.png',\n  701: '/images/701_2.png',\n  711: '/images/701_2.png',\n  721: '/images/701_2.png',\n  731: '/images/701_2.png',\n  741: '/images/701_2.png',\n  751: '/images/701_2.png',\n  761: '/images/701_2.png',\n  762: '/images/701_2.png',\n  771: '/images/701_2.png',\n  781: '/images/701_2.png',\n  800: '/images/800D.png',\n  801: '/images/801D.png',\n  802: '/images/802D.png',\n  803: '/images/803D.png',\n  804: '/images/804.png',\n  1000: '/images/800D.png',\n  1003: '/images/801D.png',\n  1006: '/images/802D.png',\n  1009: '/images/804.png',\n  1030: '/images/701_2.png',\n  1063: '/images/500D.png',\n  1066: '/images/600.png',\n  1069: '/images/613.png',\n  1072: '/images/511.png',\n  1087: '/images/200.png',\n  1114: '/images/602.png',\n  1117: '/images/622.png',\n  1135: '/images/702_1.png',\n  1147: '/images/702_1.png',\n  1150: '/images/300D.png',\n  1153: '/images/301.png',\n  1168: '/images/511.png',\n  1171: '/images/501.png',\n  1180: '/images/502.png',\n  1183: '/images/500D.png',\n  1186: '/images/500D.png',\n  1189: '/images/501.png',\n  1192: '/images/502.png',\n  1195: '/images/503.png',\n  1198: '/images/511.png',\n  1201: '/images/511.png',\n  1204: '/images/611.png',\n  1207: '/images/612D.png',\n  1210: '/images/600D.png',\n  1213: '/images/600D.png',\n  1216: '/images/601.png',\n  1219: '/images/601.png',\n  1222: '/images/602.png',\n  1225: '/images/602.png',\n  1237: '/images/511.png',\n  1240: '/images/520.png',\n  1243: '/images/521_2.png',\n  1246: '/images/522_1.png',\n  1249: '/images/612D.png',\n  1252: '/images/613.png',\n  1255: '/images/612D.png',\n  1258: '/images/613.png',\n  1261: '/images/511.png',\n  1264: '/images/511.png',\n  1273: '/images/200.png',\n  1276: '/images/201.png',\n  1279: '/images/602.png',\n  1282: '/images/602.png',\n  4201: '/images/502.png',\n  4001: '/images/501.png',\n  4200: '/images/500D.png',\n  6201: '/images/511.png',\n  6001: '/images/511.png',\n  6200: '/images/511.png',\n  6000: '/images/511.png',\n  4000: '/images/301.png',\n  7101: '/images/511.png',\n  7000: '/images/511.png',\n  7102: '/images/511.png',\n  5101: '/images/602.png',\n  5000: '/images/601.png',\n  5100: '/images/600D.png',\n  5001: '/images/601.png',\n  8000: '/images/201.png',\n  2100: '/images/701_2.png',\n  2000: '/images/701_2.png',\n  1001: '/images/804.png',\n  1102: '/images/803D.png',\n  1101: '/images/802D.png',\n  1100: '/images/801D.png'\n};\nconst weatherConditions = {\n  4201: 'Duży deszcz',\n  4001: 'Deszcz',\n  4200: 'Lekki Deszcz',\n  6201: 'Duży Marznący Deszcz',\n  6001: 'Marznący Deszcz',\n  6200: 'Lekki Marznący Deszcz',\n  6000: 'Marznąca Mrzawka',\n  4000: 'Mrzawka',\n  7101: 'Duże Krupy',\n  7000: 'Krupy',\n  7102: 'Lekkie Krupy',\n  5101: 'Duży Śnieg',\n  5000: 'Śnieg',\n  5100: 'Lekki Śnieg',\n  5001: 'Zamieć',\n  8000: 'Burza',\n  2100: 'Lekka Mgła',\n  2000: 'Mgła',\n  1001: 'Pochmurnie',\n  1102: 'Przewaga Chmur',\n  1101: 'Częściowe Zachmurzenie',\n  1100: 'Przeważnie Słonecznie',\n  1000: 'Słonecznie'\n};\nexport default Compare;","map":{"version":3,"sources":["C:/Users/vened/Desktop/Weather/my_weather/client/src/components/Compare/Compare.js"],"names":["React","Form","CalDate","CalCelsius","CalWindSpeed","CompareCurrentWeatherItem","CompareForecastItem","API_key_OWM","API_key_WA","API_key_w","Compare","Component","constructor","props","nextProperty","Property","Elements","newIndex","id","setState","console","log","prevProperty","setSource","source","getForecastDailyOWM","state","lat","lon","getForecastDailyWA","city","getForecastDailyTI","getForecastDailyVC","getForecastDailyWB","getDefaultCompare","e","preventDefault","compareCurrentElements","result","fetch","then","response","ok","Error","json","coord","getWeatherWeatherApi","getWeatherTommorowIo","getWeatherVisualcrossing","getWeatherWeatherbit","dt","weather","description","main","temp","pressure","wind","speed","weatherIcons","name","weatherComp","tempComp","pressureComp","windComp","currentProperty","responseAirQuality","catch","err","prevState","error","r","method","body","JSON","stringify","headers","newIds","slice","image","path","getWeatherCompare","value","ForecastDailyElements","i","daily","max","min","wind_speed","clouds","humidity","current","last_updated","condition","text","temp_c","pressure_mb","wind_kph","code","forecast","forecastday","date","day","maxtemp_c","mintemp_c","avghumidity","data","timelines","startTime","weatherConditions","intervals","values","weatherCode","temperature","pressureSurfaceLevel","windSpeed","cloudCover","location","currentConditions","datetime","icon","sealevelpressure","wspd","conditions","maxt","mint","cloudcover","ob_time","Math","floor","pres","wind_spd","max_temp","min_temp","inputHandler","target","undefined","componentDidMount","render","backgroundImage","length","map","fde"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport Form from '../Form/Form'\r\nimport CalDate from '../Functions/CalDate';\r\nimport CalCelsius from '../Functions/CalCelsius';\r\nimport CalWindSpeed from '../Functions/CalWindSpeed';\r\nimport CompareCurrentWeatherItem from './CompareCurrentWeatherItem';\r\nimport CompareForecastItem from './CompareForecastItem';\r\n\r\nimport './Compare.css';\r\n\r\nconst API_key_OWM=\"157d33f8987d245bc6a1997408e90015\";\r\nconst API_key_WA = \"d42d0d989ead4316b9d143558213105\";\r\nconst API_key_w = \"4c7c27f8abf34ae09c61bad9a897be7e\";\r\n\r\nclass Compare extends React.Component\r\n{\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.state=\r\n        {\r\n            value:\"\",\r\n            compareCurrentElements:[\r\n            ],\r\n            ForecastDailyElements:[\r\n            ],\r\n            ForecastDailyElements:[\r\n            ],\r\n            source:\"OpenWeatherMap\",\r\n            city:undefined,\r\n            lat:undefined,\r\n            lon:undefined,\r\n            currentProperty:undefined,\r\n            Property:undefined,\r\n            Property:undefined,\r\n            weatherComp:undefined,\r\n            tempComp:undefined,\r\n            pressureComp:undefined,\r\n            windComp:undefined,\r\n            error:false\r\n        };\r\n    };\r\n\r\n    nextProperty = (Property,Elements) => \r\n    {\r\n        const newIndex = Property.id +1;\r\n\r\n        this.setState(\r\n        {\r\n            Property: Elements[newIndex]\r\n        });\r\n\r\n        console.log(newIndex);\r\n    };\r\n\r\n    prevProperty= (Property,Elements) => \r\n    {\r\n        const newIndex = Property.id -1;\r\n\r\n        this.setState(\r\n        {\r\n            Property: Elements[newIndex]\r\n        });\r\n    };\r\n    setSource = (source) => \r\n    {\r\n        this.setState(\r\n        {\r\n                source:source\r\n        });\r\n\r\n        if(source===\"OpenWeatherMap\")\r\n        {\r\n            this.getForecastDailyOWM(this.state.lat,this.state.lon);\r\n        }\r\n\r\n        if(source===\"WeatherApi\")\r\n        {\r\n            this.getForecastDailyWA(this.state.city);\r\n        }\r\n\r\n        if(source===\"TomorrowIO\")\r\n        {\r\n            this.getForecastDailyTI(this.state.lat,this.state.lon);\r\n        }\r\n\r\n        if(source===\"VisualCrossing\")\r\n        {\r\n            this.getForecastDailyVC(this.state.city);\r\n        }\r\n\r\n        if(source===\"Weatherbit\")\r\n        {\r\n            this.getForecastDailyWB(this.state.city);\r\n        }\r\n    };\r\n\r\n    getDefaultCompare = (e,city) =>\r\n    {\r\n        e.preventDefault()\r\n        console.log(city)\r\n        \r\n        this.setState(\r\n        {\r\n            compareCurrentElements:[]\r\n        });\r\n        \r\n        const result = fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city}&lang=pl&APPID=${API_key_OWM}`)\r\n        .then(response => {\r\n            if(response.ok){\r\n                return response\r\n            }\r\n            throw Error(\"Błąd pobierania danych z API\")\r\n        })\r\n        .then(response => response.json())\r\n        .then(response => {\r\n            console.log(response)\r\n            this.getForecastDailyOWM(response.coord.lat,response.coord.lon)\r\n            this.getWeatherWeatherApi(city)\r\n            this.getWeatherTommorowIo(response.coord.lat,response.coord.lon)\r\n            this.getWeatherVisualcrossing(city)\r\n            this.getWeatherWeatherbit(city)\r\n            this.setState({\r\n                compareCurrentElements:[...this.state.compareCurrentElements,{\r\n                    'id':1,\r\n                    'date':CalDate(response.dt),\r\n                    'weather':response.weather[0].description,\r\n                    'temp':CalCelsius(response.main.temp),\r\n                    'pressure':response.main.pressure,\r\n                    'wind':CalWindSpeed(response.wind.speed),\r\n                    'image':weatherIcons[response.weather[0].id],\r\n                    'source':\"OpenWeatherMap\"\r\n                }],\r\n                city:response.name,\r\n                lat:response.coord.lat,\r\n                lon:response.coord.lon,\r\n                weatherComp:response.weather[0].description,\r\n                tempComp:CalCelsius(response.main.temp),\r\n                pressureComp:response.main.pressure,\r\n                windComp:CalWindSpeed(response.wind.speed),\r\n            });\r\n            this.setState(\r\n            {\r\n                currentProperty:this.state.compareCurrentElements[0]\r\n            }); \r\n\r\n            return fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city}&lang=pl&APPID=${API_key_OWM}`);\r\n        })\r\n        .then(responseAirQuality => responseAirQuality.json()) \r\n        .catch(err =>{\r\n            console.log(err);\r\n            this.setState(prevState =>\r\n            {\r\n                return{\r\n                error:true,\r\n                city:prevState.city\r\n                }\r\n            });\r\n        });\r\n\r\n        result.then(r =>\r\n        {\r\n            console.log(r.weather[0].id);\r\n            \r\n            fetch(`http://localhost:3001/api/weather`,\r\n            {\r\n                method: 'post',\r\n                body: JSON.stringify({id: 200}),\r\n                headers: {'Content-Type': 'application/json'}})\r\n            .then(response => \r\n            {\r\n                if(response.ok)\r\n                {\r\n                    return response;\r\n                }\r\n                throw Error(\"Błąd pobierania danych z API\");\r\n            })\r\n            .then(response => response.json())\r\n            .then(response => \r\n            {\r\n                console.log(response);\r\n                console.log(this.state.compareCurrentElements[0]);\r\n                const newIds = this.state.compareCurrentElements.slice(); //copy the array\r\n                newIds[0].image = response[0].path; //execute the manipulations\r\n                this.setState(\r\n                {\r\n                    compareCurrentElements: newIds\r\n                });\r\n            });\r\n        });\r\n    };\r\n    getWeatherCompare = (e) =>\r\n    {\r\n        e.preventDefault()\r\n        \r\n        this.setState(\r\n        {\r\n            compareCurrentElements:[]\r\n        });\r\n        \r\n        const result = fetch(`http://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&lang=pl&APPID=${API_key_OWM}`)\r\n        .then(response => {\r\n            if(response.ok){\r\n                return response\r\n            }\r\n            throw Error(\"Błąd pobierania danych z API\")\r\n        })\r\n        .then(response => response.json())\r\n        .then(response => {\r\n            console.log(response)\r\n            this.getForecastDailyOWM(response.coord.lat,response.coord.lon)\r\n            this.getWeatherWeatherApi(this.state.value)\r\n            this.getWeatherTommorowIo(response.coord.lat,response.coord.lon)\r\n            this.getWeatherVisualcrossing(this.state.value)\r\n            this.getWeatherWeatherbit(this.state.value)\r\n            this.setState({\r\n                compareCurrentElements:[...this.state.compareCurrentElements,{\r\n                    'id':1,\r\n                    'date':CalDate(response.dt),\r\n                    'weather':response.weather[0].description,\r\n                    'temp':CalCelsius(response.main.temp),\r\n                    'pressure':response.main.pressure,\r\n                    'wind':CalWindSpeed(response.wind.speed),\r\n                    'image':weatherIcons[response.weather[0].id],\r\n                    'source':\"OpenWeatherMap\"\r\n                }],\r\n                city:response.name,\r\n                lat:response.coord.lat,\r\n                lon:response.coord.lon,\r\n                weatherComp:response.weather[0].description,\r\n                tempComp:CalCelsius(response.main.temp),\r\n                pressureComp:response.main.pressure,\r\n                windComp:CalWindSpeed(response.wind.speed),\r\n            });\r\n            this.setState(\r\n            {\r\n                currentProperty:this.state.compareCurrentElements[0]\r\n            }); \r\n\r\n            return fetch(`http://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&lang=pl&APPID=${API_key_OWM}`);\r\n        })\r\n        .then(responseAirQuality => responseAirQuality.json()) \r\n        .catch(err =>{\r\n            console.log(err);\r\n            this.setState(prevState =>\r\n            {\r\n                return{\r\n                error:true,\r\n                city:prevState.city\r\n                }\r\n            });\r\n        });\r\n\r\n        result.then(r =>\r\n        {\r\n            console.log(r.weather[0].id);\r\n            \r\n            fetch(`http://localhost:3001/api/weather`,\r\n            {\r\n                method: 'post',\r\n                body: JSON.stringify({id: 200}),\r\n                headers: {'Content-Type': 'application/json'}})\r\n            .then(response => \r\n            {\r\n                if(response.ok)\r\n                {\r\n                    return response;\r\n                }\r\n                throw Error(\"Błąd pobierania danych z API\");\r\n            })\r\n            .then(response => response.json())\r\n            .then(response => \r\n            {\r\n                console.log(response);\r\n                console.log(this.state.compareCurrentElements[0]);\r\n                const newIds = this.state.compareCurrentElements.slice(); //copy the array\r\n                newIds[0].image = response[0].path; //execute the manipulations\r\n                this.setState(\r\n                {\r\n                    compareCurrentElements: newIds\r\n                });\r\n            });\r\n        });\r\n    };\r\n\r\n    getForecastDailyOWM = (lat,lon)=>\r\n    {\r\n        console.log(lat);\r\n\r\n        this.setState({\r\n            ForecastDailyElements:[]\r\n        });\r\n        \r\n        fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&lang=pl&appid=${API_key_OWM}`)\r\n        .then(response => \r\n        {\r\n            if(response.ok)\r\n            {\r\n                return response;\r\n            }\r\n              throw Error(\"Błąd pobierania danych z API\");\r\n        })\r\n        .then(response => response.json())\r\n        .then(response => \r\n        {\r\n            console.log(response);\r\n            for (var i = 0; i < 8; i++) \r\n            {\r\n                this.setState(\r\n                {\r\n                    ForecastDailyElements:[...this.state.ForecastDailyElements,\r\n                    {\r\n                        'id':i,\r\n                        'date':CalDate(response.daily[i].dt),\r\n                        'weather':response.daily[i].weather[0].description,\r\n                        'tempMax':CalCelsius(response.daily[i].temp.max),\r\n                        'tempMin':CalCelsius(response.daily[i].temp.min),\r\n                        'pressure':response.daily[i].pressure,\r\n                        'wind':CalWindSpeed(response.daily[i].wind_speed),\r\n                        'image':weatherIcons[response.daily[i].weather[0].id],\r\n                        'clouds':response.daily[i].clouds,\r\n                        'humidity':response.daily[i].humidity,\r\n                    }],  \r\n                });\r\n            };  \r\n            this.setState(\r\n            {\r\n                Property:this.state.ForecastDailyElements[1]\r\n            });\r\n        });\r\n    };\r\n    getWeatherWeatherApi = (city) =>\r\n    {\r\n            \r\n        fetch(`http://api.weatherapi.com/v1/current.json?key=${API_key_WA}&q=${city}&days=7&aqi=yes&alerts=yes&lang=pl`)\r\n        .then(response => \r\n        {\r\n            if(response.ok)\r\n            {\r\n                return response;\r\n            }\r\n            throw Error(\"Błąd pobierania danych z API\");\r\n        })\r\n        .then(response => response.json())\r\n        .then(response =>\r\n        {\r\n            console.log(response);\r\n            this.setState(\r\n            {\r\n                compareCurrentElements:[...this.state.compareCurrentElements,\r\n                {\r\n                    'id':2,\r\n                    'date':response.current.last_updated,\r\n                    'weather':response.current.condition.text,\r\n                    'temp':response.current.temp_c,\r\n                    'pressure':response.current.pressure_mb,\r\n                    'wind':response.current.wind_kph,\r\n                    'image':weatherIcons[response.current.condition.code],\r\n                    'source':\"WeatherApi\"\r\n                }],\r\n            });\r\n        })\r\n        .catch(err =>\r\n        {\r\n            console.log(err);\r\n            this.setState(prevState =>\r\n            {\r\n                return{\r\n                error:true,\r\n                city:prevState.city\r\n                }\r\n            });\r\n        });\r\n    };\r\n\r\n    getForecastDailyWA = (city) =>\r\n    {\r\n        this.setState(\r\n        {\r\n            ForecastDailyElements:[]\r\n        });\r\n            \r\n        fetch(`http://api.weatherapi.com/v1/forecast.json?key=${API_key_WA}&q=${city}&days=4&aqi=yes&alerts=yes&lang=pl`)\r\n        .then(response => \r\n        {\r\n            if(response.ok)\r\n            {\r\n                return response;\r\n            }\r\n            throw Error(\"Błąd pobierania danych z API\");\r\n        })\r\n        .then(response => response.json())\r\n        .then(response => \r\n        {\r\n            console.log(response);\r\n            for (var i = 0; i < 3; i++) \r\n            {\r\n                this.setState(\r\n                {\r\n                    ForecastDailyElements:[...this.state.ForecastDailyElements,\r\n                    {\r\n                        'id':i,\r\n                        'date':response.forecast.forecastday[i].date,\r\n                        'weather':response.forecast.forecastday[i].day.condition.text,\r\n                        'tempMax':response.forecast.forecastday[i].day.maxtemp_c,\r\n                        'tempMin':response.forecast.forecastday[i].day.mintemp_c,\r\n                        'pressure':\"-\",\r\n                        'wind':\"-\",\r\n                        'image':weatherIcons[response.forecast.forecastday[i].day.condition.code],\r\n                        'clouds':\"-\",\r\n                        'humidity':response.forecast.forecastday[i].day.avghumidity,\r\n                    }],\r\n                });\r\n            }\r\n            this.setState(\r\n            {\r\n                Property:this.state.ForecastDailyElements[1]\r\n            }) \r\n        })\r\n        .catch(err =>\r\n        {\r\n            console.log(err)\r\n            this.setState(prevState =>\r\n            {\r\n                return{\r\n                error:true,\r\n                city:prevState.city\r\n                }\r\n            });\r\n        });\r\n    };\r\n\r\n    getWeatherTommorowIo = (lat,lon) =>{\r\n        this.setState({\r\n            ForecastDailyElements:[\r\n            ]\r\n        })\r\n            \r\n        fetch(`https://api.tomorrow.io/v4/timelines?location=${lat},${lon}&fields=temperature,humidity,windSpeed,cloudCover,weatherCode,pressureSurfaceLevel&timesteps=1d&units=metric&apikey=Xsa59kYGGrHiXs1TZ3cItU7zRZ4FfGQ8\r\n        `)\r\n        .then(response => {\r\n            if(response.ok){\r\n                return response\r\n            }\r\n            throw Error(\"Błąd pobierania danych z API\")\r\n        })\r\n        .then(response => response.json())\r\n        .then(response => {\r\n            console.log(response)\r\n            this.setState({\r\n                compareCurrentElements:[...this.state.compareCurrentElements,{\r\n                    'id':3,\r\n                    'date':response.data.timelines[0].startTime,\r\n                    'weather':weatherConditions[response.data.timelines[0].intervals[0].values.weatherCode],\r\n                    'temp':response.data.timelines[0].intervals[0].values.temperature,\r\n                    'pressure':response.data.timelines[0].intervals[0].values.pressureSurfaceLevel,\r\n                    'wind':CalWindSpeed(response.data.timelines[0].intervals[0].values.windSpeed),\r\n                    'image':weatherIcons[response.data.timelines[0].intervals[0].values.weatherCode],\r\n                    'source':\"TommorowIo\"\r\n                }],\r\n            })\r\n        })\r\n        .catch(err =>{\r\n        console.log(err)\r\n        this.setState(prevState =>{\r\n            return{\r\n            error:true,\r\n            city:prevState.city\r\n        }})\r\n    })\r\n    } \r\n    getForecastDailyTI = (lat,lon) =>{\r\n        this.setState({\r\n            ForecastDailyElements:[\r\n            ]\r\n        })\r\n            \r\n        fetch(`https://api.tomorrow.io/v4/timelines?location=${lat},${lon}&fields=temperature,humidity,windSpeed,cloudCover,weatherCode,pressureSurfaceLevel&timesteps=1d&units=metric&apikey=Xsa59kYGGrHiXs1TZ3cItU7zRZ4FfGQ8\r\n        `)\r\n        .then(response => {\r\n            if(response.ok){\r\n                return response\r\n            }\r\n            throw Error(\"Błąd pobierania danych z API\")\r\n        })\r\n        .then(response => response.json())\r\n        .then(response => {\r\n            console.log(response)\r\n            for (var i = 0; i < 8; i++) {\r\n                this.setState({\r\n                    ForecastDailyElements:[...this.state.ForecastDailyElements,{\r\n                        'id':i,\r\n                        'date':response.data.timelines[0].intervals[i].startTime,\r\n                        'weather':weatherConditions[response.data.timelines[0].intervals[i].values.weatherCode],\r\n                        'tempMax':response.data.timelines[0].intervals[i].values.temperature,\r\n                        'tempMin':response.data.timelines[0].intervals[i].values.temperature,\r\n                        'pressure':response.data.timelines[0].intervals[i].values.pressureSurfaceLevel,\r\n                        'wind':response.data.timelines[0].intervals[i].values.windSpeed,\r\n                        'image':weatherIcons[response.data.timelines[0].intervals[i].values.weatherCode],\r\n                        'clouds':response.data.timelines[0].intervals[i].values.cloudCover,\r\n                        'humidity':response.data.timelines[0].intervals[i].values.humidity,\r\n                    }],  \r\n                })\r\n            }  \r\n            this.setState({\r\n                Property:this.state.ForecastDailyElements[1]\r\n            }) \r\n        })\r\n        .catch(err =>{\r\n        console.log(err)\r\n        this.setState(prevState =>{\r\n            return{\r\n            error:true,\r\n            city:prevState.city\r\n        }})\r\n    })\r\n    } \r\n    getWeatherVisualcrossing = (city) =>{\r\n\r\n        this.setState({\r\n            ForecastDailyElements:[\r\n            ]\r\n        })\r\n            \r\n        fetch(`https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/weatherdata/forecast?aggregateHours=24&combinationMethod=aggregate&contentType=json&unitGroup=metric&locationMode=single&iconSet=icons2&key=LHKNDUGQ4MSQTL5749JVGX4XV&dataElements=default&locations=${city}\r\n        `)\r\n        .then(response => {\r\n            if(response.ok){\r\n                return response\r\n            }\r\n            throw Error(\"Błąd pobierania danych z API\")\r\n        })\r\n        .then(response => response.json())\r\n        .then(response => {\r\n            console.log(response)\r\n            this.setState({\r\n                compareCurrentElements:[...this.state.compareCurrentElements,{\r\n                    'id':4,\r\n                    'date':response.location.currentConditions.datetime,\r\n                    'weather':response.location.currentConditions.icon,\r\n                    'temp':response.location.currentConditions.temp,\r\n                    'pressure':response.location.currentConditions.sealevelpressure,\r\n                    'wind':response.location.currentConditions.wspd,\r\n                    'image':weatherIcons[0],\r\n                    'source':\"VisualCrossing\"\r\n                }],\r\n            })\r\n        })\r\n        .catch(err =>{\r\n        console.log(err)\r\n        this.setState(prevState =>{\r\n            return{\r\n            error:true,\r\n            city:prevState.city\r\n        }})\r\n    })\r\n    } \r\n    getForecastDailyVC = (city) =>{\r\n\r\n        this.setState({\r\n            ForecastDailyElements:[\r\n            ]\r\n        })\r\n            \r\n        fetch(`https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/weatherdata/forecast?aggregateHours=24&combinationMethod=aggregate&contentType=json&unitGroup=metric&locationMode=single&iconSet=icons2&key=LHKNDUGQ4MSQTL5749JVGX4XV&dataElements=default&locations=${city}\r\n        `)\r\n        .then(response => {\r\n            if(response.ok){\r\n                return response\r\n            }\r\n            throw Error(\"Błąd pobierania danych z API\")\r\n        })\r\n        .then(response => response.json())\r\n        .then(response => {\r\n            console.log(response)\r\n            for (var i = 0; i < 8; i++) {\r\n                this.setState({\r\n                    ForecastDailyElements:[...this.state.ForecastDailyElements,{\r\n                        'id':i,\r\n                        'date':CalDate(response.location.values[i].datetime),\r\n                        'weather':response.location.values[i].conditions,\r\n                        'tempMax':response.location.values[i].maxt,\r\n                        'tempMin':response.location.values[i].mint,\r\n                        'pressure':\"-\",\r\n                        'wind':1.6*response.location.values[i].wspd,\r\n                        'image':\"-\",\r\n                        'clouds':response.location.values[i].cloudcover,\r\n                        'humidity':response.location.values[i].humidity,\r\n                    }],  \r\n                })\r\n            }  \r\n            this.setState({\r\n                Property:this.state.ForecastDailyElements[1]\r\n            }) \r\n        })\r\n        .catch(err =>{\r\n        console.log(err)\r\n        this.setState(prevState =>{\r\n            return{\r\n            error:true,\r\n            city:prevState.city\r\n        }})\r\n    })\r\n    } \r\n    getWeatherWeatherbit = (city) =>{\r\n\r\n        this.setState({\r\n            ForecastDailyElements:[\r\n            ]\r\n        })\r\n            \r\n        fetch(` https://api.weatherbit.io/v2.0/forecast/daily?city=${city}&lang=pl&key=${API_key_w}\r\n        `)\r\n        .then(response => {\r\n            if(response.ok){\r\n                return response\r\n            }\r\n            throw Error(\"Błąd pobierania danych z API\")\r\n        })\r\n        .then(response => response.json())\r\n        .then(response => {\r\n            console.log(response)\r\n            this.setState({\r\n                compareCurrentElements:[...this.state.compareCurrentElements,{\r\n                    'id':5,\r\n                    'date':response.data[0].ob_time,\r\n                    'weather':response.data[0].weather.description,\r\n                    'temp':response.data[0].temp,\r\n                    'pressure':Math.floor(response.data[0].pres),\r\n                    'wind':Math.floor(1.609*response.data[0].wind_spd),\r\n                    'image':weatherIcons[response.data[0].weather.code],\r\n                    'source':\"Weatherbit\"\r\n                }],\r\n            })\r\n        })\r\n        .catch(err =>{\r\n        console.log(err)\r\n        this.setState(prevState =>{\r\n            return{\r\n            error:true,\r\n            city:prevState.city\r\n        }})\r\n    })\r\n    } \r\n    getForecastDailyWB = (city) =>{\r\n\r\n        this.setState({\r\n            ForecastDailyElements:[\r\n            ]\r\n        })\r\n            \r\n        fetch(` https://api.weatherbit.io/v2.0/forecast/daily?city=${city}&lang=pl&key=${API_key_w}\r\n        `)\r\n        .then(response => {\r\n            if(response.ok){\r\n                return response\r\n            }\r\n            throw Error(\"Błąd pobierania danych z API\")\r\n        })\r\n        .then(response => response.json())\r\n        .then(response => {\r\n            console.log(response)\r\n            for (var i = 0; i < 8; i++) {\r\n                this.setState({\r\n                    ForecastDailyElements:[...this.state.ForecastDailyElements,{\r\n                        'id':i,\r\n                        'date':response.data[i].datetime,\r\n                        'weather':response.data[i].weather.description,\r\n                        'tempMax':response.data[i].max_temp,\r\n                        'tempMin':response.data[i].min_temp,\r\n                        'pressure':response.data[i].pres,\r\n                        'wind':Math.floor(1.609*response.data[i].wind_spd),\r\n                        'image':weatherIcons[response.data[i].weather.code],\r\n                        'clouds':response.data[i].clouds,\r\n                        'humidity':\"-\",\r\n                    }],  \r\n                })\r\n            }  \r\n            this.setState({\r\n                Property:this.state.ForecastDailyElements[1]\r\n            }) \r\n        })\r\n        .catch(err =>{\r\n        console.log(err)\r\n        this.setState(prevState =>{\r\n            return{\r\n            error:true,\r\n            city:prevState.city\r\n        }})\r\n    })\r\n    }  \r\n    inputHandler=(e)=>{\r\n        this.setState({\r\n            value:e.target.value\r\n        })\r\n    }\r\n    componentDidMount(){\r\n        this.getDefaultCompare(\"Warszawa\")\r\n     }\r\n    render(){\r\n            return( <div style={{ \r\n                backgroundImage: `url(\"/images/bg_comp.jpg\")` \r\n            }}>\r\n                <div className=\"city-form\">\r\n                <Form \r\n                value={this.state.value}  \r\n                handler={this.inputHandler}\r\n                submit={this.getWeatherCompare}\r\n                /> \r\n                </div>\r\n                <div className=\"compare-main-cards\">\r\n                    {this.state.currentProperty ?( \r\n                    <div className=\"compare-cards-slider\">\r\n                        <div className=\"compare-cards-slider-wrapper\" style={{\r\n                            'transform':`translateX(-${this.state.currentProperty.id*(100/this.state.compareCurrentElements.length)}%)`\r\n                        }}>\r\n                            {this.state.compareCurrentElements.map(fde => <CompareCurrentWeatherItem compare={this.state} key={fde.id} element={fde} />)}\r\n                        </div>\r\n                        \r\n                    </div>\r\n                    ):null}\r\n                </div>\r\n                <button \r\n                onClick={() => this.setSource(\"OpenWeatherMap\")} \r\n                >OpenWeatherMap\r\n                </button>\r\n                <button \r\n                onClick={() => this.setSource(\"WeatherApi\")} \r\n                >WeatherApi\r\n                </button>\r\n                <button \r\n                onClick={() => this.setSource(\"TommorowIO\")} \r\n                >TommorowIO\r\n                </button>\r\n                <button \r\n                onClick={() => this.setSource(\"VisualCrossing\")}\r\n                >VisualCrossing\r\n                </button>\r\n                <button \r\n                onClick={() => this.setSource(\"Weatherbit\")}\r\n                >Weatherbit\r\n                </button>\r\n                <div className=\"compare-main\">\r\n                {this.state.Property ?(\r\n                <div className=\"main-cards\"> \r\n                <button className=\"left\" \r\n                                onClick={() => this.nextProperty(this.state.Property,this.state.ForecastDailyElements)} \r\n                                disabled={this.state.Property.id === this.state.ForecastDailyElements.length-3}\r\n                            >Next\r\n                            </button>\r\n                            <button className=\"right\"\r\n                                    onClick={() => this.prevProperty(this.state.Property,this.state.ForecastDailyElements)} \r\n                                    disabled={this.state.Property.id === 1}\r\n                            >Prev\r\n                            </button>\r\n                                <div className=\"cards-slider\">         \r\n                                    <div className=\"cards-slider-wrapper\" style={{\r\n                                                                            'transform':`translateX(-${this.state.Property.id*(100/this.state.ForecastDailyElements.length)}%)`\r\n                                    }}>\r\n                                        {this.state.ForecastDailyElements.map(fde => <CompareForecastItem key={fde.id} element={fde} />)}\r\n                                    </div>\r\n                                </div>\r\n                                \r\n                            </div>\r\n                            ):null}\r\n                </div>\r\n            </div>\r\n            )\r\n        \r\n    }\r\n}\r\nconst weatherIcons = {\r\n    200:'/images/200.png',\r\n    201:'/images/201.png',\r\n    202:'/images/202.png',\r\n    210:'/images/210.png',\r\n    211:'/images/211.png',\r\n    212:'/images/212.png',\r\n    221:'/images/212.png',\r\n    230:'/images/230D.png',\r\n    231:'/images/231.png',\r\n    232:'/images/232.png',\r\n    300:'/images/300D.png',\r\n    301:'/images/301.png',\r\n    302:'/images/302.png',\r\n    310:'/images/310D.png',\r\n    311:'/images/311.png',\r\n    312:'/images/312.png',\r\n    313:'/images/313_1.png',\r\n    314:'/images/314.png',\r\n    321:'/images/321.png',\r\n    500:'/images/500D.png',\r\n    501:'/images/501.png',\r\n    502:'/images/502.png',\r\n    503:'/images/503.png',\r\n    504:'/images/504.png',\r\n    511:'/images/511.png',\r\n    520:'/images/520D.png',\r\n    521:'/images/521_2.png',\r\n    522:'/images/522_1.png',\r\n    531:'/images/522_1.png',\r\n    600:'/images/600D.png',\r\n    601:'/images/601.png',\r\n    602:'/images/602.png',\r\n    611:'/images/611.png',\r\n    612:'/images/612D.png',\r\n    613:'/images/613.png',\r\n    615:'/images/615D.png',\r\n    616:'/images/616.png',\r\n    620:'/images/620D.png',\r\n    621:'/images/621.png',\r\n    622:'/images/622.png',\r\n    701:'/images/701_2.png',\r\n    711:'/images/701_2.png',\r\n    721:'/images/701_2.png',\r\n    731:'/images/701_2.png',\r\n    741:'/images/701_2.png',\r\n    751:'/images/701_2.png',\r\n    761:'/images/701_2.png',\r\n    762:'/images/701_2.png',\r\n    771:'/images/701_2.png',\r\n    781:'/images/701_2.png',\r\n    800:'/images/800D.png',\r\n    801:'/images/801D.png',\r\n    802:'/images/802D.png',\r\n    803:'/images/803D.png',\r\n    804:'/images/804.png',\r\n    1000:'/images/800D.png',\r\n    1003:'/images/801D.png',\r\n    1006:'/images/802D.png',\r\n    1009:'/images/804.png',\r\n    1030:'/images/701_2.png',\r\n    1063:'/images/500D.png',\r\n    1066:'/images/600.png',\r\n    1069:'/images/613.png',\r\n    1072:'/images/511.png',\r\n    1087:'/images/200.png',\r\n    1114:'/images/602.png',\r\n    1117:'/images/622.png',\r\n    1135:'/images/702_1.png',\r\n    1147:'/images/702_1.png',\r\n    1150:'/images/300D.png',\r\n    1153:'/images/301.png',\r\n    1168:'/images/511.png',\r\n    1171:'/images/501.png',\r\n    1180:'/images/502.png',\r\n    1183:'/images/500D.png',\r\n    1186:'/images/500D.png',\r\n    1189:'/images/501.png',\r\n    1192:'/images/502.png',\r\n    1195:'/images/503.png',\r\n    1198:'/images/511.png',\r\n    1201:'/images/511.png',\r\n    1204:'/images/611.png',\r\n    1207:'/images/612D.png',\r\n    1210:'/images/600D.png',\r\n    1213:'/images/600D.png',\r\n    1216:'/images/601.png',\r\n    1219:'/images/601.png',\r\n    1222:'/images/602.png',\r\n    1225:'/images/602.png',\r\n    1237:'/images/511.png',\r\n    1240:'/images/520.png',\r\n    1243:'/images/521_2.png',\r\n    1246:'/images/522_1.png',\r\n    1249:'/images/612D.png',\r\n    1252:'/images/613.png',\r\n    1255:'/images/612D.png',\r\n    1258:'/images/613.png',\r\n    1261:'/images/511.png',\r\n    1264:'/images/511.png',\r\n    1273:'/images/200.png',\r\n    1276:'/images/201.png',\r\n    1279:'/images/602.png',\r\n    1282:'/images/602.png',\r\n    4201:'/images/502.png',\r\n    4001:'/images/501.png',\r\n    4200:'/images/500D.png',\r\n    6201:'/images/511.png',\r\n    6001:'/images/511.png',\r\n    6200:'/images/511.png',\r\n    6000:'/images/511.png',\r\n    4000:'/images/301.png',\r\n    7101:'/images/511.png',\r\n    7000:'/images/511.png',\r\n    7102:'/images/511.png',\r\n    5101:'/images/602.png',\r\n    5000:'/images/601.png',\r\n    5100:'/images/600D.png',\r\n    5001:'/images/601.png',\r\n    8000:'/images/201.png',\r\n    2100:'/images/701_2.png',\r\n    2000:'/images/701_2.png',\r\n    1001:'/images/804.png',\r\n    1102:'/images/803D.png',\r\n    1101:'/images/802D.png',\r\n    1100:'/images/801D.png',\r\n}\r\nconst weatherConditions = {\r\n    4201:'Duży deszcz',\r\n    4001:'Deszcz',\r\n    4200:'Lekki Deszcz',\r\n    6201:'Duży Marznący Deszcz',\r\n    6001:'Marznący Deszcz',\r\n    6200:'Lekki Marznący Deszcz',\r\n    6000:'Marznąca Mrzawka',\r\n    4000:'Mrzawka',\r\n    7101:'Duże Krupy',\r\n    7000:'Krupy',\r\n    7102:'Lekkie Krupy',\r\n    5101:'Duży Śnieg',\r\n    5000:'Śnieg',\r\n    5100:'Lekki Śnieg',\r\n    5001:'Zamieć',\r\n    8000:'Burza',\r\n    2100:'Lekka Mgła',\r\n    2000:'Mgła',\r\n    1001:'Pochmurnie',\r\n    1102:'Przewaga Chmur',\r\n    1101:'Częściowe Zachmurzenie',\r\n    1100:'Przeważnie Słonecznie',\r\n    1000:'Słonecznie',\r\n}\r\nexport default Compare"]},"metadata":{},"sourceType":"module"}