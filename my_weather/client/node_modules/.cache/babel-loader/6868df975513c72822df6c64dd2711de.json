{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vened\\\\Desktop\\\\Weather\\\\my_weather\\\\client\\\\src\\\\components\\\\Compare\\\\Compare.js\";\nimport React from 'react';\nimport Form from '../Form/Form';\nimport CalDate from '../Functions/CalDate';\nimport CalCelsius from '../Functions/CalCelsius';\nimport CalWindSpeed from '../Functions/CalWindSpeed';\nimport CompareCurrentWeatherItem from './CompareCurrentWeatherItem';\nimport CompareForecastItem from './CompareForecastItem';\nimport './Compare.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_key_OWM = \"157d33f8987d245bc6a1997408e90015\";\nconst API_key_WA = \"d42d0d989ead4316b9d143558213105\";\nconst API_key_w = \"4c7c27f8abf34ae09c61bad9a897be7e\";\n\nclass Compare extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.nextProperty = (Property, Elements) => {\n      const newIndex = Property.id + 1;\n      this.setState({\n        Property: Elements[newIndex]\n      });\n      console.log(newIndex);\n    };\n\n    this.prevProperty = (Property, Elements) => {\n      const newIndex = Property.id - 1;\n      this.setState({\n        Property: Elements[newIndex]\n      });\n    };\n\n    this.setSource = source => {\n      this.setState({\n        source: source\n      });\n\n      if (source === \"OpenWeatherMap\") {\n        this.getForecastDailyOWM(this.state.lat, this.state.lon);\n      }\n\n      if (source === \"WeatherApi\") {\n        this.getForecastDailyWA(this.state.city);\n      }\n\n      if (source === \"TommorowIO\") {\n        this.getForecastDailyTI(this.state.lat, this.state.lon);\n      }\n\n      if (source === \"VisualCrossing\") {\n        this.getForecastDailyVC(this.state.city);\n      }\n\n      if (source === \"Weatherbit\") {\n        this.getForecastDailyWB(this.state.city);\n      }\n    };\n\n    this.getDefaultCompare = city => {\n      console.log(city);\n      this.setState({\n        compareCurrentElements: []\n      });\n      const result = fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city}&lang=pl&APPID=${API_key_OWM}`).then(response => {\n        if (response.ok) {\n          return response;\n        }\n\n        throw Error(\"Błąd pobierania danych z API\");\n      }).then(response => response.json()).then(response => {\n        console.log(response);\n        this.getForecastDailyOWM(response.coord.lat, response.coord.lon);\n        this.getWeatherWeatherApi(city);\n        this.getWeatherTommorowIo(response.coord.lat, response.coord.lon);\n        this.getWeatherVisualcrossing(city);\n        this.getWeatherWeatherbit(city);\n        this.setState({\n          timezone: response.timezone,\n          compareCurrentElements: [...this.state.compareCurrentElements, {\n            'id': 1,\n            'date': CalDate(response.dt, response.timezone),\n            'weather': response.weather[0].description,\n            'temp': CalCelsius(response.main.temp),\n            'pressure': response.main.pressure,\n            'wind': CalWindSpeed(response.wind.speed),\n            'image': weatherIcons[response.weather[0].id],\n            'source': \"OpenWeatherMap\"\n          }],\n          city: response.name,\n          lat: response.coord.lat,\n          lon: response.coord.lon,\n          weatherComp: response.weather[0].description,\n          tempComp: CalCelsius(response.main.temp),\n          pressureComp: response.main.pressure,\n          windComp: CalWindSpeed(response.wind.speed)\n        });\n        this.setState({\n          currentProperty: this.state.compareCurrentElements[0]\n        });\n        return fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city}&lang=pl&APPID=${API_key_OWM}`);\n      }).then(responseAirQuality => responseAirQuality.json()).catch(err => {\n        console.log(err);\n        this.setState(prevState => {\n          return {\n            error: true,\n            city: prevState.city\n          };\n        });\n      });\n    };\n\n    this.getWeatherCompare = e => {\n      e.preventDefault();\n      this.setState({\n        compareCurrentElements: []\n      });\n      const result = fetch(`http://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&lang=pl&APPID=${API_key_OWM}`).then(response => {\n        if (response.ok) {\n          return response;\n        }\n\n        throw Error(\"Błąd pobierania danych z API\");\n      }).then(response => response.json()).then(response => {\n        console.log(response);\n        this.getForecastDailyOWM(response.coord.lat, response.coord.lon);\n        this.getWeatherWeatherApi(this.state.value);\n        this.getWeatherTommorowIo(response.coord.lat, response.coord.lon);\n        this.getWeatherVisualcrossing(this.state.value);\n        this.getWeatherWeatherbit(this.state.value);\n        this.setState({\n          timezone: response.timezone,\n          compareCurrentElements: [...this.state.compareCurrentElements, {\n            'id': 1,\n            'date': CalDate(response.dt),\n            'weather': response.weather[0].description,\n            'temp': CalCelsius(response.main.temp),\n            'pressure': response.main.pressure,\n            'wind': CalWindSpeed(response.wind.speed),\n            'image': weatherIcons[response.weather[0].id],\n            'source': \"OpenWeatherMap\"\n          }],\n          city: response.name,\n          lat: response.coord.lat,\n          lon: response.coord.lon,\n          weatherComp: response.weather[0].description,\n          tempComp: CalCelsius(response.main.temp),\n          pressureComp: response.main.pressure,\n          windComp: CalWindSpeed(response.wind.speed)\n        });\n        this.setState({\n          currentProperty: this.state.compareCurrentElements[0]\n        });\n        return fetch(`http://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&lang=pl&APPID=${API_key_OWM}`);\n      }).then(responseAirQuality => responseAirQuality.json()).catch(err => {\n        console.log(err);\n        this.setState(prevState => {\n          return {\n            error: true,\n            city: prevState.city\n          };\n        });\n      });\n    };\n\n    this.getForecastDailyOWM = (lat, lon) => {\n      console.log(lat);\n      this.setState({\n        ForecastDailyElements: []\n      });\n      fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&lang=pl&appid=${API_key_OWM}`).then(response => {\n        if (response.ok) {\n          return response;\n        }\n\n        throw Error(\"Błąd pobierania danych z API\");\n      }).then(response => response.json()).then(response => {\n        console.log(response);\n\n        for (var i = 0; i < 8; i++) {\n          this.setState({\n            ForecastDailyElements: [...this.state.ForecastDailyElements, {\n              'id': i,\n              'date': CalDate(response.daily[i].dt, this.state.timezone),\n              'weather': response.daily[i].weather[0].description,\n              'tempMax': CalCelsius(response.daily[i].temp.max),\n              'tempMin': CalCelsius(response.daily[i].temp.min),\n              'pressure': response.daily[i].pressure,\n              'wind': CalWindSpeed(response.daily[i].wind_speed),\n              'image': weatherIcons[response.daily[i].weather[0].id],\n              'clouds': response.daily[i].clouds,\n              'humidity': response.daily[i].humidity\n            }]\n          });\n        }\n\n        ;\n        this.setState({\n          Property: this.state.ForecastDailyElements[1]\n        });\n      });\n    };\n\n    this.getWeatherWeatherApi = city => {\n      fetch(`http://api.weatherapi.com/v1/current.json?key=${API_key_WA}&q=${city}&days=7&aqi=yes&alerts=yes&lang=pl`).then(response => {\n        if (response.ok) {\n          return response;\n        }\n\n        throw Error(\"Błąd pobierania danych z API\");\n      }).then(response => response.json()).then(response => {\n        console.log(response);\n        this.setState({\n          compareCurrentElements: [...this.state.compareCurrentElements, {\n            'id': 2,\n            'date': response.current.last_updated,\n            'weather': response.current.condition.text,\n            'temp': response.current.temp_c,\n            'pressure': response.current.pressure_mb,\n            'wind': response.current.wind_kph,\n            'image': weatherIcons[response.current.condition.code],\n            'source': \"WeatherApi\"\n          }]\n        });\n      }).catch(err => {\n        console.log(err);\n        this.setState(prevState => {\n          return {\n            error: true,\n            city: prevState.city\n          };\n        });\n      });\n    };\n\n    this.getForecastDailyWA = city => {\n      this.setState({\n        ForecastDailyElements: []\n      });\n      fetch(`http://api.weatherapi.com/v1/forecast.json?key=${API_key_WA}&q=${city}&days=4&aqi=yes&alerts=yes&lang=pl`).then(response => {\n        if (response.ok) {\n          return response;\n        }\n\n        throw Error(\"Błąd pobierania danych z API\");\n      }).then(response => response.json()).then(response => {\n        console.log(response);\n\n        for (var i = 0; i < 3; i++) {\n          this.setState({\n            ForecastDailyElements: [...this.state.ForecastDailyElements, {\n              'id': i,\n              'date': response.forecast.forecastday[i].date,\n              'weather': response.forecast.forecastday[i].day.condition.text,\n              'tempMax': response.forecast.forecastday[i].day.maxtemp_c,\n              'tempMin': response.forecast.forecastday[i].day.mintemp_c,\n              'pressure': \"-\",\n              'wind': \"-\",\n              'image': weatherIcons[response.forecast.forecastday[i].day.condition.code],\n              'clouds': \"-\",\n              'humidity': response.forecast.forecastday[i].day.avghumidity\n            }]\n          });\n        }\n\n        this.setState({\n          Property: this.state.ForecastDailyElements[1]\n        });\n      }).catch(err => {\n        console.log(err);\n        this.setState(prevState => {\n          return {\n            error: true,\n            city: prevState.city\n          };\n        });\n      });\n    };\n\n    this.getWeatherTommorowIo = (lat, lon) => {\n      this.setState({\n        ForecastDailyElements: []\n      });\n      fetch(`https://api.tomorrow.io/v4/timelines?location=${lat},${lon}&fields=temperature,humidity,windSpeed,cloudCover,weatherCode,pressureSurfaceLevel&timesteps=1d&units=metric&apikey=Xsa59kYGGrHiXs1TZ3cItU7zRZ4FfGQ8`).then(response => {\n        if (response.ok) {\n          return response;\n        }\n\n        throw Error(\"Błąd pobierania danych z API\");\n      }).then(response => response.json()).then(response => {\n        console.log(response);\n        this.setState({\n          compareCurrentElements: [...this.state.compareCurrentElements, {\n            'id': 3,\n            'date': response.data.timelines[0].startTime,\n            'weather': weatherConditions[response.data.timelines[0].intervals[0].values.weatherCode],\n            'temp': response.data.timelines[0].intervals[0].values.temperature,\n            'pressure': response.data.timelines[0].intervals[0].values.pressureSurfaceLevel,\n            'wind': CalWindSpeed(response.data.timelines[0].intervals[0].values.windSpeed),\n            'image': weatherIcons[response.data.timelines[0].intervals[0].values.weatherCode],\n            'source': \"TommorowIo\"\n          }]\n        });\n      }).catch(err => {\n        console.log(err);\n        this.setState(prevState => {\n          return {\n            error: true,\n            city: prevState.city\n          };\n        });\n      });\n    };\n\n    this.getForecastDailyTI = (lat, lon) => {\n      this.setState({\n        ForecastDailyElements: []\n      });\n      fetch(`https://api.tomorrow.io/v4/timelines?location=${lat},${lon}&fields=temperature,humidity,windSpeed,cloudCover,weatherCode,pressureSurfaceLevel&timesteps=1d&units=metric&apikey=Xsa59kYGGrHiXs1TZ3cItU7zRZ4FfGQ8`).then(response => {\n        if (response.ok) {\n          return response;\n        }\n\n        throw Error(\"Błąd pobierania danych z API\");\n      }).then(response => response.json()).then(response => {\n        console.log(response);\n\n        for (var i = 0; i < 8; i++) {\n          this.setState({\n            ForecastDailyElements: [...this.state.ForecastDailyElements, {\n              'id': i,\n              'date': response.data.timelines[0].intervals[i].startTime,\n              'weather': weatherConditions[response.data.timelines[0].intervals[i].values.weatherCode],\n              'tempMax': response.data.timelines[0].intervals[i].values.temperature,\n              'tempMin': response.data.timelines[0].intervals[i].values.temperature,\n              'pressure': response.data.timelines[0].intervals[i].values.pressureSurfaceLevel,\n              'wind': response.data.timelines[0].intervals[i].values.windSpeed,\n              'image': weatherIcons[response.data.timelines[0].intervals[i].values.weatherCode],\n              'clouds': response.data.timelines[0].intervals[i].values.cloudCover,\n              'humidity': response.data.timelines[0].intervals[i].values.humidity\n            }]\n          });\n        }\n\n        this.setState({\n          Property: this.state.ForecastDailyElements[1]\n        });\n      }).catch(err => {\n        console.log(err);\n        this.setState(prevState => {\n          return {\n            error: true,\n            city: prevState.city\n          };\n        });\n      });\n    };\n\n    this.getWeatherVisualcrossing = city => {\n      this.setState({\n        ForecastDailyElements: []\n      });\n      fetch(`https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/weatherdata/forecast?aggregateHours=24&combinationMethod=aggregate&contentType=json&unitGroup=metric&locationMode=single&iconSet=icons2&key=LHKNDUGQ4MSQTL5749JVGX4XV&dataElements=default&locations=${city}`).then(response => {\n        if (response.ok) {\n          return response;\n        }\n\n        throw Error(\"Błąd pobierania danych z API\");\n      }).then(response => response.json()).then(response => {\n        console.log(response);\n        this.setState({\n          compareCurrentElements: [...this.state.compareCurrentElements, {\n            'id': 4,\n            'date': response.location.currentConditions.datetime,\n            'weather': response.location.currentConditions.icon,\n            'temp': response.location.currentConditions.temp,\n            'pressure': response.location.currentConditions.sealevelpressure,\n            'wind': response.location.currentConditions.wspd,\n            'image': weatherIcons[0],\n            'source': \"VisualCrossing\"\n          }]\n        });\n      }).catch(err => {\n        console.log(err);\n        this.setState(prevState => {\n          return {\n            error: true,\n            city: prevState.city\n          };\n        });\n      });\n    };\n\n    this.getForecastDailyVC = city => {\n      this.setState({\n        ForecastDailyElements: []\n      });\n      fetch(`https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/weatherdata/forecast?aggregateHours=24&combinationMethod=aggregate&contentType=json&unitGroup=metric&locationMode=single&iconSet=icons2&key=LHKNDUGQ4MSQTL5749JVGX4XV&dataElements=default&locations=${city}`).then(response => {\n        if (response.ok) {\n          return response;\n        }\n\n        throw Error(\"Błąd pobierania danych z API\");\n      }).then(response => response.json()).then(response => {\n        console.log(response);\n\n        for (var i = 0; i < 8; i++) {\n          this.setState({\n            ForecastDailyElements: [...this.state.ForecastDailyElements, {\n              'id': i,\n              'date': response.location.values[i].datetime,\n              'weather': response.location.values[i].conditions,\n              'tempMax': response.location.values[i].maxt,\n              'tempMin': response.location.values[i].mint,\n              'pressure': \"-\",\n              'wind': 1.6 * response.location.values[i].wspd,\n              'image': \"-\",\n              'clouds': response.location.values[i].cloudcover,\n              'humidity': response.location.values[i].humidity\n            }]\n          });\n        }\n\n        this.setState({\n          Property: this.state.ForecastDailyElements[1]\n        });\n      }).catch(err => {\n        console.log(err);\n        this.setState(prevState => {\n          return {\n            error: true,\n            city: prevState.city\n          };\n        });\n      });\n    };\n\n    this.getWeatherWeatherbit = city => {\n      this.setState({\n        ForecastDailyElements: []\n      });\n      fetch(` https://api.weatherbit.io/v2.0/forecast/daily?city=${city}&lang=pl&key=${API_key_w}`).then(response => {\n        if (response.ok) {\n          return response;\n        }\n\n        throw Error(\"Błąd pobierania danych z API\");\n      }).then(response => response.json()).then(response => {\n        console.log(response);\n        this.setState({\n          compareCurrentElements: [...this.state.compareCurrentElements, {\n            'id': 5,\n            'date': response.data[0].ob_time,\n            'weather': response.data[0].weather.description,\n            'temp': response.data[0].temp,\n            'pressure': Math.floor(response.data[0].pres),\n            'wind': Math.floor(1.609 * response.data[0].wind_spd),\n            'image': weatherIcons[response.data[0].weather.code],\n            'source': \"Weatherbit\"\n          }]\n        });\n      }).catch(err => {\n        console.log(err);\n        this.setState(prevState => {\n          return {\n            error: true,\n            city: prevState.city\n          };\n        });\n      });\n    };\n\n    this.getForecastDailyWB = city => {\n      this.setState({\n        ForecastDailyElements: []\n      });\n      fetch(` https://api.weatherbit.io/v2.0/forecast/daily?city=${city}&lang=pl&key=${API_key_w}`).then(response => {\n        if (response.ok) {\n          return response;\n        }\n\n        throw Error(\"Błąd pobierania danych z API\");\n      }).then(response => response.json()).then(response => {\n        console.log(response);\n\n        for (var i = 0; i < 8; i++) {\n          this.setState({\n            ForecastDailyElements: [...this.state.ForecastDailyElements, {\n              'id': i,\n              'date': response.data[i].datetime,\n              'weather': response.data[i].weather.description,\n              'tempMax': response.data[i].max_temp,\n              'tempMin': response.data[i].min_temp,\n              'pressure': response.data[i].pres,\n              'wind': Math.floor(1.609 * response.data[i].wind_spd),\n              'image': weatherIcons[response.data[i].weather.code],\n              'clouds': response.data[i].clouds,\n              'humidity': \"-\"\n            }]\n          });\n        }\n\n        this.setState({\n          Property: this.state.ForecastDailyElements[1]\n        });\n      }).catch(err => {\n        console.log(err);\n        this.setState(prevState => {\n          return {\n            error: true,\n            city: prevState.city\n          };\n        });\n      });\n    };\n\n    this.inputHandler = e => {\n      this.setState({\n        value: e.target.value\n      });\n    };\n\n    this.state = {\n      value: \"\",\n      compareCurrentElements: [],\n      ForecastDailyElements: [],\n      ForecastDailyElements: [],\n      source: \"OpenWeatherMap\",\n      city: undefined,\n      lat: undefined,\n      lon: undefined,\n      currentProperty: undefined,\n      Property: undefined,\n      Property: undefined,\n      weatherComp: undefined,\n      tempComp: undefined,\n      pressureComp: undefined,\n      windComp: undefined,\n      error: false\n    };\n  }\n\n  componentDidMount() {\n    this.getDefaultCompare(\"Warszawa\");\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        backgroundImage: `url(\"/images/bg_comp.jpg\")`\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"city-form\",\n        children: /*#__PURE__*/_jsxDEV(Form, {\n          value: this.state.value,\n          handler: this.inputHandler,\n          submit: this.getWeatherCompare\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 706,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 705,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"compare-main-cards\",\n        children: this.state.currentProperty ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"compare-main-cards-slider\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"compare-main-cards-slider-wrapper\",\n            style: {\n              'transform': `translateX(-${this.state.currentProperty.id * (100 / this.state.compareCurrentElements.length)}%)`\n            },\n            children: this.state.compareCurrentElements.map(fde => /*#__PURE__*/_jsxDEV(CompareCurrentWeatherItem, {\n              compare: this.state,\n              element: fde\n            }, fde.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 720,\n              columnNumber: 83\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 715,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 714,\n          columnNumber: 29\n        }, this) : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 712,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.setSource(\"OpenWeatherMap\"),\n        children: \"OpenWeatherMap\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 726,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.setSource(\"WeatherApi\"),\n        children: \"WeatherApi\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 731,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.setSource(\"TommorowIO\"),\n        children: \"TommorowIO\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 736,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.setSource(\"VisualCrossing\"),\n        children: \"VisualCrossing\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 741,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.setSource(\"Weatherbit\"),\n        children: \"Weatherbit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 746,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"compare-forecast-main\",\n        children: this.state.Property ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"main-cards\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"left\",\n            style: {\n              backgroundImage: `url(\"/images/arrow_left.png\")`\n            },\n            onClick: () => this.prevProperty(this.state.Property, this.state.ForecastDailyElements),\n            disabled: this.state.Property.id === 0\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 754,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"right\",\n            style: {\n              backgroundImage: `url(\"/images/arrow_right.png\")`\n            },\n            onClick: () => this.nextProperty(this.state.Property, this.state.ForecastDailyElements),\n            disabled: this.state.Property.id === this.state.ForecastDailyElements.length - 3\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 762,\n            columnNumber: 37\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"cards-slider\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"cards-slider-wrapper\",\n              style: {\n                'transform': `translateX(-${this.state.Property.id * (100 / this.state.ForecastDailyElements.length)}%)`\n              },\n              children: this.state.ForecastDailyElements.map(fde => /*#__PURE__*/_jsxDEV(CompareForecastItem, {\n                element: fde\n              }, fde.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 776,\n                columnNumber: 86\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 771,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 770,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 753,\n          columnNumber: 29\n        }, this) : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 751,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 700,\n      columnNumber: 17\n    }, this);\n  }\n\n}\n\n;\nconst weatherIcons = {\n  200: '/images/200.png',\n  201: '/images/201.png',\n  202: '/images/202.png',\n  210: '/images/210.png',\n  211: '/images/211.png',\n  212: '/images/212.png',\n  221: '/images/212.png',\n  230: '/images/230D.png',\n  231: '/images/231.png',\n  232: '/images/232.png',\n  300: '/images/300D.png',\n  301: '/images/301.png',\n  302: '/images/302.png',\n  310: '/images/310D.png',\n  311: '/images/311.png',\n  312: '/images/312.png',\n  313: '/images/313_1.png',\n  314: '/images/314.png',\n  321: '/images/321.png',\n  500: '/images/500D.png',\n  501: '/images/501.png',\n  502: '/images/502.png',\n  503: '/images/503.png',\n  504: '/images/504.png',\n  511: '/images/511.png',\n  520: '/images/520D.png',\n  521: '/images/521_2.png',\n  522: '/images/522_1.png',\n  531: '/images/522_1.png',\n  600: '/images/600D.png',\n  601: '/images/601.png',\n  602: '/images/602.png',\n  611: '/images/611.png',\n  612: '/images/612D.png',\n  613: '/images/613.png',\n  615: '/images/615D.png',\n  616: '/images/616.png',\n  620: '/images/620D.png',\n  621: '/images/621.png',\n  622: '/images/622.png',\n  701: '/images/701_2.png',\n  711: '/images/701_2.png',\n  721: '/images/701_2.png',\n  731: '/images/701_2.png',\n  741: '/images/701_2.png',\n  751: '/images/701_2.png',\n  761: '/images/701_2.png',\n  762: '/images/701_2.png',\n  771: '/images/701_2.png',\n  781: '/images/701_2.png',\n  800: '/images/800D.png',\n  801: '/images/801D.png',\n  802: '/images/802D.png',\n  803: '/images/803D.png',\n  804: '/images/804.png',\n  1000: '/images/800D.png',\n  1003: '/images/801D.png',\n  1006: '/images/802D.png',\n  1009: '/images/804.png',\n  1030: '/images/701_2.png',\n  1063: '/images/500D.png',\n  1066: '/images/600.png',\n  1069: '/images/613.png',\n  1072: '/images/511.png',\n  1087: '/images/200.png',\n  1114: '/images/602.png',\n  1117: '/images/622.png',\n  1135: '/images/702_1.png',\n  1147: '/images/702_1.png',\n  1150: '/images/300D.png',\n  1153: '/images/301.png',\n  1168: '/images/511.png',\n  1171: '/images/501.png',\n  1180: '/images/502.png',\n  1183: '/images/500D.png',\n  1186: '/images/500D.png',\n  1189: '/images/501.png',\n  1192: '/images/502.png',\n  1195: '/images/503.png',\n  1198: '/images/511.png',\n  1201: '/images/511.png',\n  1204: '/images/611.png',\n  1207: '/images/612D.png',\n  1210: '/images/600D.png',\n  1213: '/images/600D.png',\n  1216: '/images/601.png',\n  1219: '/images/601.png',\n  1222: '/images/602.png',\n  1225: '/images/602.png',\n  1237: '/images/511.png',\n  1240: '/images/520.png',\n  1243: '/images/521_2.png',\n  1246: '/images/522_1.png',\n  1249: '/images/612D.png',\n  1252: '/images/613.png',\n  1255: '/images/612D.png',\n  1258: '/images/613.png',\n  1261: '/images/511.png',\n  1264: '/images/511.png',\n  1273: '/images/200.png',\n  1276: '/images/201.png',\n  1279: '/images/602.png',\n  1282: '/images/602.png',\n  4201: '/images/502.png',\n  4001: '/images/501.png',\n  4200: '/images/500D.png',\n  6201: '/images/511.png',\n  6001: '/images/511.png',\n  6200: '/images/511.png',\n  6000: '/images/511.png',\n  4000: '/images/301.png',\n  7101: '/images/511.png',\n  7000: '/images/511.png',\n  7102: '/images/511.png',\n  5101: '/images/602.png',\n  5000: '/images/601.png',\n  5100: '/images/600D.png',\n  5001: '/images/601.png',\n  8000: '/images/201.png',\n  2100: '/images/701_2.png',\n  2000: '/images/701_2.png',\n  1001: '/images/804.png',\n  1102: '/images/803D.png',\n  1101: '/images/802D.png',\n  1100: '/images/801D.png'\n};\nconst weatherConditions = {\n  4201: 'Duży deszcz',\n  4001: 'Deszcz',\n  4200: 'Lekki Deszcz',\n  6201: 'Duży Marznący Deszcz',\n  6001: 'Marznący Deszcz',\n  6200: 'Lekki Marznący Deszcz',\n  6000: 'Marznąca Mrzawka',\n  4000: 'Mrzawka',\n  7101: 'Duże Krupy',\n  7000: 'Krupy',\n  7102: 'Lekkie Krupy',\n  5101: 'Duży Śnieg',\n  5000: 'Śnieg',\n  5100: 'Lekki Śnieg',\n  5001: 'Zamieć',\n  8000: 'Burza',\n  2100: 'Lekka Mgła',\n  2000: 'Mgła',\n  1001: 'Pochmurnie',\n  1102: 'Przewaga Chmur',\n  1101: 'Częściowe Zachmurzenie',\n  1100: 'Przeważnie Słonecznie',\n  1000: 'Słonecznie'\n};\nexport default Compare;","map":{"version":3,"sources":["C:/Users/vened/Desktop/Weather/my_weather/client/src/components/Compare/Compare.js"],"names":["React","Form","CalDate","CalCelsius","CalWindSpeed","CompareCurrentWeatherItem","CompareForecastItem","API_key_OWM","API_key_WA","API_key_w","Compare","Component","constructor","props","nextProperty","Property","Elements","newIndex","id","setState","console","log","prevProperty","setSource","source","getForecastDailyOWM","state","lat","lon","getForecastDailyWA","city","getForecastDailyTI","getForecastDailyVC","getForecastDailyWB","getDefaultCompare","compareCurrentElements","result","fetch","then","response","ok","Error","json","coord","getWeatherWeatherApi","getWeatherTommorowIo","getWeatherVisualcrossing","getWeatherWeatherbit","timezone","dt","weather","description","main","temp","pressure","wind","speed","weatherIcons","name","weatherComp","tempComp","pressureComp","windComp","currentProperty","responseAirQuality","catch","err","prevState","error","getWeatherCompare","e","preventDefault","value","ForecastDailyElements","i","daily","max","min","wind_speed","clouds","humidity","current","last_updated","condition","text","temp_c","pressure_mb","wind_kph","code","forecast","forecastday","date","day","maxtemp_c","mintemp_c","avghumidity","data","timelines","startTime","weatherConditions","intervals","values","weatherCode","temperature","pressureSurfaceLevel","windSpeed","cloudCover","location","currentConditions","datetime","icon","sealevelpressure","wspd","conditions","maxt","mint","cloudcover","ob_time","Math","floor","pres","wind_spd","max_temp","min_temp","inputHandler","target","undefined","componentDidMount","render","backgroundImage","length","map","fde"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport Form from '../Form/Form'\r\nimport CalDate from '../Functions/CalDate';\r\nimport CalCelsius from '../Functions/CalCelsius';\r\nimport CalWindSpeed from '../Functions/CalWindSpeed';\r\nimport CompareCurrentWeatherItem from './CompareCurrentWeatherItem';\r\nimport CompareForecastItem from './CompareForecastItem';\r\n\r\nimport './Compare.css';\r\n\r\nconst API_key_OWM=\"157d33f8987d245bc6a1997408e90015\";\r\nconst API_key_WA = \"d42d0d989ead4316b9d143558213105\";\r\nconst API_key_w = \"4c7c27f8abf34ae09c61bad9a897be7e\";\r\n\r\nclass Compare extends React.Component\r\n{\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.state=\r\n        {\r\n            value:\"\",\r\n            compareCurrentElements:[\r\n            ],\r\n            ForecastDailyElements:[\r\n            ],\r\n            ForecastDailyElements:[\r\n            ],\r\n            source:\"OpenWeatherMap\",\r\n            city:undefined,\r\n            lat:undefined,\r\n            lon:undefined,\r\n            currentProperty:undefined,\r\n            Property:undefined,\r\n            Property:undefined,\r\n            weatherComp:undefined,\r\n            tempComp:undefined,\r\n            pressureComp:undefined,\r\n            windComp:undefined,\r\n            error:false\r\n        };\r\n    };\r\n\r\n    nextProperty = (Property,Elements) => \r\n    {\r\n        const newIndex = Property.id +1;\r\n\r\n        this.setState(\r\n        {\r\n            Property: Elements[newIndex]\r\n        });\r\n\r\n        console.log(newIndex);\r\n    };\r\n\r\n    prevProperty= (Property,Elements) => \r\n    {\r\n        const newIndex = Property.id -1;\r\n\r\n        this.setState(\r\n        {\r\n            Property: Elements[newIndex]\r\n        });\r\n    };\r\n    setSource = (source) => \r\n    {\r\n        this.setState(\r\n        {\r\n                source:source\r\n        });\r\n\r\n        if(source===\"OpenWeatherMap\")\r\n        {\r\n            this.getForecastDailyOWM(this.state.lat,this.state.lon);\r\n        }\r\n\r\n        if(source===\"WeatherApi\")\r\n        {\r\n            this.getForecastDailyWA(this.state.city);\r\n        }\r\n\r\n        if(source===\"TommorowIO\")\r\n        {\r\n            this.getForecastDailyTI(this.state.lat,this.state.lon);\r\n        }\r\n\r\n        if(source===\"VisualCrossing\")\r\n        {\r\n            this.getForecastDailyVC(this.state.city);\r\n        }\r\n\r\n        if(source===\"Weatherbit\")\r\n        {\r\n            this.getForecastDailyWB(this.state.city);\r\n        }\r\n    };\r\n\r\n    getDefaultCompare = (city) =>\r\n    {\r\n        console.log(city)\r\n        \r\n        this.setState(\r\n        {\r\n            compareCurrentElements:[]\r\n        });\r\n        \r\n        const result = fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city}&lang=pl&APPID=${API_key_OWM}`)\r\n        .then(response => {\r\n            if(response.ok){\r\n                return response\r\n            }\r\n            throw Error(\"Błąd pobierania danych z API\")\r\n        })\r\n        .then(response => response.json())\r\n        .then(response => {\r\n            console.log(response)\r\n            this.getForecastDailyOWM(response.coord.lat,response.coord.lon)\r\n            this.getWeatherWeatherApi(city)\r\n            this.getWeatherTommorowIo(response.coord.lat,response.coord.lon)\r\n            this.getWeatherVisualcrossing(city)\r\n            this.getWeatherWeatherbit(city)\r\n            this.setState({\r\n                timezone:response.timezone,\r\n                compareCurrentElements:[...this.state.compareCurrentElements,{\r\n                    'id':1,\r\n                    'date':CalDate(response.dt,response.timezone),\r\n                    'weather':response.weather[0].description,\r\n                    'temp':CalCelsius(response.main.temp),\r\n                    'pressure':response.main.pressure,\r\n                    'wind':CalWindSpeed(response.wind.speed),\r\n                    'image':weatherIcons[response.weather[0].id],\r\n                    'source':\"OpenWeatherMap\"\r\n                }],\r\n                city:response.name,\r\n                lat:response.coord.lat,\r\n                lon:response.coord.lon,\r\n                weatherComp:response.weather[0].description,\r\n                tempComp:CalCelsius(response.main.temp),\r\n                pressureComp:response.main.pressure,\r\n                windComp:CalWindSpeed(response.wind.speed),\r\n            });\r\n            this.setState(\r\n            {\r\n                currentProperty:this.state.compareCurrentElements[0]\r\n            }); \r\n\r\n            return fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city}&lang=pl&APPID=${API_key_OWM}`);\r\n        })\r\n        .then(responseAirQuality => responseAirQuality.json()) \r\n        .catch(err =>{\r\n            console.log(err);\r\n            this.setState(prevState =>\r\n            {\r\n                return{\r\n                error:true,\r\n                city:prevState.city\r\n                }\r\n            });\r\n        });\r\n    };\r\n    getWeatherCompare = (e) =>\r\n    {\r\n        e.preventDefault()\r\n        \r\n        this.setState(\r\n        {\r\n            compareCurrentElements:[]\r\n        });\r\n        \r\n        const result = fetch(`http://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&lang=pl&APPID=${API_key_OWM}`)\r\n        .then(response => {\r\n            if(response.ok){\r\n                return response\r\n            }\r\n            throw Error(\"Błąd pobierania danych z API\")\r\n        })\r\n        .then(response => response.json())\r\n        .then(response => {\r\n            console.log(response)\r\n            this.getForecastDailyOWM(response.coord.lat,response.coord.lon)\r\n            this.getWeatherWeatherApi(this.state.value)\r\n            this.getWeatherTommorowIo(response.coord.lat,response.coord.lon)\r\n            this.getWeatherVisualcrossing(this.state.value)\r\n            this.getWeatherWeatherbit(this.state.value)\r\n            this.setState({\r\n                timezone:response.timezone,\r\n                compareCurrentElements:[...this.state.compareCurrentElements,{\r\n                    'id':1,\r\n                    'date':CalDate(response.dt),\r\n                    'weather':response.weather[0].description,\r\n                    'temp':CalCelsius(response.main.temp),\r\n                    'pressure':response.main.pressure,\r\n                    'wind':CalWindSpeed(response.wind.speed),\r\n                    'image':weatherIcons[response.weather[0].id],\r\n                    'source':\"OpenWeatherMap\"\r\n                }],\r\n                city:response.name,\r\n                lat:response.coord.lat,\r\n                lon:response.coord.lon,\r\n                weatherComp:response.weather[0].description,\r\n                tempComp:CalCelsius(response.main.temp),\r\n                pressureComp:response.main.pressure,\r\n                windComp:CalWindSpeed(response.wind.speed),\r\n            });\r\n            this.setState(\r\n            {\r\n                currentProperty:this.state.compareCurrentElements[0]\r\n            }); \r\n\r\n            return fetch(`http://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&lang=pl&APPID=${API_key_OWM}`);\r\n        })\r\n        .then(responseAirQuality => responseAirQuality.json()) \r\n        .catch(err =>{\r\n            console.log(err);\r\n            this.setState(prevState =>\r\n            {\r\n                return{\r\n                error:true,\r\n                city:prevState.city\r\n                }\r\n            });\r\n        });\r\n    };\r\n\r\n    getForecastDailyOWM = (lat,lon)=>\r\n    {\r\n        console.log(lat);\r\n\r\n        this.setState({\r\n            ForecastDailyElements:[]\r\n        });\r\n        \r\n        fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&lang=pl&appid=${API_key_OWM}`)\r\n        .then(response => \r\n        {\r\n            if(response.ok)\r\n            {\r\n                return response;\r\n            }\r\n              throw Error(\"Błąd pobierania danych z API\");\r\n        })\r\n        .then(response => response.json())\r\n        .then(response => \r\n        {\r\n            console.log(response);\r\n            for (var i = 0; i < 8; i++) \r\n            {\r\n                this.setState(\r\n                {\r\n                    ForecastDailyElements:[...this.state.ForecastDailyElements,\r\n                    {\r\n                        'id':i,\r\n                        'date':CalDate(response.daily[i].dt,this.state.timezone),\r\n                        'weather':response.daily[i].weather[0].description,\r\n                        'tempMax':CalCelsius(response.daily[i].temp.max),\r\n                        'tempMin':CalCelsius(response.daily[i].temp.min),\r\n                        'pressure':response.daily[i].pressure,\r\n                        'wind':CalWindSpeed(response.daily[i].wind_speed),\r\n                        'image':weatherIcons[response.daily[i].weather[0].id],\r\n                        'clouds':response.daily[i].clouds,\r\n                        'humidity':response.daily[i].humidity,\r\n                    }],  \r\n                });\r\n            };  \r\n            this.setState(\r\n            {\r\n                Property:this.state.ForecastDailyElements[1]\r\n            });\r\n        });\r\n    };\r\n    getWeatherWeatherApi = (city) =>\r\n    {\r\n            \r\n        fetch(`http://api.weatherapi.com/v1/current.json?key=${API_key_WA}&q=${city}&days=7&aqi=yes&alerts=yes&lang=pl`)\r\n        .then(response => \r\n        {\r\n            if(response.ok)\r\n            {\r\n                return response;\r\n            }\r\n            throw Error(\"Błąd pobierania danych z API\");\r\n        })\r\n        .then(response => response.json())\r\n        .then(response =>\r\n        {\r\n            console.log(response);\r\n            this.setState(\r\n            {\r\n                compareCurrentElements:[...this.state.compareCurrentElements,\r\n                {\r\n                    'id':2,\r\n                    'date':response.current.last_updated,\r\n                    'weather':response.current.condition.text,\r\n                    'temp':response.current.temp_c,\r\n                    'pressure':response.current.pressure_mb,\r\n                    'wind':response.current.wind_kph,\r\n                    'image':weatherIcons[response.current.condition.code],\r\n                    'source':\"WeatherApi\"\r\n                }],\r\n            });\r\n        })\r\n        .catch(err =>\r\n        {\r\n            console.log(err);\r\n            this.setState(prevState =>\r\n            {\r\n                return{\r\n                error:true,\r\n                city:prevState.city\r\n                }\r\n            });\r\n        });\r\n    };\r\n\r\n    getForecastDailyWA = (city) =>\r\n    {\r\n        this.setState(\r\n        {\r\n            ForecastDailyElements:[]\r\n        });\r\n            \r\n        fetch(`http://api.weatherapi.com/v1/forecast.json?key=${API_key_WA}&q=${city}&days=4&aqi=yes&alerts=yes&lang=pl`)\r\n        .then(response => \r\n        {\r\n            if(response.ok)\r\n            {\r\n                return response;\r\n            }\r\n            throw Error(\"Błąd pobierania danych z API\");\r\n        })\r\n        .then(response => response.json())\r\n        .then(response => \r\n        {\r\n            console.log(response);\r\n            for (var i = 0; i < 3; i++) \r\n            {\r\n                this.setState(\r\n                {\r\n                    ForecastDailyElements:[...this.state.ForecastDailyElements,\r\n                    {\r\n                        'id':i,\r\n                        'date':response.forecast.forecastday[i].date,\r\n                        'weather':response.forecast.forecastday[i].day.condition.text,\r\n                        'tempMax':response.forecast.forecastday[i].day.maxtemp_c,\r\n                        'tempMin':response.forecast.forecastday[i].day.mintemp_c,\r\n                        'pressure':\"-\",\r\n                        'wind':\"-\",\r\n                        'image':weatherIcons[response.forecast.forecastday[i].day.condition.code],\r\n                        'clouds':\"-\",\r\n                        'humidity':response.forecast.forecastday[i].day.avghumidity,\r\n                    }],\r\n                });\r\n            }\r\n            this.setState(\r\n            {\r\n                Property:this.state.ForecastDailyElements[1]\r\n            }) \r\n        })\r\n        .catch(err =>\r\n        {\r\n            console.log(err)\r\n            this.setState(prevState =>\r\n            {\r\n                return{\r\n                error:true,\r\n                city:prevState.city\r\n                }\r\n            });\r\n        });\r\n    };\r\n\r\n    getWeatherTommorowIo = (lat,lon) =>\r\n    {\r\n        \r\n        this.setState(\r\n        {\r\n            ForecastDailyElements:[]\r\n        });\r\n            \r\n        fetch(`https://api.tomorrow.io/v4/timelines?location=${lat},${lon}&fields=temperature,humidity,windSpeed,cloudCover,weatherCode,pressureSurfaceLevel&timesteps=1d&units=metric&apikey=Xsa59kYGGrHiXs1TZ3cItU7zRZ4FfGQ8`)\r\n        .then(response => \r\n        {\r\n            if(response.ok)\r\n            {\r\n                return response;\r\n            }\r\n            throw Error(\"Błąd pobierania danych z API\");\r\n        })\r\n        .then(response => response.json())\r\n        .then(response => \r\n        {\r\n            console.log(response);\r\n            this.setState(\r\n            {\r\n                compareCurrentElements:[...this.state.compareCurrentElements,\r\n                {\r\n                    'id':3,\r\n                    'date':response.data.timelines[0].startTime,\r\n                    'weather':weatherConditions[response.data.timelines[0].intervals[0].values.weatherCode],\r\n                    'temp':response.data.timelines[0].intervals[0].values.temperature,\r\n                    'pressure':response.data.timelines[0].intervals[0].values.pressureSurfaceLevel,\r\n                    'wind':CalWindSpeed(response.data.timelines[0].intervals[0].values.windSpeed),\r\n                    'image':weatherIcons[response.data.timelines[0].intervals[0].values.weatherCode],\r\n                    'source':\"TommorowIo\"\r\n                }],\r\n            });\r\n        })\r\n        .catch(err =>\r\n        {\r\n            console.log(err)\r\n            this.setState(prevState =>\r\n            {\r\n                return{\r\n                error:true,\r\n                city:prevState.city\r\n                }\r\n            });\r\n        });\r\n    };\r\n\r\n    getForecastDailyTI = (lat,lon) =>\r\n    {\r\n        this.setState(\r\n        {\r\n            ForecastDailyElements:[]\r\n        });\r\n            \r\n        fetch(`https://api.tomorrow.io/v4/timelines?location=${lat},${lon}&fields=temperature,humidity,windSpeed,cloudCover,weatherCode,pressureSurfaceLevel&timesteps=1d&units=metric&apikey=Xsa59kYGGrHiXs1TZ3cItU7zRZ4FfGQ8`)\r\n        .then(response => \r\n        {\r\n            if(response.ok)\r\n            {\r\n                return response;\r\n            }\r\n            throw Error(\"Błąd pobierania danych z API\");\r\n        })\r\n        .then(response => response.json())\r\n        .then(response => \r\n        {\r\n            console.log(response);\r\n            for (var i = 0; i < 8; i++) \r\n            {\r\n                this.setState(\r\n                    {\r\n                    ForecastDailyElements:[...this.state.ForecastDailyElements,\r\n                    {\r\n                        'id':i,\r\n                        'date':response.data.timelines[0].intervals[i].startTime,\r\n                        'weather':weatherConditions[response.data.timelines[0].intervals[i].values.weatherCode],\r\n                        'tempMax':response.data.timelines[0].intervals[i].values.temperature,\r\n                        'tempMin':response.data.timelines[0].intervals[i].values.temperature,\r\n                        'pressure':response.data.timelines[0].intervals[i].values.pressureSurfaceLevel,\r\n                        'wind':response.data.timelines[0].intervals[i].values.windSpeed,\r\n                        'image':weatherIcons[response.data.timelines[0].intervals[i].values.weatherCode],\r\n                        'clouds':response.data.timelines[0].intervals[i].values.cloudCover,\r\n                        'humidity':response.data.timelines[0].intervals[i].values.humidity,\r\n                    }],  \r\n                });\r\n            }  \r\n            this.setState(\r\n            {\r\n                Property:this.state.ForecastDailyElements[1]\r\n            }); \r\n        })\r\n        .catch(err =>\r\n        {\r\n            console.log(err);\r\n            this.setState(prevState =>{\r\n                return{\r\n                error:true,\r\n                city:prevState.city\r\n                }\r\n            });\r\n        });\r\n    };\r\n\r\n    getWeatherVisualcrossing = (city) =>\r\n    {\r\n\r\n        this.setState(\r\n            {\r\n            ForecastDailyElements:[]\r\n        });\r\n            \r\n        fetch(`https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/weatherdata/forecast?aggregateHours=24&combinationMethod=aggregate&contentType=json&unitGroup=metric&locationMode=single&iconSet=icons2&key=LHKNDUGQ4MSQTL5749JVGX4XV&dataElements=default&locations=${city}`)\r\n        .then(response => \r\n        {\r\n            if(response.ok)\r\n            {\r\n                return response;\r\n            }\r\n            throw Error(\"Błąd pobierania danych z API\");\r\n        })\r\n        .then(response => response.json())\r\n        .then(response => \r\n        {\r\n            console.log(response);\r\n            this.setState(\r\n            {\r\n                compareCurrentElements:[...this.state.compareCurrentElements,\r\n                {\r\n                    'id':4,\r\n                    'date':response.location.currentConditions.datetime,\r\n                    'weather':response.location.currentConditions.icon,\r\n                    'temp':response.location.currentConditions.temp,\r\n                    'pressure':response.location.currentConditions.sealevelpressure,\r\n                    'wind':response.location.currentConditions.wspd,\r\n                    'image':weatherIcons[0],\r\n                    'source':\"VisualCrossing\"\r\n                }],\r\n            });\r\n        })\r\n        .catch(err =>\r\n        {\r\n            console.log(err)\r\n            this.setState(prevState =>{\r\n                return{\r\n                error:true,\r\n                city:prevState.city\r\n                }\r\n            });\r\n        });\r\n    };\r\n\r\n    getForecastDailyVC = (city) =>\r\n    {\r\n        this.setState(\r\n        {\r\n            ForecastDailyElements:[]\r\n        });\r\n            \r\n        fetch(`https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/weatherdata/forecast?aggregateHours=24&combinationMethod=aggregate&contentType=json&unitGroup=metric&locationMode=single&iconSet=icons2&key=LHKNDUGQ4MSQTL5749JVGX4XV&dataElements=default&locations=${city}`)\r\n        .then(response => \r\n        {\r\n            if(response.ok)\r\n            {\r\n                return response;\r\n            }\r\n            throw Error(\"Błąd pobierania danych z API\");\r\n        })\r\n        .then(response => response.json())\r\n        .then(response => \r\n        {\r\n            console.log(response);\r\n            for (var i = 0; i < 8; i++) \r\n            {\r\n                this.setState(\r\n                {\r\n                    ForecastDailyElements:[...this.state.ForecastDailyElements,\r\n                    {\r\n                        'id':i,\r\n                        'date':response.location.values[i].datetime,\r\n                        'weather':response.location.values[i].conditions,\r\n                        'tempMax':response.location.values[i].maxt,\r\n                        'tempMin':response.location.values[i].mint,\r\n                        'pressure':\"-\",\r\n                        'wind':1.6*response.location.values[i].wspd,\r\n                        'image':\"-\",\r\n                        'clouds':response.location.values[i].cloudcover,\r\n                        'humidity':response.location.values[i].humidity,\r\n                    }],  \r\n                });\r\n            }  \r\n            this.setState(\r\n            {\r\n                Property:this.state.ForecastDailyElements[1]\r\n            });\r\n        })\r\n        .catch(err =>\r\n        {\r\n            console.log(err)\r\n            this.setState(prevState =>\r\n            {\r\n                return{\r\n                error:true,\r\n                city:prevState.city\r\n                }\r\n            })\r\n        });\r\n    };\r\n\r\n    getWeatherWeatherbit = (city) =>\r\n    {\r\n        this.setState(\r\n        {\r\n            ForecastDailyElements:[]\r\n        });\r\n            \r\n        fetch(` https://api.weatherbit.io/v2.0/forecast/daily?city=${city}&lang=pl&key=${API_key_w}`)\r\n        .then(response => \r\n        {\r\n            if(response.ok)\r\n            {\r\n                return response;\r\n            }\r\n            throw Error(\"Błąd pobierania danych z API\");\r\n        })\r\n        .then(response => response.json())\r\n        .then(response => \r\n        {\r\n            console.log(response);\r\n            this.setState(\r\n            {\r\n                compareCurrentElements:[...this.state.compareCurrentElements,\r\n                {\r\n                    'id':5,\r\n                    'date':response.data[0].ob_time,\r\n                    'weather':response.data[0].weather.description,\r\n                    'temp':response.data[0].temp,\r\n                    'pressure':Math.floor(response.data[0].pres),\r\n                    'wind':Math.floor(1.609*response.data[0].wind_spd),\r\n                    'image':weatherIcons[response.data[0].weather.code],\r\n                    'source':\"Weatherbit\"\r\n                }],\r\n            });\r\n        })\r\n        .catch(err =>\r\n        {\r\n            console.log(err);\r\n            this.setState(prevState =>\r\n            {\r\n                return{\r\n                error:true,\r\n                city:prevState.city\r\n                }\r\n            });\r\n        });\r\n    };\r\n\r\n    getForecastDailyWB = (city) =>\r\n    {\r\n\r\n        this.setState({\r\n            ForecastDailyElements:[]\r\n        });\r\n            \r\n        fetch(` https://api.weatherbit.io/v2.0/forecast/daily?city=${city}&lang=pl&key=${API_key_w}`)\r\n        .then(response => \r\n        {\r\n            if(response.ok)\r\n            {\r\n                return response;\r\n            }\r\n            throw Error(\"Błąd pobierania danych z API\");\r\n        })\r\n        .then(response => response.json())\r\n        .then(response => \r\n        {\r\n            console.log(response);\r\n            for (var i = 0; i < 8; i++) \r\n            {\r\n                this.setState(\r\n                {\r\n                    ForecastDailyElements:[...this.state.ForecastDailyElements,\r\n                    {\r\n                        'id':i,\r\n                        'date':response.data[i].datetime,\r\n                        'weather':response.data[i].weather.description,\r\n                        'tempMax':response.data[i].max_temp,\r\n                        'tempMin':response.data[i].min_temp,\r\n                        'pressure':response.data[i].pres,\r\n                        'wind':Math.floor(1.609*response.data[i].wind_spd),\r\n                        'image':weatherIcons[response.data[i].weather.code],\r\n                        'clouds':response.data[i].clouds,\r\n                        'humidity':\"-\",\r\n                    }],  \r\n                });\r\n            }  \r\n            this.setState(\r\n            {\r\n                Property:this.state.ForecastDailyElements[1]\r\n            }); \r\n        })\r\n        .catch(err =>\r\n        {\r\n            console.log(err);\r\n            this.setState(prevState =>\r\n            {\r\n                return{\r\n                error:true,\r\n                city:prevState.city\r\n                }\r\n            });\r\n        });\r\n    };\r\n\r\n    inputHandler=(e)=>\r\n    {\r\n        this.setState(\r\n        {\r\n            value:e.target.value\r\n        });\r\n    };\r\n    componentDidMount()\r\n    {\r\n        this.getDefaultCompare(\"Warszawa\");\r\n    }\r\n    render(){\r\n            return( \r\n                <div    style={\r\n                        { \r\n                            backgroundImage: `url(\"/images/bg_comp.jpg\")` \r\n                        }\r\n                }>\r\n                    <div className=\"city-form\">\r\n                        <Form \r\n                            value={this.state.value}  \r\n                            handler={this.inputHandler}\r\n                            submit={this.getWeatherCompare}\r\n                        /> \r\n                    </div>\r\n                    <div className=\"compare-main-cards\">\r\n                        {this.state.currentProperty ?( \r\n                            <div className=\"compare-main-cards-slider\">\r\n                                <div className=\"compare-main-cards-slider-wrapper\"   style={\r\n                                                                                {\r\n                                                                                    'transform':`translateX(-${this.state.currentProperty.id*(100/this.state.compareCurrentElements.length)}%)`\r\n                                                                                }\r\n                                }>\r\n                                    {this.state.compareCurrentElements.map(fde => <CompareCurrentWeatherItem compare={this.state} key={fde.id} element={fde} />)}\r\n                                </div>\r\n                        \r\n                            </div>\r\n                    ):null}\r\n                    </div>\r\n                    <button \r\n                        onClick={() => this.setSource(\"OpenWeatherMap\")} \r\n                    >\r\n                        OpenWeatherMap\r\n                    </button>\r\n                    <button \r\n                        onClick={() => this.setSource(\"WeatherApi\")} \r\n                    >\r\n                        WeatherApi\r\n                    </button>\r\n                    <button \r\n                        onClick={() => this.setSource(\"TommorowIO\")} \r\n                    >\r\n                        TommorowIO\r\n                    </button>\r\n                    <button \r\n                        onClick={() => this.setSource(\"VisualCrossing\")}\r\n                    >\r\n                        VisualCrossing\r\n                    </button>\r\n                    <button \r\n                        onClick={() => this.setSource(\"Weatherbit\")}\r\n                    >\r\n                        Weatherbit\r\n                    </button>\r\n                    <div className=\"compare-forecast-main\">\r\n                        {this.state.Property ?(\r\n                            <div className=\"main-cards\"> \r\n                                <button className=\"left\"    style={\r\n                                                                { \r\n                                                                backgroundImage: `url(\"/images/arrow_left.png\")` \r\n                                                                }}\r\n                                            onClick={() => this.prevProperty(this.state.Property,this.state.ForecastDailyElements)} \r\n                                            disabled={this.state.Property.id === 0}\r\n                                    >\r\n                                    </button>\r\n                                    <button className=\"right\"   style={\r\n                                                                { \r\n                                                                    backgroundImage: `url(\"/images/arrow_right.png\")` \r\n                                                                }}\r\n                                            onClick={() => this.nextProperty(this.state.Property,this.state.ForecastDailyElements)} \r\n                                            disabled={this.state.Property.id === this.state.ForecastDailyElements.length-3}\r\n                                        >\r\n                                    </button>\r\n                                <div className=\"cards-slider\">         \r\n                                    <div className=\"cards-slider-wrapper\"   style={\r\n                                                                            {\r\n                                                                                'transform':`translateX(-${this.state.Property.id*(100/this.state.ForecastDailyElements.length)}%)`\r\n                                                                            }\r\n                                    }>\r\n                                        {this.state.ForecastDailyElements.map(fde => <CompareForecastItem key={fde.id} element={fde} />)}\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            ):null}\r\n                    </div>\r\n                </div>\r\n            )\r\n    }\r\n};\r\n\r\nconst weatherIcons = \r\n{\r\n    200:'/images/200.png',\r\n    201:'/images/201.png',\r\n    202:'/images/202.png',\r\n    210:'/images/210.png',\r\n    211:'/images/211.png',\r\n    212:'/images/212.png',\r\n    221:'/images/212.png',\r\n    230:'/images/230D.png',\r\n    231:'/images/231.png',\r\n    232:'/images/232.png',\r\n    300:'/images/300D.png',\r\n    301:'/images/301.png',\r\n    302:'/images/302.png',\r\n    310:'/images/310D.png',\r\n    311:'/images/311.png',\r\n    312:'/images/312.png',\r\n    313:'/images/313_1.png',\r\n    314:'/images/314.png',\r\n    321:'/images/321.png',\r\n    500:'/images/500D.png',\r\n    501:'/images/501.png',\r\n    502:'/images/502.png',\r\n    503:'/images/503.png',\r\n    504:'/images/504.png',\r\n    511:'/images/511.png',\r\n    520:'/images/520D.png',\r\n    521:'/images/521_2.png',\r\n    522:'/images/522_1.png',\r\n    531:'/images/522_1.png',\r\n    600:'/images/600D.png',\r\n    601:'/images/601.png',\r\n    602:'/images/602.png',\r\n    611:'/images/611.png',\r\n    612:'/images/612D.png',\r\n    613:'/images/613.png',\r\n    615:'/images/615D.png',\r\n    616:'/images/616.png',\r\n    620:'/images/620D.png',\r\n    621:'/images/621.png',\r\n    622:'/images/622.png',\r\n    701:'/images/701_2.png',\r\n    711:'/images/701_2.png',\r\n    721:'/images/701_2.png',\r\n    731:'/images/701_2.png',\r\n    741:'/images/701_2.png',\r\n    751:'/images/701_2.png',\r\n    761:'/images/701_2.png',\r\n    762:'/images/701_2.png',\r\n    771:'/images/701_2.png',\r\n    781:'/images/701_2.png',\r\n    800:'/images/800D.png',\r\n    801:'/images/801D.png',\r\n    802:'/images/802D.png',\r\n    803:'/images/803D.png',\r\n    804:'/images/804.png',\r\n    1000:'/images/800D.png',\r\n    1003:'/images/801D.png',\r\n    1006:'/images/802D.png',\r\n    1009:'/images/804.png',\r\n    1030:'/images/701_2.png',\r\n    1063:'/images/500D.png',\r\n    1066:'/images/600.png',\r\n    1069:'/images/613.png',\r\n    1072:'/images/511.png',\r\n    1087:'/images/200.png',\r\n    1114:'/images/602.png',\r\n    1117:'/images/622.png',\r\n    1135:'/images/702_1.png',\r\n    1147:'/images/702_1.png',\r\n    1150:'/images/300D.png',\r\n    1153:'/images/301.png',\r\n    1168:'/images/511.png',\r\n    1171:'/images/501.png',\r\n    1180:'/images/502.png',\r\n    1183:'/images/500D.png',\r\n    1186:'/images/500D.png',\r\n    1189:'/images/501.png',\r\n    1192:'/images/502.png',\r\n    1195:'/images/503.png',\r\n    1198:'/images/511.png',\r\n    1201:'/images/511.png',\r\n    1204:'/images/611.png',\r\n    1207:'/images/612D.png',\r\n    1210:'/images/600D.png',\r\n    1213:'/images/600D.png',\r\n    1216:'/images/601.png',\r\n    1219:'/images/601.png',\r\n    1222:'/images/602.png',\r\n    1225:'/images/602.png',\r\n    1237:'/images/511.png',\r\n    1240:'/images/520.png',\r\n    1243:'/images/521_2.png',\r\n    1246:'/images/522_1.png',\r\n    1249:'/images/612D.png',\r\n    1252:'/images/613.png',\r\n    1255:'/images/612D.png',\r\n    1258:'/images/613.png',\r\n    1261:'/images/511.png',\r\n    1264:'/images/511.png',\r\n    1273:'/images/200.png',\r\n    1276:'/images/201.png',\r\n    1279:'/images/602.png',\r\n    1282:'/images/602.png',\r\n    4201:'/images/502.png',\r\n    4001:'/images/501.png',\r\n    4200:'/images/500D.png',\r\n    6201:'/images/511.png',\r\n    6001:'/images/511.png',\r\n    6200:'/images/511.png',\r\n    6000:'/images/511.png',\r\n    4000:'/images/301.png',\r\n    7101:'/images/511.png',\r\n    7000:'/images/511.png',\r\n    7102:'/images/511.png',\r\n    5101:'/images/602.png',\r\n    5000:'/images/601.png',\r\n    5100:'/images/600D.png',\r\n    5001:'/images/601.png',\r\n    8000:'/images/201.png',\r\n    2100:'/images/701_2.png',\r\n    2000:'/images/701_2.png',\r\n    1001:'/images/804.png',\r\n    1102:'/images/803D.png',\r\n    1101:'/images/802D.png',\r\n    1100:'/images/801D.png',\r\n}\r\n\r\nconst weatherConditions = \r\n{\r\n    4201:'Duży deszcz',\r\n    4001:'Deszcz',\r\n    4200:'Lekki Deszcz',\r\n    6201:'Duży Marznący Deszcz',\r\n    6001:'Marznący Deszcz',\r\n    6200:'Lekki Marznący Deszcz',\r\n    6000:'Marznąca Mrzawka',\r\n    4000:'Mrzawka',\r\n    7101:'Duże Krupy',\r\n    7000:'Krupy',\r\n    7102:'Lekkie Krupy',\r\n    5101:'Duży Śnieg',\r\n    5000:'Śnieg',\r\n    5100:'Lekki Śnieg',\r\n    5001:'Zamieć',\r\n    8000:'Burza',\r\n    2100:'Lekka Mgła',\r\n    2000:'Mgła',\r\n    1001:'Pochmurnie',\r\n    1102:'Przewaga Chmur',\r\n    1101:'Częściowe Zachmurzenie',\r\n    1100:'Przeważnie Słonecznie',\r\n    1000:'Słonecznie',\r\n}\r\n\r\nexport default Compare;"]},"metadata":{},"sourceType":"module"}