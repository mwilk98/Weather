{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vened\\\\Desktop\\\\Weather\\\\my_weather\\\\client\\\\src\\\\components\\\\AirCondition\\\\AirCondition.js\";\nimport React from 'react';\nimport Form from '../Form/Form';\nimport CalDate from '../Functions/CalDate';\nimport CalTime from '../Functions/CalTime';\nimport AirConditionItem from './AirConditionItem';\nimport './AirCondition.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_key = \"157d33f8987d245bc6a1997408e90015\";\n\nclass AirCondition extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getAir = e => {\n      e.preventDefault();\n      fetch(`http://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&APPID=${API_key}`).then(response => {\n        if (response.ok) {\n          return response;\n        }\n\n        throw Error(\"Błąd pobierania danych z API\");\n      }).then(response => response.json()).then(response => {\n        console.log(response);\n        this.getAirQuality(response.coord.lat, response.coord.lon);\n        this.setState(state => ({\n          city: state.value,\n          country: response.sys.country,\n          date: CalDate(response.dt),\n          time: CalTime(response.dt, response.timezone),\n          error: false\n        }));\n      }).catch(err => {\n        console.log(err);\n        this.setState(prevState => {\n          return {\n            error: true,\n            city: prevState.city\n          };\n        });\n      });\n    };\n\n    this.inputHandler = e => {\n      this.setState({\n        value: e.target.value\n      });\n    };\n\n    this.submitHandler = e => {\n      this.getAir(e);\n    };\n\n    this.state = {\n      value: \"\",\n      city: \"Miasto\",\n      country: \"\",\n      aqi: undefined,\n      co: undefined,\n      nh3: undefined,\n      no: undefined,\n      no2: undefined,\n      o3: undefined,\n      pm2_5: undefined,\n      pm10: undefined,\n      so2: undefined,\n      error: false\n    };\n  }\n\n  getAirQuality(lat, lon) {\n    const result = fetch(`http://api.openweathermap.org/data/2.5/air_pollution?lat=${lat}&lon=${lon}&appid=${API_key}`).then(responseAirQuality => {\n      if (responseAirQuality.ok) {\n        return responseAirQuality;\n      }\n\n      throw Error(\"Błąd pobierania danych z API\");\n    }).then(responseAirQuality => responseAirQuality.json()).then(responseAirQuality => {\n      console.log(responseAirQuality);\n      this.setState(state => ({\n        co: responseAirQuality.list[0].components.co,\n        nh3: responseAirQuality.list[0].components.nh3,\n        no: responseAirQuality.list[0].components.no,\n        no2: responseAirQuality.list[0].components.no2,\n        o3: responseAirQuality.list[0].components.o3,\n        pm2_5: responseAirQuality.list[0].components.pm2_5,\n        pm10: responseAirQuality.list[0].components.pm10,\n        so2: responseAirQuality.list[0].components.so2,\n        color: responseAirQuality.list[0].main.aqi,\n        error: false\n      }));\n      return fetch(`http://api.openweathermap.org/data/2.5/air_pollution?lat=${lat}&lon=${lon}&appid=${API_key}`);\n    }).then(responseAirQuality => responseAirQuality.json()).catch(err => {\n      console.log(err);\n      this.setState(prevState => {\n        return {\n          error: true,\n          city: prevState.city\n        };\n      });\n    });\n    result.then(r => {\n      fetch(`http://localhost:3001/api/air`).then(responseAir => {\n        if (responseAir.ok) {\n          return responseAir;\n        }\n\n        throw Error(\"Błąd pobierania danych z API\");\n      }).then(responseAir => responseAir.json()).then(responseAir => {\n        console.log(responseAir);\n        console.log(r);\n        this.setState(state => ({\n          aqi: responseAir[r.list[0].main.aqi - 1].condition,\n          error: false\n        }));\n      });\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main\",\n      style: {\n        backgroundImage: `url(\"/images/bg_air.jpg\")`\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"city-form\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Wyszukaj miasto dla kt\\xF3rego chcesz sprawdzi\\u0107 obecny stan powietrza\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Form, {\n          value: this.state.value,\n          handler: this.inputHandler,\n          submit: this.submitHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: this.state.city ? /*#__PURE__*/_jsxDEV(AirConditionItem, {\n          air: this.state\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 25\n        }, this) : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default AirCondition;","map":{"version":3,"sources":["C:/Users/vened/Desktop/Weather/my_weather/client/src/components/AirCondition/AirCondition.js"],"names":["React","Form","CalDate","CalTime","AirConditionItem","API_key","AirCondition","Component","constructor","props","getAir","e","preventDefault","fetch","state","value","then","response","ok","Error","json","console","log","getAirQuality","coord","lat","lon","setState","city","country","sys","date","dt","time","timezone","error","catch","err","prevState","inputHandler","target","submitHandler","aqi","undefined","co","nh3","no","no2","o3","pm2_5","pm10","so2","result","responseAirQuality","list","components","color","main","r","responseAir","condition","render","backgroundImage"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,cAAjB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,OAAO,oBAAP;;AAEA,MAAMC,OAAO,GAAC,kCAAd;;AAEA,MAAMC,YAAN,SAA2BN,KAAK,CAACO,SAAjC,CACA;AACIC,EAAAA,WAAW,CAACC,KAAD,EACX;AACI,UAAMA,KAAN;;AADJ,SAoBAC,MApBA,GAoBUC,CAAD,IACT;AACIA,MAAAA,CAAC,CAACC,cAAF;AAEAC,MAAAA,KAAK,CAAE,oDAAmD,KAAKC,KAAL,CAAWC,KAAM,UAASV,OAAQ,EAAvF,CAAL,CACCW,IADD,CACMC,QAAQ,IACd;AACI,YAAGA,QAAQ,CAACC,EAAZ,EACA;AACI,iBAAOD,QAAP;AACH;;AACC,cAAME,KAAK,CAAC,8BAAD,CAAX;AACL,OARD,EASCH,IATD,CASMC,QAAQ,IAAIA,QAAQ,CAACG,IAAT,EATlB,EAUCJ,IAVD,CAUMC,QAAQ,IACd;AACII,QAAAA,OAAO,CAACC,GAAR,CAAYL,QAAZ;AACA,aAAKM,aAAL,CAAmBN,QAAQ,CAACO,KAAT,CAAeC,GAAlC,EAAsCR,QAAQ,CAACO,KAAT,CAAeE,GAArD;AACA,aAAKC,QAAL,CAAcb,KAAK,KACnB;AACIc,UAAAA,IAAI,EAACd,KAAK,CAACC,KADf;AAEIc,UAAAA,OAAO,EAACZ,QAAQ,CAACa,GAAT,CAAaD,OAFzB;AAGIE,UAAAA,IAAI,EAAC7B,OAAO,CAACe,QAAQ,CAACe,EAAV,CAHhB;AAIIC,UAAAA,IAAI,EAAC9B,OAAO,CAACc,QAAQ,CAACe,EAAV,EAAaf,QAAQ,CAACiB,QAAtB,CAJhB;AAKIC,UAAAA,KAAK,EAAC;AALV,SADmB,CAAnB;AASH,OAvBD,EAwBCC,KAxBD,CAwBOC,GAAG,IACV;AACIhB,QAAAA,OAAO,CAACC,GAAR,CAAYe,GAAZ;AAEA,aAAKV,QAAL,CAAcW,SAAS,IACvB;AACI,iBAAM;AACNH,YAAAA,KAAK,EAAC,IADA;AAENP,YAAAA,IAAI,EAACU,SAAS,CAACV;AAFT,WAAN;AAIH,SAND;AAOH,OAnCD;AAoCH,KA5DD;;AAAA,SAkHAW,YAlHA,GAkHc5B,CAAD,IAAK;AACd,WAAKgB,QAAL,CAAc;AACVZ,QAAAA,KAAK,EAACJ,CAAC,CAAC6B,MAAF,CAASzB;AADL,OAAd;AAGH,KAtHD;;AAAA,SAuHA0B,aAvHA,GAuHe9B,CAAD,IAAK;AACf,WAAKD,MAAL,CAAYC,CAAZ;AACH,KAzHD;;AAEI,SAAKG,KAAL,GACA;AACAC,MAAAA,KAAK,EAAC,EADN;AAEAa,MAAAA,IAAI,EAAC,QAFL;AAGAC,MAAAA,OAAO,EAAC,EAHR;AAIAa,MAAAA,GAAG,EAACC,SAJJ;AAKAC,MAAAA,EAAE,EAACD,SALH;AAMAE,MAAAA,GAAG,EAACF,SANJ;AAOAG,MAAAA,EAAE,EAACH,SAPH;AAQAI,MAAAA,GAAG,EAACJ,SARJ;AASAK,MAAAA,EAAE,EAACL,SATH;AAUAM,MAAAA,KAAK,EAACN,SAVN;AAWAO,MAAAA,IAAI,EAACP,SAXL;AAYAQ,MAAAA,GAAG,EAACR,SAZJ;AAaAR,MAAAA,KAAK,EAAC;AAbN,KADA;AAgBH;;AA2CDZ,EAAAA,aAAa,CAACE,GAAD,EAAKC,GAAL,EAAS;AAClB,UAAM0B,MAAM,GAAGvC,KAAK,CAAE,4DAA2DY,GAAI,QAAOC,GAAI,UAASrB,OAAQ,EAA7F,CAAL,CACZW,IADY,CACPqC,kBAAkB,IAAI;AACxB,UAAGA,kBAAkB,CAACnC,EAAtB,EAAyB;AACrB,eAAOmC,kBAAP;AACH;;AACD,YAAMlC,KAAK,CAAC,8BAAD,CAAX;AACH,KANY,EAOZH,IAPY,CAOPqC,kBAAkB,IAAIA,kBAAkB,CAACjC,IAAnB,EAPf,EAQZJ,IARY,CAQPqC,kBAAkB,IAAI;AACxBhC,MAAAA,OAAO,CAACC,GAAR,CAAY+B,kBAAZ;AACA,WAAK1B,QAAL,CAAcb,KAAK,KAAI;AACrB8B,QAAAA,EAAE,EAACS,kBAAkB,CAACC,IAAnB,CAAwB,CAAxB,EAA2BC,UAA3B,CAAsCX,EADpB;AAErBC,QAAAA,GAAG,EAACQ,kBAAkB,CAACC,IAAnB,CAAwB,CAAxB,EAA2BC,UAA3B,CAAsCV,GAFrB;AAGrBC,QAAAA,EAAE,EAACO,kBAAkB,CAACC,IAAnB,CAAwB,CAAxB,EAA2BC,UAA3B,CAAsCT,EAHpB;AAIrBC,QAAAA,GAAG,EAACM,kBAAkB,CAACC,IAAnB,CAAwB,CAAxB,EAA2BC,UAA3B,CAAsCR,GAJrB;AAKrBC,QAAAA,EAAE,EAACK,kBAAkB,CAACC,IAAnB,CAAwB,CAAxB,EAA2BC,UAA3B,CAAsCP,EALpB;AAMrBC,QAAAA,KAAK,EAACI,kBAAkB,CAACC,IAAnB,CAAwB,CAAxB,EAA2BC,UAA3B,CAAsCN,KANvB;AAOrBC,QAAAA,IAAI,EAACG,kBAAkB,CAACC,IAAnB,CAAwB,CAAxB,EAA2BC,UAA3B,CAAsCL,IAPtB;AAQrBC,QAAAA,GAAG,EAACE,kBAAkB,CAACC,IAAnB,CAAwB,CAAxB,EAA2BC,UAA3B,CAAsCJ,GARrB;AASrBK,QAAAA,KAAK,EAACH,kBAAkB,CAACC,IAAnB,CAAwB,CAAxB,EAA2BG,IAA3B,CAAgCf,GATjB;AAUrBP,QAAAA,KAAK,EAAC;AAVe,OAAJ,CAAnB;AAYA,aAAOtB,KAAK,CAAE,4DAA2DY,GAAI,QAAOC,GAAI,UAASrB,OAAQ,EAA7F,CAAZ;AACH,KAvBY,EAwBZW,IAxBY,CAwBPqC,kBAAkB,IAAIA,kBAAkB,CAACjC,IAAnB,EAxBf,EAyBZgB,KAzBY,CAyBNC,GAAG,IAAG;AACXhB,MAAAA,OAAO,CAACC,GAAR,CAAYe,GAAZ;AACA,WAAKV,QAAL,CAAcW,SAAS,IAAG;AACtB,eAAM;AACNH,UAAAA,KAAK,EAAC,IADA;AAENP,UAAAA,IAAI,EAACU,SAAS,CAACV;AAFT,SAAN;AAGF,OAJF;AAKH,KAhCc,CAAf;AAiCAwB,IAAAA,MAAM,CAACpC,IAAP,CAAY0C,CAAC,IAAG;AACZ7C,MAAAA,KAAK,CAAE,+BAAF,CAAL,CACCG,IADD,CACM2C,WAAW,IAAI;AACjB,YAAGA,WAAW,CAACzC,EAAf,EAAkB;AACd,iBAAOyC,WAAP;AACH;;AACD,cAAMxC,KAAK,CAAC,8BAAD,CAAX;AACH,OAND,EAOCH,IAPD,CAOM2C,WAAW,IAAIA,WAAW,CAACvC,IAAZ,EAPrB,EAQCJ,IARD,CAQM2C,WAAW,IAAI;AACjBtC,QAAAA,OAAO,CAACC,GAAR,CAAYqC,WAAZ;AACAtC,QAAAA,OAAO,CAACC,GAAR,CAAYoC,CAAZ;AACA,aAAK/B,QAAL,CAAcb,KAAK,KAAI;AACrB4B,UAAAA,GAAG,EAACiB,WAAW,CAACD,CAAC,CAACJ,IAAF,CAAO,CAAP,EAAUG,IAAV,CAAef,GAAf,GAAmB,CAApB,CAAX,CAAkCkB,SADjB;AAErBzB,UAAAA,KAAK,EAAC;AAFe,SAAJ,CAAnB;AAIH,OAfD;AAgBD,KAjBH;AAkBH;;AASD0B,EAAAA,MAAM,GAAE;AAEJ,wBACI;AAAK,MAAA,SAAS,EAAC,MAAf;AAAqB,MAAA,KAAK,EAAE;AACxBC,QAAAA,eAAe,EAAG;AADM,OAA5B;AAAA,8BAGI;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA,gCACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADA,eAEA,QAAC,IAAD;AACI,UAAA,KAAK,EAAE,KAAKhD,KAAL,CAAWC,KADtB;AAEI,UAAA,OAAO,EAAE,KAAKwB,YAFlB;AAGI,UAAA,MAAM,EAAE,KAAKE;AAHjB;AAAA;AAAA;AAAA;AAAA,gBAFA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHJ,eAWI;AAAA,kBACK,KAAK3B,KAAL,CAAWc,IAAX,gBACG,QAAC,gBAAD;AAAkB,UAAA,GAAG,EAAE,KAAKd;AAA5B;AAAA;AAAA;AAAA;AAAA,gBADH,GAEC;AAHN;AAAA;AAAA;AAAA;AAAA,cAXJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAmBH;;AAjJL;;AAmJA,eAAeR,YAAf","sourcesContent":["import React from 'react'\r\nimport Form from '../Form/Form'\r\nimport CalDate from '../Functions/CalDate';\r\nimport CalTime from '../Functions/CalTime';\r\nimport AirConditionItem from './AirConditionItem'\r\nimport './AirCondition.css';\r\n\r\nconst API_key=\"157d33f8987d245bc6a1997408e90015\"\r\n\r\nclass AirCondition extends React.Component\r\n{\r\n    constructor(props)\r\n    {\r\n        super(props)\r\n        this.state=\r\n        {\r\n        value:\"\",\r\n        city:\"Miasto\",\r\n        country:\"\",\r\n        aqi:undefined,\r\n        co:undefined,\r\n        nh3:undefined,\r\n        no:undefined,\r\n        no2:undefined,\r\n        o3:undefined,\r\n        pm2_5:undefined,\r\n        pm10:undefined,\r\n        so2:undefined,\r\n        error:false\r\n        };\r\n    };\r\n    \r\n    getAir = (e) =>\r\n    {\r\n        e.preventDefault()\r\n          \r\n        fetch(`http://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&APPID=${API_key}`)\r\n        .then(response => \r\n        {\r\n            if(response.ok)\r\n            {\r\n                return response\r\n            }\r\n              throw Error(\"Błąd pobierania danych z API\")\r\n        })\r\n        .then(response => response.json())\r\n        .then(response => \r\n        {\r\n            console.log(response)\r\n            this.getAirQuality(response.coord.lat,response.coord.lon)\r\n            this.setState(state =>(\r\n            {\r\n                city:state.value,\r\n                country:response.sys.country,\r\n                date:CalDate(response.dt),\r\n                time:CalTime(response.dt,response.timezone), \r\n                error:false\r\n            }))\r\n\r\n        })\r\n        .catch(err =>\r\n        {\r\n            console.log(err)\r\n\r\n            this.setState(prevState =>\r\n            {\r\n                return{\r\n                error:true,\r\n                city:prevState.city\r\n                }\r\n            })\r\n        })\r\n    }\r\n    getAirQuality(lat,lon){\r\n        const result = fetch(`http://api.openweathermap.org/data/2.5/air_pollution?lat=${lat}&lon=${lon}&appid=${API_key}`)\r\n          .then(responseAirQuality => {\r\n              if(responseAirQuality.ok){\r\n                  return responseAirQuality\r\n              }\r\n              throw Error(\"Błąd pobierania danych z API\")\r\n          })\r\n          .then(responseAirQuality => responseAirQuality.json())\r\n          .then(responseAirQuality => {\r\n              console.log(responseAirQuality)\r\n              this.setState(state =>({\r\n                co:responseAirQuality.list[0].components.co,\r\n                nh3:responseAirQuality.list[0].components.nh3,\r\n                no:responseAirQuality.list[0].components.no,\r\n                no2:responseAirQuality.list[0].components.no2,\r\n                o3:responseAirQuality.list[0].components.o3,\r\n                pm2_5:responseAirQuality.list[0].components.pm2_5,\r\n                pm10:responseAirQuality.list[0].components.pm10,\r\n                so2:responseAirQuality.list[0].components.so2,\r\n                color:responseAirQuality.list[0].main.aqi,\r\n                error:false\r\n              }))\r\n              return fetch(`http://api.openweathermap.org/data/2.5/air_pollution?lat=${lat}&lon=${lon}&appid=${API_key}`);\r\n          })\r\n          .then(responseAirQuality => responseAirQuality.json())         \r\n          .catch(err =>{\r\n            console.log(err)\r\n            this.setState(prevState =>{\r\n                return{\r\n                error:true,\r\n                city:prevState.city\r\n            }})\r\n        })\r\n        result.then(r =>{\r\n            fetch(`http://localhost:3001/api/air`)\r\n            .then(responseAir => {\r\n                if(responseAir.ok){\r\n                    return responseAir\r\n                }\r\n                throw Error(\"Błąd pobierania danych z API\")\r\n            })\r\n            .then(responseAir => responseAir.json())\r\n            .then(responseAir => {\r\n                console.log(responseAir)\r\n                console.log(r)\r\n                this.setState(state =>({\r\n                  aqi:responseAir[r.list[0].main.aqi-1].condition,\r\n                  error:false\r\n                }))\r\n            })\r\n          })\r\n    }\r\n    inputHandler=(e)=>{\r\n        this.setState({\r\n            value:e.target.value\r\n        })\r\n    }\r\n    submitHandler=(e)=>{\r\n        this.getAir(e)\r\n    }\r\n    render(){\r\n        \r\n        return(\r\n            <div className=\"main\"style={{ \r\n                backgroundImage: `url(\"/images/bg_air.jpg\")` \r\n              }}>\r\n                <div className=\"city-form\">\r\n                <h1>Wyszukaj miasto dla którego chcesz sprawdzić obecny stan powietrza</h1>\r\n                <Form \r\n                    value={this.state.value}  \r\n                    handler={this.inputHandler}\r\n                    submit={this.submitHandler}\r\n                /> \r\n                </div> \r\n                <div>\r\n                    {this.state.city ?(\r\n                        <AirConditionItem air={this.state}/>   \r\n                    ):null}\r\n                </div>\r\n                </div>\r\n        )\r\n    }\r\n}\r\nexport default AirCondition"]},"metadata":{},"sourceType":"module"}