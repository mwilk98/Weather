{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vened\\\\Desktop\\\\Weather\\\\my_weather\\\\client\\\\src\\\\components\\\\currentWeather\\\\CurrentWeather.js\";\nimport React from 'react';\nimport WeatherItem from './WeatherItem';\nimport Form from '../Form/Form';\nimport CalDate from '../Functions/CalDate';\nimport CalTime from '../Functions/CalTime';\nimport CalCelsius from '../Functions/CalCelsius';\nimport CalWindSpeed from '../Functions/CalWindSpeed';\nimport ForecastDailyItem from './ForecastDailyItem';\nimport ForecastHourlyItem from './ForecastHourlyItem';\nimport './Forecast.css';\nimport './CurrentWeather.css';\nimport { Line } from 'react-chartjs-2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_key = \"157d33f8987d245bc6a1997408e90015\"; //const localTime = new Date().toLocaleString()\n\nclass CurrentWeather extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.nextProperty = (Property, Elements) => {\n      const newIndex = Property.id + 1;\n      this.setState({\n        Property: Elements[newIndex]\n      });\n      console.log(newIndex);\n    };\n\n    this.prevProperty = (Property, Elements) => {\n      const newIndex = Property.id - 1;\n      this.setState({\n        Property: Elements[newIndex]\n      });\n    };\n\n    this.defaultWeather = cityName => {\n      this.setState(state => ({\n        city: cityName,\n        error: false\n      }));\n      fetch(`http://api.openweathermap.org/data/2.5/weather?q=${cityName}&lang=pl&APPID=${API_key}`).then(response => {\n        if (response.ok) {\n          return response;\n        }\n\n        throw Error(\"Błąd pobierania danych z API\");\n      }).then(response => response.json()).then(response => {\n        this.getForecastDaily(response.coord.lat, response.coord.lon);\n        this.getForecastHourly(response.coord.lat, response.coord.lon);\n        this.getAirQuality(response.coord.lat, response.coord.lon);\n        console.log(response);\n        this.setState(state => ({\n          city: state.city,\n          country: response.sys.country,\n          date: CalDate(response.dt, response.timezone),\n          time: CalTime(response.dt, response.timezone),\n          timezone: response.timezone,\n          weather: response.weather[0].description,\n          temp: CalCelsius(response.main.temp),\n          tempMax: CalCelsius(response.main.temp_max),\n          tempMin: CalCelsius(response.main.temp_min),\n          tempFeel: CalCelsius(response.main.feels_like),\n          pressure: response.main.pressure,\n          wind: CalWindSpeed(response.wind.speed),\n          image: weatherIcons[response.weather[0].id],\n          lat: response.coord.lat,\n          lon: response.coord.lon,\n          clouds: response.clouds.all,\n          humidity: response.main.humidity,\n          sunrise: CalTime(response.sys.sunrise, response.timezone),\n          sunset: CalTime(response.sys.sunset, response.timezone),\n          background: \"/images/cloudyCity.jpg\",\n          error: false\n        }));\n        console.log(\"TEST:\" + response.weather[0].id);\n        console.log(this.state.image);\n      }).catch(err => {\n        console.log(err);\n        this.setState(prevState => {\n          return {\n            error: true,\n            city: prevState.city\n          };\n        });\n      });\n    };\n\n    this.getWeather = e => {\n      e.preventDefault();\n      fetch(`http://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&lang=pl&APPID=${API_key}`).then(response => {\n        if (response.ok) {\n          return response;\n        }\n\n        throw Error(\"Błąd pobierania danych z API\");\n      }).then(response => response.json()).then(response => {\n        console.log(response);\n        this.setState(state => ({\n          city: state.value,\n          country: response.sys.country,\n          timezone: response.timezone,\n          date: CalDate(response.dt, response.timezone),\n          time: CalTime(response.dt, response.timezone),\n          weather: response.weather[0].description,\n          temp: CalCelsius(response.main.temp),\n          tempMax: CalCelsius(response.main.temp_max),\n          tempMin: CalCelsius(response.main.temp_min),\n          tempFeel: CalCelsius(response.main.feels_like),\n          pressure: response.main.pressure,\n          wind: CalWindSpeed(response.wind.speed),\n          image: weatherIcons[response.weather[0].id],\n          lat: response.coord.lat,\n          lon: response.coord.lon,\n          clouds: response.clouds.all,\n          humidity: response.main.humidity,\n          sunrise: CalTime(response.sys.sunrise, response.timezone),\n          sunset: CalTime(response.sys.sunset, response.timezone),\n          background: \"/images/cloudyCity.jpg\",\n          error: false\n        }));\n        this.getForecastDaily(response.coord.lat, response.coord.lon);\n        this.getForecastHourly(response.coord.lat, response.coord.lon);\n        this.getAirQuality(response.coord.lat, response.coord.lon);\n      }).catch(err => {\n        console.log(err);\n        this.setState(prevState => {\n          return {\n            error: true,\n            city: prevState.city\n          };\n        });\n      });\n    };\n\n    this.getForecastDaily = (lat, lon) => {\n      console.log(lat);\n      this.setState({\n        forecastDailyElements: []\n      });\n      fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&lang=pl&appid=${API_key}`).then(response => {\n        if (response.ok) {\n          return response;\n        }\n\n        throw Error(\"Błąd pobierania danych z API\");\n      }).then(response => response.json()).then(response => {\n        console.log(response);\n        console.log(this.state.timezone);\n\n        for (var i = 0; i < 8; i++) {\n          this.setState({\n            forecastDailyElements: [...this.state.forecastDailyElements, {\n              'id': i,\n              'date': CalDate(response.daily[i].dt, this.state.timezone),\n              'weather': response.daily[i].weather[0].description,\n              'tempMax': CalCelsius(response.daily[i].temp.max),\n              'tempMin': CalCelsius(response.daily[i].temp.min),\n              'pressure': response.daily[i].pressure,\n              'wind': CalWindSpeed(response.daily[i].wind_speed),\n              'image': weatherIcons[response.daily[i].weather[0].id],\n              'clouds': response.daily[i].clouds,\n              'humidity': response.daily[i].humidity,\n              'sunrise': CalTime(response.daily[i].sunrise, response.timezone_offset),\n              'sunset': CalTime(response.daily[i].sunset, response.timezone_offset)\n            }]\n          });\n        }\n\n        this.setState({\n          Property: this.state.forecastDailyElements[0]\n        });\n      });\n    };\n\n    this.getForecastHourly = (lat, lon) => {\n      this.setState({\n        forecastHourlyElements: [],\n        tempData: [],\n        tempTime: [],\n        tempPress: [],\n        tempHumid: []\n      });\n      fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&lang=pl&appid=${API_key}`).then(response => {\n        if (response.ok) {\n          return response;\n        }\n\n        throw Error(\"Błąd pobierania danych z API\");\n      }).then(response => response.json()).then(response => {\n        console.log(response);\n\n        for (var i = 0; i < 48; i++) {\n          this.setState({\n            forecastHourlyElements: [...this.state.forecastHourlyElements, {\n              'id': i,\n              'date': CalDate(response.hourly[i].dt, this.state.timezone),\n              'time': CalTime(response.hourly[i].dt, response.timezone_offset),\n              'weather': response.hourly[i].weather[0].description,\n              'temp': CalCelsius(response.hourly[i].temp),\n              'tempFeel': CalCelsius(response.hourly[i].feels_like),\n              'pressure': response.hourly[i].pressure,\n              'humidity': response.hourly[i].humidity,\n              'wind': CalWindSpeed(response.hourly[i].wind_speed),\n              'image': weatherIcons[response.hourly[i].weather[0].id],\n              'clouds': response.hourly[i].clouds\n            }],\n            tempData: [...this.state.tempData, CalCelsius(response.hourly[i].temp)],\n            tempTime: [...this.state.tempTime, CalTime(response.hourly[i].dt, response.timezone_offset)],\n            tempPress: [...this.state.tempPress, response.hourly[i].pressure],\n            tempHumid: [...this.state.tempHumid, response.hourly[i].humidity]\n          });\n          this.setState({\n            Property: this.state.forecastHourlyElements[0]\n          });\n        }\n\n        this.setState({\n          data1: {\n            labels: this.state.tempTime,\n            datasets: [{\n              label: 'Temperatura:',\n              data: this.state.tempData,\n              fill: false,\n              backgroundColor: 'rgb(209, 157, 12)',\n              borderColor: 'rgb(0, 0, 0)'\n            }]\n          },\n          data2: {\n            labels: this.state.tempTime,\n            datasets: [{\n              label: 'Ciśnienie:',\n              data: this.state.tempPress,\n              fill: false,\n              backgroundColor: 'rgb(209, 157, 12)',\n              borderColor: 'rgb(0, 0, 0)'\n            }]\n          },\n          data3: {\n            labels: this.state.tempTime,\n            datasets: [{\n              label: 'Wilgotność:',\n              data: this.state.tempHumid,\n              fill: false,\n              backgroundColor: 'rgb(209, 157, 12)',\n              borderColor: 'rgb(0, 0, 0)'\n            }]\n          }\n        });\n        this.setState({\n          data: this.state.data1\n        });\n      });\n    };\n\n    this.inputHandler = e => {\n      this.setState({\n        value: e.target.value\n      });\n    };\n\n    this.setForecast = () => {\n      if (this.state.forecast) {\n        this.setState({\n          forecast: false,\n          Property: this.state.forecastHourlyElements[0]\n        });\n      } else {\n        this.setState({\n          forecast: true,\n          Property: this.state.forecastDailyElements[0]\n        });\n      }\n    };\n\n    this.selectData = dataC => {\n      if (dataC == 1) {\n        this.setState({\n          data: this.state.data1\n        });\n      }\n\n      if (dataC == 2) {\n        this.setState({\n          data: this.state.data2\n        });\n      }\n\n      if (dataC == 3) {\n        this.setState({\n          data: this.state.data3\n        });\n      }\n    };\n\n    this.state = {\n      value: \"\",\n      city: \"\",\n      country: \"\",\n      aqi: undefined,\n      pm2_5: undefined,\n      image: undefined,\n      background: undefined,\n      weather: undefined,\n      temp: undefined,\n      tempMax: undefined,\n      tempMin: undefined,\n      tempFeel: undefined,\n      pressurre: undefined,\n      wind: undefined,\n      lat: undefined,\n      lon: undefined,\n      clouds: undefined,\n      humidity: undefined,\n      sunrise: undefined,\n      sunset: undefined,\n      forecastDailyElements: [],\n      forecastHourlyElements: [],\n      Property: undefined,\n      hourlyProperty: undefined,\n      forecast: true,\n      error: false,\n      tempData: [],\n      tempPress: [],\n      tempHumid: [],\n      tempTime: [],\n      data: {\n        labels: [],\n        datasets: [{\n          label: '',\n          data: [],\n          fill: false,\n          backgroundColor: 'rgb(0, 0, 0)',\n          borderColor: 'rgba(0, 0, 0, 0)'\n        }]\n      },\n      data1: {\n        labels: [],\n        datasets: [{\n          label: '',\n          data: [],\n          fill: false,\n          backgroundColor: 'rgb(0, 0, 0)',\n          borderColor: 'rgba(0, 0, 0, 0)'\n        }]\n      },\n      data2: {\n        labels: [],\n        datasets: [{\n          label: '',\n          data: [],\n          fill: false,\n          backgroundColor: 'rgb(0, 0, 0)',\n          borderColor: 'rgba(0, 0, 0, 0)'\n        }]\n      },\n      data3: {\n        labels: [],\n        datasets: [{\n          label: '',\n          data: [],\n          fill: false,\n          backgroundColor: 'rgb(0, 0, 0)',\n          borderColor: 'rgba(0, 0, 0, 0)'\n        }]\n      },\n      options: {\n        plugins: {\n          legend: {\n            display: true,\n            labels: {\n              color: 'black'\n            }\n          }\n        },\n        maintainAspectRatio: false,\n        scales: {\n          y: {\n            ticks: {\n              color: \"black\",\n              font: {\n                size: 10\n              },\n              stepSize: 1,\n              beginAtZero: true\n            }\n          },\n          x: {\n            ticks: {\n              color: \"black\",\n              font: {\n                size: 14\n              },\n              stepSize: 1,\n              beginAtZero: true\n            }\n          }\n        }\n      }\n    };\n  }\n\n  getAirQuality(lat, lon) {\n    fetch(`http://api.openweathermap.org/data/2.5/air_pollution?lat=${lat}&lon=${lon}&appid=${API_key}`).then(response2 => {\n      if (response2.ok) {\n        return response2;\n      }\n\n      throw Error(\"Błąd pobierania danych z API\");\n    }).then(response2 => response2.json()).then(response2 => {\n      console.log(response2);\n      this.setState(state => ({\n        aqi: airConditions[response2.list[0].main.aqi],\n        pm2_5: response2.list[0].components.pm2_5,\n        color: response2.list[0].main.aqi,\n        error: false\n      }));\n    }).catch(err => {\n      console.log(err);\n      this.setState(prevState => {\n        return {\n          error: true,\n          city: prevState.city\n        };\n      });\n    });\n  }\n\n  componentDidMount() {\n    this.defaultWeather(\"Warszawa\");\n  }\n\n  render() {\n    if (this.state.forecast) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main\",\n        style: {\n          backgroundImage: `url(\"/images/bg.jpg\")`\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"city-form\",\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \"Wyszukaj miasto dla kt\\xF3rego chcesz sprawdzi\\u0107 obecne warunki pogodowe oraz prognozy pogody\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 476,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Form, {\n            value: this.state.value,\n            handler: this.inputHandler,\n            submit: this.getWeather\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 477,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 475,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"current-main\",\n          children: this.state.city ? /*#__PURE__*/_jsxDEV(WeatherItem, {\n            element: this.state,\n            selectD: this.selectData\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 485,\n            columnNumber: 29\n          }, this) : null\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 483,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"forecast-main\",\n          children: this.state.Property ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"forecast-cards\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"left\",\n              style: {\n                backgroundImage: `url(\"/images/arrow_left.png\")`\n              },\n              onClick: () => this.prevProperty(this.state.Property, this.state.forecastDailyElements),\n              disabled: this.state.Property.id === 0\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 491,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"swap-button\",\n              onClick: () => this.setForecast(),\n              children: \"GODZINOWA\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 497,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"right\",\n              style: {\n                backgroundImage: `url(\"/images/arrow_right.png\")`\n              },\n              onClick: () => this.nextProperty(this.state.Property, this.state.forecastDailyElements),\n              disabled: this.state.Property.id === this.state.forecastDailyElements.length - 3\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 501,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"main-cards\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"cards-slider\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"cards-slider-wrapper\",\n                  style: {\n                    'transform': `translateX(-${this.state.Property.id * (100 / this.state.forecastDailyElements.length)}%)`\n                  },\n                  children: this.state.forecastDailyElements.map(fde => /*#__PURE__*/_jsxDEV(ForecastDailyItem, {\n                    element: fde\n                  }, fde.id, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 513,\n                    columnNumber: 86\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 510,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 509,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 508,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 490,\n            columnNumber: 25\n          }, this) : null\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 488,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 472,\n        columnNumber: 21\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main\",\n        style: {\n          backgroundImage: `url(\"/images/bg.jpg\")`\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"city-form\",\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \"Wyszukaj miasto dla kt\\xF3rego chcesz sprawdzi\\u0107 obecne warunki pogodowe oraz prognozy pogody\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 528,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form, {\n            value: this.state.value,\n            handler: this.inputHandler,\n            submit: this.getWeather\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 529,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 527,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"current-main\",\n          children: this.state.city ? /*#__PURE__*/_jsxDEV(WeatherItem, {\n            element: this.state,\n            selectD: this.selectData\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 537,\n            columnNumber: 25\n          }, this) : null\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 535,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"forecast-main\",\n          children: this.state.Property ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"forecast-cards\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"left\",\n              onClick: () => this.prevProperty(this.state.Property, this.state.forecastHourlyElements),\n              disabled: this.state.Property.id === 0,\n              children: \"Next\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 543,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"swap-button\",\n              onClick: () => this.setForecast(),\n              children: \"DZIENNA\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 548,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"right\",\n              onClick: () => this.nextProperty(this.state.Property, this.state.forecastHourlyElements),\n              disabled: this.state.Property.id === this.state.forecastHourlyElements.length - 3,\n              children: \"Prev\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 552,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"main-cards\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"cards-slider\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"cards-slider-wrapper\",\n                  style: {\n                    'transform': `translateX(-${this.state.Property.id * (100 / this.state.forecastHourlyElements.length)}%)`\n                  },\n                  children: this.state.forecastHourlyElements.map(fde => /*#__PURE__*/_jsxDEV(ForecastHourlyItem, {\n                    element: fde\n                  }, fde.id, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 562,\n                    columnNumber: 83\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 559,\n                  columnNumber: 33\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 558,\n                columnNumber: 29\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 557,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 542,\n            columnNumber: 21\n          }, this) : null\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 540,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 524,\n        columnNumber: 17\n      }, this);\n    }\n  }\n\n}\n\nconst weatherIcons = {\n  200: '/images/200.png',\n  201: '/images/201.png',\n  202: '/images/202.png',\n  210: '/images/210.png',\n  211: '/images/211.png',\n  212: '/images/212.png',\n  221: '/images/212.png',\n  230: '/images/230D.png',\n  231: '/images/231.png',\n  232: '/images/232.png',\n  300: '/images/300D.png',\n  301: '/images/301.png',\n  302: '/images/302.png',\n  310: '/images/310D.png',\n  311: '/images/311.png',\n  312: '/images/312.png',\n  313: '/images/313_1.png',\n  314: '/images/314.png',\n  321: '/images/321.png',\n  500: '/images/500D.png',\n  501: '/images/501.png',\n  502: '/images/502.png',\n  503: '/images/503.png',\n  504: '/images/504.png',\n  511: '/images/511.png',\n  520: '/images/520D.png',\n  521: '/images/521_2.png',\n  522: '/images/522_1.png',\n  531: '/images/522_1.png',\n  600: '/images/600D.png',\n  601: '/images/601.png',\n  602: '/images/602.png',\n  611: '/images/611.png',\n  612: '/images/612D.png',\n  613: '/images/613.png',\n  615: '/images/615D.png',\n  616: '/images/616.png',\n  620: '/images/620D.png',\n  621: '/images/621.png',\n  622: '/images/622.png',\n  701: '/images/701_2.png',\n  711: '/images/701_2.png',\n  721: '/images/701_2.png',\n  731: '/images/701_2.png',\n  741: '/images/701_2.png',\n  751: '/images/701_2.png',\n  761: '/images/701_2.png',\n  762: '/images/701_2.png',\n  771: '/images/701_2.png',\n  781: '/images/701_2.png',\n  800: '/images/800D.png',\n  801: '/images/801D.png',\n  802: '/images/802D.png',\n  803: '/images/803D.png',\n  804: '/images/804.png'\n};\nconst airConditions = {\n  1: 'Bardzo dobra',\n  2: 'Dobra',\n  3: 'Średnia',\n  4: 'Zła',\n  5: 'Bardzo zła'\n};\nexport default CurrentWeather;","map":{"version":3,"sources":["C:/Users/vened/Desktop/Weather/my_weather/client/src/components/currentWeather/CurrentWeather.js"],"names":["React","WeatherItem","Form","CalDate","CalTime","CalCelsius","CalWindSpeed","ForecastDailyItem","ForecastHourlyItem","Line","API_key","CurrentWeather","Component","constructor","props","nextProperty","Property","Elements","newIndex","id","setState","console","log","prevProperty","defaultWeather","cityName","state","city","error","fetch","then","response","ok","Error","json","getForecastDaily","coord","lat","lon","getForecastHourly","getAirQuality","country","sys","date","dt","timezone","time","weather","description","temp","main","tempMax","temp_max","tempMin","temp_min","tempFeel","feels_like","pressure","wind","speed","image","weatherIcons","clouds","all","humidity","sunrise","sunset","background","catch","err","prevState","getWeather","e","preventDefault","value","forecastDailyElements","i","daily","max","min","wind_speed","timezone_offset","forecastHourlyElements","tempData","tempTime","tempPress","tempHumid","hourly","data1","labels","datasets","label","data","fill","backgroundColor","borderColor","data2","data3","inputHandler","target","setForecast","forecast","selectData","dataC","aqi","undefined","pm2_5","pressurre","hourlyProperty","options","plugins","legend","display","color","maintainAspectRatio","scales","y","ticks","font","size","stepSize","beginAtZero","x","response2","airConditions","list","components","componentDidMount","render","backgroundImage","length","map","fde"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport WeatherItem from './WeatherItem';\r\nimport Form from '../Form/Form'\r\nimport CalDate from '../Functions/CalDate';\r\nimport CalTime from '../Functions/CalTime';\r\nimport CalCelsius from '../Functions/CalCelsius';\r\nimport CalWindSpeed from '../Functions/CalWindSpeed';\r\nimport ForecastDailyItem from './ForecastDailyItem';\r\nimport ForecastHourlyItem from './ForecastHourlyItem';\r\nimport './Forecast.css';\r\nimport './CurrentWeather.css';\r\nimport { Line } from 'react-chartjs-2';\r\n\r\n\r\n\r\nconst API_key=\"157d33f8987d245bc6a1997408e90015\"\r\n//const localTime = new Date().toLocaleString()\r\n\r\nclass CurrentWeather extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state={\r\n            value:\"\",\r\n            city:\"\",\r\n            country:\"\",\r\n            aqi:undefined,\r\n            pm2_5:undefined,\r\n            image:undefined,\r\n            background:undefined,\r\n            weather:undefined,\r\n            temp:undefined,\r\n            tempMax:undefined,\r\n            tempMin:undefined,\r\n            tempFeel:undefined,\r\n            pressurre:undefined,\r\n            wind:undefined,\r\n            lat:undefined,\r\n            lon:undefined,\r\n            clouds:undefined, \r\n            humidity:undefined,\r\n            sunrise:undefined,\r\n            sunset:undefined,\r\n            forecastDailyElements:[\r\n            ],\r\n            forecastHourlyElements:[\r\n            ],\r\n            Property: undefined,\r\n            hourlyProperty: undefined,\r\n            forecast:true,\r\n            error:false,\r\n            tempData:[],\r\n            tempPress:[],\r\n            tempHumid:[],\r\n            tempTime:[],\r\n            data :{\r\n                labels: [],\r\n                datasets: [\r\n                  {\r\n                    label: '',\r\n                    data: [],\r\n                    fill: false,\r\n                    backgroundColor: 'rgb(0, 0, 0)',\r\n                    borderColor: 'rgba(0, 0, 0, 0)',\r\n                  },\r\n                ],\r\n            },\r\n            data1 :{\r\n                labels: [],\r\n                datasets: [\r\n                  {\r\n                    label: '',\r\n                    data: [],\r\n                    fill: false,\r\n                    backgroundColor: 'rgb(0, 0, 0)',\r\n                    borderColor: 'rgba(0, 0, 0, 0)',\r\n                  },\r\n                ],\r\n            },\r\n            data2 :{\r\n                labels: [],\r\n                datasets: [\r\n                  {\r\n                    label: '',\r\n                    data: [],\r\n                    fill: false,\r\n                    backgroundColor: 'rgb(0, 0, 0)',\r\n                    borderColor: 'rgba(0, 0, 0, 0)',\r\n                  },\r\n                ],\r\n            },\r\n            data3 :{\r\n                labels: [],\r\n                datasets: [\r\n                  {\r\n                    label: '',\r\n                    data: [],\r\n                    fill: false,\r\n                    backgroundColor: 'rgb(0, 0, 0)',\r\n                    borderColor: 'rgba(0, 0, 0, 0)',\r\n                  },\r\n                ],\r\n            },\r\n            options : {\r\n                plugins: {\r\n                    legend: {\r\n                        display: true,\r\n                        labels: {\r\n                            color: 'black'\r\n                        }\r\n                    }\r\n                },\r\n                maintainAspectRatio: false,\r\n                scales: {\r\n                    y: {  \r\n                        ticks: {\r\n                          color: \"black\", \r\n                          font: {\r\n                            size: 10,\r\n                          },\r\n                          stepSize: 1,\r\n                          beginAtZero: true\r\n                        }\r\n                      },\r\n                      x: { \r\n                        ticks: {\r\n                          color: \"black\", \r\n                        \r\n                          font: {\r\n                            size: 14 \r\n                          },\r\n                          stepSize: 1,\r\n                          beginAtZero: true\r\n                        }\r\n                      }\r\n                },\r\n            }\r\n        }\r\n    }\r\n    nextProperty = (Property,Elements) => \r\n    {\r\n        const newIndex = Property.id +1;\r\n\r\n        this.setState(\r\n        {\r\n            Property: Elements[newIndex]\r\n        });\r\n\r\n        console.log(newIndex);\r\n    };\r\n\r\n    prevProperty= (Property,Elements) => \r\n    {\r\n        const newIndex = Property.id -1;\r\n\r\n        this.setState(\r\n        {\r\n            Property: Elements[newIndex]\r\n        });\r\n    };\r\n    defaultWeather = (cityName) => {\r\n        this.setState(state =>({\r\n            city:cityName,\r\n            error:false\r\n          }))\r\n          fetch(`http://api.openweathermap.org/data/2.5/weather?q=${cityName}&lang=pl&APPID=${API_key}`)\r\n          .then(response => {\r\n              if(response.ok){\r\n                  return response\r\n              }\r\n              throw Error(\"Błąd pobierania danych z API\")\r\n          })\r\n          .then(response => response.json())\r\n          .then(response => {\r\n            this.getForecastDaily(response.coord.lat,response.coord.lon)\r\n            this.getForecastHourly(response.coord.lat,response.coord.lon)\r\n            this.getAirQuality(response.coord.lat,response.coord.lon)\r\n              console.log(response)\r\n              this.setState(state =>({\r\n                city:state.city,\r\n                country:response.sys.country,\r\n                date:CalDate(response.dt,response.timezone),\r\n                time:CalTime(response.dt,response.timezone),\r\n                timezone:response.timezone,\r\n                weather:response.weather[0].description,\r\n                temp:CalCelsius(response.main.temp),\r\n                tempMax:CalCelsius(response.main.temp_max),\r\n                tempMin:CalCelsius(response.main.temp_min),\r\n                tempFeel:CalCelsius(response.main.feels_like),\r\n                pressure:response.main.pressure,\r\n                wind:CalWindSpeed(response.wind.speed),\r\n                image:weatherIcons[response.weather[0].id],\r\n                lat:response.coord.lat,\r\n                lon:response.coord.lon,\r\n                clouds:response.clouds.all, \r\n                humidity:response.main.humidity,\r\n                sunrise:CalTime(response.sys.sunrise,response.timezone),\r\n                sunset:CalTime(response.sys.sunset,response.timezone),\r\n                background:\"/images/cloudyCity.jpg\",\r\n                error:false,\r\n                \r\n              }))\r\n                      \r\n            console.log(\"TEST:\"+response.weather[0].id)\r\n            console.log(this.state.image)\r\n          })\r\n          .catch(err =>{\r\n            console.log(err)\r\n            this.setState(prevState =>{\r\n                return{\r\n                error:true,\r\n                city:prevState.city\r\n            }})\r\n        })\r\n    }\r\n    getWeather = (e) =>{\r\n        \r\n        e.preventDefault()\r\n          \r\n          fetch(`http://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&lang=pl&APPID=${API_key}`)\r\n          .then(response => {\r\n              if(response.ok){\r\n                  return response\r\n              }\r\n              throw Error(\"Błąd pobierania danych z API\")\r\n          })\r\n          .then(response => response.json())\r\n          .then(response => {\r\n              console.log(response)\r\n              this.setState(state =>({\r\n                city:state.value,\r\n                country:response.sys.country,\r\n                timezone:response.timezone,\r\n                date:CalDate(response.dt,response.timezone),\r\n                time:CalTime(response.dt,response.timezone),\r\n                weather:response.weather[0].description,\r\n                temp:CalCelsius(response.main.temp),\r\n                tempMax:CalCelsius(response.main.temp_max),\r\n                tempMin:CalCelsius(response.main.temp_min),\r\n                tempFeel:CalCelsius(response.main.feels_like),\r\n                pressure:response.main.pressure,\r\n                wind:CalWindSpeed(response.wind.speed),\r\n                image:weatherIcons[response.weather[0].id],\r\n                lat:response.coord.lat,\r\n                lon:response.coord.lon,\r\n                clouds:response.clouds.all, \r\n                humidity:response.main.humidity,\r\n                sunrise:CalTime(response.sys.sunrise,response.timezone),\r\n                sunset:CalTime(response.sys.sunset,response.timezone),\r\n                background:\"/images/cloudyCity.jpg\",\r\n                error:false\r\n              }))\r\n              this.getForecastDaily(response.coord.lat,response.coord.lon)\r\n              this.getForecastHourly(response.coord.lat,response.coord.lon)\r\n              this.getAirQuality(response.coord.lat,response.coord.lon)\r\n          })\r\n          .catch(err =>{\r\n            console.log(err)\r\n            this.setState(prevState =>{\r\n                return{\r\n                error:true,\r\n                city:prevState.city\r\n            }})\r\n        })\r\n        \r\n    }\r\n    getAirQuality(lat,lon){\r\n        fetch(`http://api.openweathermap.org/data/2.5/air_pollution?lat=${lat}&lon=${lon}&appid=${API_key}`)\r\n          .then(response2 => {\r\n              if(response2.ok){\r\n                  return response2\r\n              }\r\n              throw Error(\"Błąd pobierania danych z API\")\r\n          })\r\n          .then(response2 => response2.json())\r\n          .then(response2 => {\r\n              console.log(response2)\r\n              this.setState(state =>({\r\n                aqi:airConditions[response2.list[0].main.aqi],\r\n                pm2_5:response2.list[0].components.pm2_5,\r\n                color:response2.list[0].main.aqi,\r\n                error:false\r\n              }))\r\n          })\r\n          .catch(err =>{\r\n            console.log(err)\r\n            this.setState(prevState =>{\r\n                return{\r\n                error:true,\r\n                city:prevState.city\r\n            }})\r\n        })\r\n    }\r\n    getForecastDaily = (lat,lon)=>{\r\n\r\n        console.log(lat)\r\n        this.setState({\r\n            forecastDailyElements:[\r\n            ]\r\n        })\r\n        \r\n        fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&lang=pl&appid=${API_key}`)\r\n          .then(response => {\r\n              if(response.ok){\r\n                  return response\r\n              }\r\n              throw Error(\"Błąd pobierania danych z API\")\r\n          })\r\n          .then(response => response.json())\r\n          .then(response => {\r\n              console.log(response)\r\n              console.log(this.state.timezone)\r\n              for (var i = 0; i < 8; i++) {\r\n                this.setState({\r\n                    forecastDailyElements:[...this.state.forecastDailyElements,{\r\n                        'id':i,\r\n                        'date':CalDate(response.daily[i].dt,this.state.timezone),\r\n                        'weather':response.daily[i].weather[0].description,\r\n                        'tempMax':CalCelsius(response.daily[i].temp.max),\r\n                        'tempMin':CalCelsius(response.daily[i].temp.min),\r\n                        'pressure':response.daily[i].pressure,\r\n                        'wind':CalWindSpeed(response.daily[i].wind_speed),\r\n                        'image':weatherIcons[response.daily[i].weather[0].id],\r\n                        'clouds':response.daily[i].clouds,\r\n                        'humidity':response.daily[i].humidity,\r\n                        'sunrise':CalTime(response.daily[i].sunrise,response.timezone_offset) ,\r\n                        'sunset':CalTime(response.daily[i].sunset,response.timezone_offset)\r\n                    }],\r\n                    \r\n                })\r\n            }\r\n                this.setState({\r\n                    Property:this.state.forecastDailyElements[0]\r\n                })  \r\n          })\r\n    }\r\n    getForecastHourly = (lat,lon)=>{\r\n\r\n        this.setState({\r\n            forecastHourlyElements:[\r\n            ],\r\n            tempData:[],\r\n            tempTime:[],\r\n            tempPress:[],\r\n            tempHumid:[],\r\n        })\r\n        \r\n        fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&lang=pl&appid=${API_key}`)\r\n          .then(response => {\r\n              if(response.ok){\r\n                  return response\r\n              }\r\n              throw Error(\"Błąd pobierania danych z API\")\r\n          })\r\n          .then(response => response.json())\r\n          .then(response => {\r\n              console.log(response)\r\n              for (var i = 0; i < 48; i++) {\r\n                this.setState({\r\n                    forecastHourlyElements:[...this.state.forecastHourlyElements,{\r\n                        'id':i,\r\n                        'date':CalDate(response.hourly[i].dt,this.state.timezone),\r\n                        'time':CalTime(response.hourly[i].dt,response.timezone_offset),\r\n                        'weather':response.hourly[i].weather[0].description,\r\n                        'temp':CalCelsius(response.hourly[i].temp),\r\n                        'tempFeel':CalCelsius(response.hourly[i].feels_like),\r\n                        'pressure':response.hourly[i].pressure,\r\n                        'humidity':response.hourly[i].humidity,\r\n                        'wind':CalWindSpeed(response.hourly[i].wind_speed),\r\n                        'image':weatherIcons[response.hourly[i].weather[0].id],\r\n                        'clouds':response.hourly[i].clouds,\r\n                    }],\r\n                    \r\n                    tempData:[...this.state.tempData,CalCelsius(response.hourly[i].temp)],\r\n                    tempTime:[...this.state.tempTime,CalTime(response.hourly[i].dt,response.timezone_offset)],\r\n                    tempPress:[...this.state.tempPress,response.hourly[i].pressure],\r\n                    tempHumid:[...this.state.tempHumid,response.hourly[i].humidity],\r\n                    \r\n                })\r\n                this.setState({\r\n                    Property:this.state.forecastHourlyElements[0],\r\n                })\r\n            }\r\n            this.setState({\r\n                data1:{\r\n                    labels: this.state.tempTime,\r\n                    datasets: [\r\n                  {\r\n                    label: 'Temperatura:',\r\n                    data: this.state.tempData,\r\n                    fill: false,\r\n                    backgroundColor: 'rgb(209, 157, 12)',\r\n                    borderColor: 'rgb(0, 0, 0)',\r\n                  },\r\n                ],\r\n                },\r\n                data2:{\r\n                    labels: this.state.tempTime,\r\n                    datasets: [\r\n                  {\r\n                    label: 'Ciśnienie:',\r\n                    data: this.state.tempPress,\r\n                    fill: false,\r\n                    backgroundColor: 'rgb(209, 157, 12)',\r\n                    borderColor: 'rgb(0, 0, 0)',\r\n                  },\r\n                ],\r\n                },\r\n                data3:{\r\n                    labels: this.state.tempTime,\r\n                    datasets: [\r\n                  {\r\n                    label: 'Wilgotność:',\r\n                    data: this.state.tempHumid,\r\n                    fill: false,\r\n                    backgroundColor: 'rgb(209, 157, 12)',\r\n                    borderColor: 'rgb(0, 0, 0)',\r\n                  },\r\n                ],\r\n                }\r\n                \r\n            })\r\n            this.setState({\r\n                data:this.state.data1\r\n            })\r\n          })\r\n    }\r\n    inputHandler=(e)=>{\r\n        this.setState({\r\n            value:e.target.value\r\n        })\r\n    }\r\n    componentDidMount(){\r\n        this.defaultWeather(\"Warszawa\")\r\n     }\r\n    setForecast=()=>{\r\n        if(this.state.forecast){\r\n            this.setState({\r\n                forecast:false,\r\n                Property:this.state.forecastHourlyElements[0]\r\n            })\r\n        }else{\r\n            this.setState({\r\n                forecast:true,\r\n                Property:this.state.forecastDailyElements[0]\r\n            })\r\n        }\r\n    }\r\n    selectData = (dataC) => {\r\n        if(dataC==1)\r\n        {\r\n            this.setState({\r\n                data:this.state.data1\r\n            })\r\n        }\r\n        if(dataC==2)\r\n        {\r\n            this.setState({\r\n                data:this.state.data2\r\n            })\r\n        }\r\n        if(dataC==3)\r\n        {\r\n            this.setState({\r\n                data:this.state.data3\r\n            })\r\n        }\r\n    }\r\n    render(){\r\n        \r\n        if(this.state.forecast){\r\n            return(\r\n                    <div className=\"main\" style={{ \r\n                        backgroundImage: `url(\"/images/bg.jpg\")` \r\n                    }}>\r\n                        <div className=\"city-form\">\r\n                            <h1>Wyszukaj miasto dla którego chcesz sprawdzić obecne warunki pogodowe oraz prognozy pogody</h1>\r\n                            <Form \r\n                                value={this.state.value}  \r\n                                handler={this.inputHandler}\r\n                                submit={this.getWeather}\r\n                            /> \r\n                        </div> \r\n                        <div className=\"current-main\">\r\n                            {this.state.city ?(\r\n                            <WeatherItem element={this.state} selectD={this.selectData}/>   \r\n                            ):null}\r\n                        </div>\r\n                    <div className=\"forecast-main\">\r\n                        {this.state.Property ?( \r\n                        <div className=\"forecast-cards\" >\r\n                            <button className=\"left\" style={{ \r\n                        backgroundImage: `url(\"/images/arrow_left.png\")` }}\r\n                                onClick={() => this.prevProperty(this.state.Property,this.state.forecastDailyElements)} \r\n                                disabled={this.state.Property.id === 0}\r\n                            >\r\n                            </button>\r\n                            <button className=\"swap-button\"\r\n                                onClick={() => this.setForecast()} \r\n                            >GODZINOWA\r\n                            </button>\r\n                            <button className=\"right\" style={{ \r\n                        backgroundImage: `url(\"/images/arrow_right.png\")` }}\r\n                                    onClick={() => this.nextProperty(this.state.Property,this.state.forecastDailyElements)} \r\n                                    disabled={this.state.Property.id === this.state.forecastDailyElements.length-3}\r\n                                    \r\n                            >\r\n                            </button>\r\n                            <div className=\"main-cards\">  \r\n                                <div className=\"cards-slider\">         \r\n                                    <div className=\"cards-slider-wrapper\" style={{\r\n                                                                            'transform':`translateX(-${this.state.Property.id*(100/this.state.forecastDailyElements.length)}%)`\r\n                                    }}>\r\n                                        {this.state.forecastDailyElements.map(fde => <ForecastDailyItem key={fde.id} element={fde} />)}\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    ):null}\r\n                    </div>\r\n                    </div>\r\n            )\r\n        }else{\r\n            return(\r\n                <div className=\"main\" style={{ \r\n                    backgroundImage: `url(\"/images/bg.jpg\")` \r\n                }}>\r\n                    <div className=\"city-form\">\r\n                        <h1>Wyszukaj miasto dla którego chcesz sprawdzić obecne warunki pogodowe oraz prognozy pogody</h1>\r\n                        <Form \r\n                            value={this.state.value}  \r\n                            handler={this.inputHandler}\r\n                            submit={this.getWeather}\r\n                        /> \r\n                    </div> \r\n                    <div className=\"current-main\">\r\n                        {this.state.city ?(\r\n                        <WeatherItem element={this.state} selectD={this.selectData}/>  \r\n                        ):null}\r\n                    </div>\r\n                <div className=\"forecast-main\">\r\n                    {this.state.Property ?( \r\n                    <div className=\"forecast-cards\">\r\n                        <button className=\"left\" \r\n                            onClick={() => this.prevProperty(this.state.Property,this.state.forecastHourlyElements)} \r\n                            disabled={this.state.Property.id === 0}\r\n                        >Next\r\n                        </button>\r\n                        <button className=\"swap-button\"\r\n                            onClick={() => this.setForecast()} \r\n                        >DZIENNA\r\n                        </button>\r\n                        <button className=\"right\"\r\n                                onClick={() => this.nextProperty(this.state.Property,this.state.forecastHourlyElements)} \r\n                                disabled={this.state.Property.id === this.state.forecastHourlyElements.length-3}\r\n                        >Prev\r\n                        </button>\r\n                        <div className=\"main-cards\">  \r\n                            <div className=\"cards-slider\">         \r\n                                <div className=\"cards-slider-wrapper\" style={{\r\n                                                                        'transform':`translateX(-${this.state.Property.id*(100/this.state.forecastHourlyElements.length)}%)`\r\n                                }}>\r\n                                    {this.state.forecastHourlyElements.map(fde => <ForecastHourlyItem key={fde.id} element={fde} />)}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                ):null}\r\n                </div>\r\n                </div>\r\n            )\r\n        }\r\n        \r\n    }\r\n}\r\nconst weatherIcons = {\r\n    200:'/images/200.png',\r\n    201:'/images/201.png',\r\n    202:'/images/202.png',\r\n    210:'/images/210.png',\r\n    211:'/images/211.png',\r\n    212:'/images/212.png',\r\n    221:'/images/212.png',\r\n    230:'/images/230D.png',\r\n    231:'/images/231.png',\r\n    232:'/images/232.png',\r\n    300:'/images/300D.png',\r\n    301:'/images/301.png',\r\n    302:'/images/302.png',\r\n    310:'/images/310D.png',\r\n    311:'/images/311.png',\r\n    312:'/images/312.png',\r\n    313:'/images/313_1.png',\r\n    314:'/images/314.png',\r\n    321:'/images/321.png',\r\n    500:'/images/500D.png',\r\n    501:'/images/501.png',\r\n    502:'/images/502.png',\r\n    503:'/images/503.png',\r\n    504:'/images/504.png',\r\n    511:'/images/511.png',\r\n    520:'/images/520D.png',\r\n    521:'/images/521_2.png',\r\n    522:'/images/522_1.png',\r\n    531:'/images/522_1.png',\r\n    600:'/images/600D.png',\r\n    601:'/images/601.png',\r\n    602:'/images/602.png',\r\n    611:'/images/611.png',\r\n    612:'/images/612D.png',\r\n    613:'/images/613.png',\r\n    615:'/images/615D.png',\r\n    616:'/images/616.png',\r\n    620:'/images/620D.png',\r\n    621:'/images/621.png',\r\n    622:'/images/622.png',\r\n    701:'/images/701_2.png',\r\n    711:'/images/701_2.png',\r\n    721:'/images/701_2.png',\r\n    731:'/images/701_2.png',\r\n    741:'/images/701_2.png',\r\n    751:'/images/701_2.png',\r\n    761:'/images/701_2.png',\r\n    762:'/images/701_2.png',\r\n    771:'/images/701_2.png',\r\n    781:'/images/701_2.png',\r\n    800:'/images/800D.png',\r\n    801:'/images/801D.png',\r\n    802:'/images/802D.png',\r\n    803:'/images/803D.png',\r\n    804:'/images/804.png',\r\n}\r\nconst airConditions = {\r\n    1:'Bardzo dobra',\r\n    2:'Dobra',\r\n    3:'Średnia',\r\n    4:'Zła',\r\n    5:'Bardzo zła',\r\n}\r\nexport default CurrentWeather"]},"metadata":{},"sourceType":"module"}