{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vened\\\\Desktop\\\\Pogoda\\\\my_weather\\\\client\\\\src\\\\components\\\\Compare\\\\Compare.js\";\nimport React from 'react';\nimport WeatherItem from './WeatherItem';\nimport Form from '../Form/Form';\nimport CalDate from '../Functions/CalDate';\nimport CalTime from '../Functions/CalTime';\nimport CalCelsius from '../Functions/CalCelsius';\nimport CalWindSpeed from '../Functions/CalWindSpeed';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_key = \"157d33f8987d245bc6a1997408e90015\"; //const localTime = new Date().toLocaleString()\n\nclass Compare extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.nextdailyProperty = () => {\n      const newIndex = this.state.dailyProperty.id + 1;\n      this.setState({\n        dailyProperty: this.state.forecastDailyElements[newIndex]\n      });\n      console.log(newIndex);\n    };\n\n    this.prevdailyProperty = () => {\n      const newIndex = this.state.dailyProperty.id - 1;\n      this.setState({\n        dailyProperty: this.state.forecastDailyElements[newIndex]\n      });\n    };\n\n    this.nextHourlyProperty = () => {\n      const newIndex = this.state.hourlyProperty.id + 1;\n      this.setState({\n        hourlyProperty: this.state.forecastHourlyElements[newIndex]\n      });\n    };\n\n    this.prevHourlyProperty = () => {\n      const newIndex = this.state.hourlyProperty.id - 1;\n      this.setState({\n        hourlyProperty: this.state.forecastHourlyElements[newIndex]\n      });\n    };\n\n    this.defaultWeather = cityName => {\n      this.setState(state => ({\n        city: cityName,\n        error: false\n      }));\n      fetch(`http://api.openweathermap.org/data/2.5/weather?q=${cityName}&lang=pl&APPID=${API_key}`).then(response => {\n        if (response.ok) {\n          return response;\n        }\n\n        throw Error(\"Błąd pobierania danych z API\");\n      }).then(response => response.json()).then(response => {\n        const localTime = new Date().toLocaleString();\n        console.log(response);\n        this.setState(state => ({\n          city: state.city,\n          country: response.sys.country,\n          date: CalDate(response.dt),\n          time: CalTime(response.dt, response.timezone),\n          weather: response.weather[0].description,\n          temp: CalCelsius(response.main.temp),\n          tempMax: CalCelsius(response.main.temp_max),\n          tempMin: CalCelsius(response.main.temp_min),\n          tempFeel: CalCelsius(response.main.feels_like),\n          pressure: response.main.pressure,\n          wind: CalWindSpeed(response.wind.speed),\n          image: weatherIcons[response.weather[0].id],\n          lat: response.coord.lat,\n          lon: response.coord.lon,\n          clouds: response.clouds.all,\n          humidity: response.main.humidity,\n          sunrise: CalTime(response.sys.sunrise, response.timezone),\n          sunset: CalTime(response.sys.sunset, response.timezone),\n          background: \"/images/cloudyCity.jpg\",\n          error: false\n        }));\n      }).catch(err => {\n        console.log(err);\n        this.setState(prevState => {\n          return {\n            error: true,\n            city: prevState.city\n          };\n        });\n      });\n    };\n\n    this.getWeather = e => {\n      e.preventDefault();\n      fetch(`http://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&lang=pl&APPID=${API_key}`).then(response => {\n        if (response.ok) {\n          return response;\n        }\n\n        throw Error(\"Błąd pobierania danych z API\");\n      }).then(response => response.json()).then(response => {\n        const localTime = new Date().toLocaleString();\n        console.log(response);\n        this.getForecastDaily(response.coord.lat, response.coord.lon);\n        this.getForecastHourly(response.coord.lat, response.coord.lon);\n        this.setState(state => ({\n          city: state.value,\n          country: response.sys.country,\n          date: CalDate(response.dt),\n          time: CalTime(response.dt, response.timezone),\n          weather: response.weather[0].description,\n          temp: CalCelsius(response.main.temp),\n          tempMax: CalCelsius(response.main.temp_max),\n          tempMin: CalCelsius(response.main.temp_min),\n          tempFeel: CalCelsius(response.main.feels_like),\n          pressure: response.main.pressure,\n          wind: CalWindSpeed(response.wind.speed),\n          image: weatherIcons[response.weather[0].id],\n          lat: response.coord.lat,\n          lon: response.coord.lon,\n          clouds: response.clouds.all,\n          humidity: response.main.humidity,\n          sunrise: CalTime(response.sys.sunrise, response.timezone),\n          sunset: CalTime(response.sys.sunset, response.timezone),\n          background: \"/images/cloudyCity.jpg\",\n          error: false\n        }));\n      }).catch(err => {\n        console.log(err);\n        this.setState(prevState => {\n          return {\n            error: true,\n            city: prevState.city\n          };\n        });\n      });\n    };\n\n    this.getForecastDaily = (lat, lon) => {\n      console.log(lat);\n      this.state.forecastDailyElements.length = 0;\n      fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&lang=pl&appid=${API_key}`).then(response => {\n        if (response.ok) {\n          return response;\n        }\n\n        throw Error(\"Błąd pobierania danych z API\");\n      }).then(response => response.json()).then(response => {\n        console.log(response);\n\n        for (var i = 0; i < 8; i++) {\n          this.setState({\n            forecastDailyElements: [...this.state.forecastDailyElements, {\n              'id': i,\n              'date': CalDate(response.daily[i].dt),\n              'weather': response.daily[i].weather[0].description,\n              'temp': CalCelsius(response.daily[i].temp.day),\n              'pressure': response.daily[i].pressure,\n              'wind': CalWindSpeed(response.daily[i].wind_speed),\n              'image': weatherIcons[response.daily[i].weather[0].id],\n              'background': \"/images/download.gif\"\n            }],\n            dailyProperty: this.state.forecastDailyElements[0]\n          });\n        }\n      });\n    };\n\n    this.getForecastHourly = (lat, lon) => {\n      this.state.forecastHourlyElements.length = 0;\n      fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&lang=pl&appid=${API_key}`).then(response => {\n        if (response.ok) {\n          return response;\n        }\n\n        throw Error(\"Błąd pobierania danych z API\");\n      }).then(response => response.json()).then(response => {\n        const localTime = new Date().toLocaleString();\n        console.log(response);\n\n        for (var i = 0; i < 48; i++) {\n          this.setState({\n            forecastHourlyElements: [...this.state.forecastHourlyElements, {\n              'id': i,\n              'date': CalDate(response.hourly[i].dt),\n              'time': CalTime(response.hourly[i].dt, response.timezone_offset),\n              'weather': response.hourly[i].weather[0].description,\n              'temp': CalCelsius(response.hourly[i].temp),\n              'pressure': response.hourly[i].pressure,\n              'wind': CalWindSpeed(response.hourly[i].wind_speed),\n              'image': weatherIcons[response.hourly[i].weather[0].id]\n            }],\n            hourlyProperty: this.state.forecastHourlyElements[0]\n          });\n        }\n      });\n    };\n\n    this.inputHandler = e => {\n      this.setState({\n        value: e.target.value\n      });\n    };\n\n    this.state = {\n      value: \"\",\n      city: \"\",\n      country: \"\",\n      image: undefined,\n      background: undefined,\n      weather: undefined,\n      temp: undefined,\n      tempMax: undefined,\n      tempMin: undefined,\n      tempFeel: undefined,\n      pressurre: undefined,\n      wind: undefined,\n      lat: undefined,\n      lon: undefined,\n      clouds: undefined,\n      humidity: undefined,\n      sunrise: undefined,\n      sunset: undefined,\n      background: undefined,\n      forecastDailyElements: [],\n      forecastHourlyElements: [],\n      dailyProperty: undefined,\n      hourlyProperty: undefined,\n      error: false\n    };\n  }\n\n  componentDidMount() {\n    this.defaultWeather(\"Warszawa\");\n  }\n\n  render() {\n    const {\n      forecastDailyElements,\n      forecastHourlyElements,\n      dailyProperty,\n      hourlyProperty\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"POR\\xD3WNAJ PROGNOZY\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Compare;","map":{"version":3,"sources":["C:/Users/vened/Desktop/Pogoda/my_weather/client/src/components/Compare/Compare.js"],"names":["React","WeatherItem","Form","CalDate","CalTime","CalCelsius","CalWindSpeed","API_key","Compare","Component","constructor","props","nextdailyProperty","newIndex","state","dailyProperty","id","setState","forecastDailyElements","console","log","prevdailyProperty","nextHourlyProperty","hourlyProperty","forecastHourlyElements","prevHourlyProperty","defaultWeather","cityName","city","error","fetch","then","response","ok","Error","json","localTime","Date","toLocaleString","country","sys","date","dt","time","timezone","weather","description","temp","main","tempMax","temp_max","tempMin","temp_min","tempFeel","feels_like","pressure","wind","speed","image","weatherIcons","lat","coord","lon","clouds","all","humidity","sunrise","sunset","background","catch","err","prevState","getWeather","e","preventDefault","value","getForecastDaily","getForecastHourly","length","i","daily","day","wind_speed","hourly","timezone_offset","inputHandler","target","undefined","pressurre","componentDidMount","render"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport WeatherItem from './WeatherItem';\r\nimport Form from '../Form/Form'\r\nimport CalDate from '../Functions/CalDate';\r\nimport CalTime from '../Functions/CalTime';\r\nimport CalCelsius from '../Functions/CalCelsius';\r\nimport CalWindSpeed from '../Functions/CalWindSpeed';\r\n\r\nconst API_key=\"157d33f8987d245bc6a1997408e90015\"\r\n//const localTime = new Date().toLocaleString()\r\n\r\nclass Compare extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state={\r\n            value:\"\",\r\n            city:\"\",\r\n            country:\"\",\r\n            image:undefined,\r\n            background:undefined,\r\n            weather:undefined,\r\n            temp:undefined,\r\n            tempMax:undefined,\r\n            tempMin:undefined,\r\n            tempFeel:undefined,\r\n            pressurre:undefined,\r\n            wind:undefined,\r\n            lat:undefined,\r\n            lon:undefined,\r\n            clouds:undefined, \r\n            humidity:undefined,\r\n            sunrise:undefined,\r\n            sunset:undefined,\r\n            background:undefined,\r\n            forecastDailyElements:[\r\n            ],\r\n            forecastHourlyElements:[\r\n            ],\r\n            dailyProperty: undefined,\r\n            hourlyProperty: undefined,\r\n            error:false\r\n        }\r\n    }\r\n\r\n    nextdailyProperty = () => {\r\n        const newIndex = this.state.dailyProperty.id +1\r\n        this.setState({\r\n            dailyProperty: this.state.forecastDailyElements[newIndex]\r\n        })\r\n        console.log(newIndex)\r\n    }\r\n\r\n    prevdailyProperty = () => {\r\n        const newIndex = this.state.dailyProperty.id -1\r\n        this.setState({\r\n            dailyProperty: this.state.forecastDailyElements[newIndex]\r\n        })\r\n    }\r\n\r\n    nextHourlyProperty = () => {\r\n        const newIndex = this.state.hourlyProperty.id +1\r\n        this.setState({\r\n            hourlyProperty: this.state.forecastHourlyElements[newIndex]\r\n        })\r\n    }\r\n    \r\n    prevHourlyProperty = () => {\r\n        const newIndex = this.state.hourlyProperty.id -1\r\n        this.setState({\r\n            hourlyProperty: this.state.forecastHourlyElements[newIndex]\r\n        })\r\n    }\r\n    defaultWeather = (cityName) => {\r\n        this.setState(state =>({\r\n            city:cityName,\r\n            error:false\r\n          }))\r\n          fetch(`http://api.openweathermap.org/data/2.5/weather?q=${cityName}&lang=pl&APPID=${API_key}`)\r\n          .then(response => {\r\n              if(response.ok){\r\n                  return response\r\n              }\r\n              throw Error(\"Błąd pobierania danych z API\")\r\n          })\r\n          .then(response => response.json())\r\n          .then(response => {\r\n              const localTime = new Date().toLocaleString()\r\n              console.log(response)\r\n              this.setState(state =>({\r\n                city:state.city,\r\n                country:response.sys.country,\r\n                date:CalDate(response.dt),\r\n                time:CalTime(response.dt,response.timezone),\r\n                weather:response.weather[0].description,\r\n                temp:CalCelsius(response.main.temp),\r\n                tempMax:CalCelsius(response.main.temp_max),\r\n                tempMin:CalCelsius(response.main.temp_min),\r\n                tempFeel:CalCelsius(response.main.feels_like),\r\n                pressure:response.main.pressure,\r\n                wind:CalWindSpeed(response.wind.speed),\r\n                image:weatherIcons[response.weather[0].id],\r\n                lat:response.coord.lat,\r\n                lon:response.coord.lon,\r\n                clouds:response.clouds.all, \r\n                humidity:response.main.humidity,\r\n                sunrise:CalTime(response.sys.sunrise,response.timezone),\r\n                sunset:CalTime(response.sys.sunset,response.timezone),\r\n                background:\"/images/cloudyCity.jpg\",\r\n                error:false\r\n              }))\r\n          })\r\n          .catch(err =>{\r\n            console.log(err)\r\n            this.setState(prevState =>{\r\n                return{\r\n                error:true,\r\n                city:prevState.city\r\n            }})\r\n        })\r\n    }\r\n    getWeather = (e) =>{\r\n        \r\n        e.preventDefault()\r\n          \r\n          fetch(`http://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&lang=pl&APPID=${API_key}`)\r\n          .then(response => {\r\n              if(response.ok){\r\n                  return response\r\n              }\r\n              throw Error(\"Błąd pobierania danych z API\")\r\n          })\r\n          .then(response => response.json())\r\n          .then(response => {\r\n              const localTime = new Date().toLocaleString()\r\n              console.log(response)\r\n              this.getForecastDaily(response.coord.lat,response.coord.lon)\r\n              this.getForecastHourly(response.coord.lat,response.coord.lon)\r\n              this.setState(state =>({\r\n                city:state.value,\r\n                country:response.sys.country,\r\n                date:CalDate(response.dt),\r\n                time:CalTime(response.dt,response.timezone),\r\n                weather:response.weather[0].description,\r\n                temp:CalCelsius(response.main.temp),\r\n                tempMax:CalCelsius(response.main.temp_max),\r\n                tempMin:CalCelsius(response.main.temp_min),\r\n                tempFeel:CalCelsius(response.main.feels_like),\r\n                pressure:response.main.pressure,\r\n                wind:CalWindSpeed(response.wind.speed),\r\n                image:weatherIcons[response.weather[0].id],\r\n                lat:response.coord.lat,\r\n                lon:response.coord.lon,\r\n                clouds:response.clouds.all, \r\n                humidity:response.main.humidity,\r\n                sunrise:CalTime(response.sys.sunrise,response.timezone),\r\n                sunset:CalTime(response.sys.sunset,response.timezone),\r\n                background:\"/images/cloudyCity.jpg\",\r\n                error:false\r\n              }))\r\n          })\r\n          .catch(err =>{\r\n            console.log(err)\r\n            this.setState(prevState =>{\r\n                return{\r\n                error:true,\r\n                city:prevState.city\r\n            }})\r\n        })\r\n        \r\n    }\r\n    getForecastDaily = (lat,lon)=>{\r\n\r\n        console.log(lat)\r\n        this.state.forecastDailyElements.length=0\r\n        \r\n        fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&lang=pl&appid=${API_key}`)\r\n          .then(response => {\r\n              if(response.ok){\r\n                  return response\r\n              }\r\n              throw Error(\"Błąd pobierania danych z API\")\r\n          })\r\n          .then(response => response.json())\r\n          .then(response => {\r\n              console.log(response)\r\n              for (var i = 0; i < 8; i++) {\r\n                this.setState({\r\n                    forecastDailyElements:[...this.state.forecastDailyElements,{\r\n                        'id':i,\r\n                        'date':CalDate(response.daily[i].dt),\r\n                        'weather':response.daily[i].weather[0].description,\r\n                        'temp':CalCelsius(response.daily[i].temp.day),\r\n                        'pressure':response.daily[i].pressure,\r\n                        'wind':CalWindSpeed(response.daily[i].wind_speed),\r\n                        'image':weatherIcons[response.daily[i].weather[0].id],\r\n                        'background':\"/images/download.gif\",\r\n                    }],\r\n                    dailyProperty:this.state.forecastDailyElements[0]\r\n                })\r\n            }   \r\n          })\r\n    }\r\n    getForecastHourly = (lat,lon)=>{\r\n\r\n        this.state.forecastHourlyElements.length=0\r\n        \r\n        fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&lang=pl&appid=${API_key}`)\r\n          .then(response => {\r\n              if(response.ok){\r\n                  return response\r\n              }\r\n              throw Error(\"Błąd pobierania danych z API\")\r\n          })\r\n          .then(response => response.json())\r\n          .then(response => {\r\n              const localTime = new Date().toLocaleString()\r\n              console.log(response)\r\n              for (var i = 0; i < 48; i++) {\r\n                this.setState({\r\n                    forecastHourlyElements:[...this.state.forecastHourlyElements,{\r\n                        'id':i,\r\n                        'date':CalDate(response.hourly[i].dt),\r\n                        'time':CalTime(response.hourly[i].dt,response.timezone_offset),\r\n                        'weather':response.hourly[i].weather[0].description,\r\n                        'temp':CalCelsius(response.hourly[i].temp),\r\n                        'pressure':response.hourly[i].pressure,\r\n                        'wind':CalWindSpeed(response.hourly[i].wind_speed),\r\n                        'image':weatherIcons[response.hourly[i].weather[0].id],\r\n                    }],\r\n                    hourlyProperty:this.state.forecastHourlyElements[0]\r\n                })\r\n            }\r\n          })\r\n    }\r\n    inputHandler=(e)=>{\r\n        this.setState({\r\n            value:e.target.value\r\n        })\r\n    }\r\n    componentDidMount(){\r\n        this.defaultWeather(\"Warszawa\")\r\n     }\r\n    render(){\r\n        const {forecastDailyElements, forecastHourlyElements, dailyProperty, hourlyProperty}=this.state\r\n        return(\r\n            <div>\r\n                PORÓWNAJ PROGNOZY\r\n            </div>\r\n\r\n        \r\n        )\r\n    }\r\n}\r\nexport default Compare"]},"metadata":{},"sourceType":"module"}