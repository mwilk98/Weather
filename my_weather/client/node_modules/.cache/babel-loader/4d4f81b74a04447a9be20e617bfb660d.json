{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vened\\\\Desktop\\\\Pogoda\\\\my_weather\\\\client\\\\src\\\\components\\\\currentWeather\\\\CurrentWeather.js\";\nimport React from 'react';\nimport WeatherItem from './WeatherItem';\nimport Form from '../Form/Form';\nimport CalDate from '../Functions/CalDate';\nimport CalTime from '../Functions/CalTime';\nimport CalCelsius from '../Functions/CalCelsius';\nimport CalWindSpeed from '../Functions/CalWindSpeed';\nimport ForecastDailyItem from './ForecastDailyItem';\nimport ForecastHourlyItem from './ForecastHourlyItem';\nimport './Forecast.css';\nimport './CurrentWeather.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_key = \"157d33f8987d245bc6a1997408e90015\"; //const localTime = new Date().toLocaleString()\n\nclass CurrentWeather extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.nextdailyProperty = () => {\n      const newIndex = this.state.dailyProperty.id + 1;\n      this.setState({\n        dailyProperty: this.state.forecastDailyElements[newIndex]\n      });\n      console.log(newIndex);\n    };\n\n    this.prevdailyProperty = () => {\n      const newIndex = this.state.dailyProperty.id - 1;\n      this.setState({\n        dailyProperty: this.state.forecastDailyElements[newIndex]\n      });\n    };\n\n    this.nextHourlyProperty = () => {\n      const newIndex = this.state.hourlyProperty.id + 1;\n      this.setState({\n        hourlyProperty: this.state.forecastHourlyElements[newIndex]\n      });\n    };\n\n    this.prevHourlyProperty = () => {\n      const newIndex = this.state.hourlyProperty.id - 1;\n      this.setState({\n        hourlyProperty: this.state.forecastHourlyElements[newIndex]\n      });\n    };\n\n    this.defaultWeather = cityName => {\n      this.setState(state => ({\n        city: cityName,\n        error: false\n      }));\n      fetch(`http://api.openweathermap.org/data/2.5/weather?q=${cityName}&lang=pl&APPID=${API_key}`).then(response => {\n        if (response.ok) {\n          return response;\n        }\n\n        throw Error(\"Błąd pobierania danych z API\");\n      }).then(response => response.json()).then(response => {\n        this.getForecastDaily(response.coord.lat, response.coord.lon);\n        this.getForecastHourly(response.coord.lat, response.coord.lon);\n        this.getAirQuality(response.coord.lat, response.coord.lon);\n        const localTime = new Date().toLocaleString();\n        console.log(response);\n        this.setState(state => ({\n          city: state.city,\n          country: response.sys.country,\n          date: CalDate(response.dt),\n          time: CalTime(response.dt, response.timezone),\n          weather: response.weather[0].description,\n          temp: CalCelsius(response.main.temp),\n          tempMax: CalCelsius(response.main.temp_max),\n          tempMin: CalCelsius(response.main.temp_min),\n          tempFeel: CalCelsius(response.main.feels_like),\n          pressure: response.main.pressure,\n          wind: CalWindSpeed(response.wind.speed),\n          image: weatherIcons[response.weather[0].id],\n          lat: response.coord.lat,\n          lon: response.coord.lon,\n          clouds: response.clouds.all,\n          humidity: response.main.humidity,\n          sunrise: CalTime(response.sys.sunrise, response.timezone),\n          sunset: CalTime(response.sys.sunset, response.timezone),\n          background: \"/images/cloudyCity.jpg\",\n          error: false\n        }));\n      }).catch(err => {\n        console.log(err);\n        this.setState(prevState => {\n          return {\n            error: true,\n            city: prevState.city\n          };\n        });\n      });\n    };\n\n    this.getWeather = e => {\n      e.preventDefault();\n      fetch(`http://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&lang=pl&APPID=${API_key}`).then(response => {\n        if (response.ok) {\n          return response;\n        }\n\n        throw Error(\"Błąd pobierania danych z API\");\n      }).then(response => response.json()).then(response => {\n        const localTime = new Date().toLocaleString();\n        console.log(response);\n        this.getForecastDaily(response.coord.lat, response.coord.lon);\n        this.getForecastHourly(response.coord.lat, response.coord.lon);\n        this.getAirQuality(response.coord.lat, response.coord.lon);\n        this.getAlerts(response.coord.lat, response.coord.lon);\n        this.setState(state => ({\n          city: state.value,\n          country: response.sys.country,\n          date: CalDate(response.dt),\n          time: CalTime(response.dt, response.timezone),\n          weather: response.weather[0].description,\n          temp: CalCelsius(response.main.temp),\n          tempMax: CalCelsius(response.main.temp_max),\n          tempMin: CalCelsius(response.main.temp_min),\n          tempFeel: CalCelsius(response.main.feels_like),\n          pressure: response.main.pressure,\n          wind: CalWindSpeed(response.wind.speed),\n          image: weatherIcons[response.weather[0].id],\n          lat: response.coord.lat,\n          lon: response.coord.lon,\n          clouds: response.clouds.all,\n          humidity: response.main.humidity,\n          sunrise: CalTime(response.sys.sunrise, response.timezone),\n          sunset: CalTime(response.sys.sunset, response.timezone),\n          background: \"/images/cloudyCity.jpg\",\n          description: undefined,\n          error: false\n        }));\n      }).catch(err => {\n        console.log(err);\n        this.setState(prevState => {\n          return {\n            error: true,\n            city: prevState.city\n          };\n        });\n      });\n    };\n\n    this.getForecastDaily = (lat, lon) => {\n      console.log(lat);\n      this.state.forecastDailyElements.length = 0;\n      fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&lang=pl&appid=${API_key}`).then(response => {\n        if (response.ok) {\n          return response;\n        }\n\n        throw Error(\"Błąd pobierania danych z API\");\n      }).then(response => response.json()).then(response => {\n        console.log(response);\n\n        for (var i = 0; i < 8; i++) {\n          this.setState({\n            forecastDailyElements: [...this.state.forecastDailyElements, {\n              'id': i,\n              'date': CalDate(response.daily[i].dt),\n              'weather': response.daily[i].weather[0].description,\n              'tempMax': CalCelsius(response.daily[i].temp.max),\n              'tempMin': CalCelsius(response.daily[i].temp.min),\n              'pressure': response.daily[i].pressure,\n              'wind': CalWindSpeed(response.daily[i].wind_speed),\n              'image': weatherIcons[response.daily[i].weather[0].id],\n              'clouds': response.daily[i].clouds,\n              'humidity': response.daily[i].humidity,\n              'sunrise': CalTime(response.daily[i].sunrise, response.timezone_offset),\n              'sunset': CalTime(response.daily[i].sunset, response.timezone_offset)\n            }],\n            dailyProperty: this.state.forecastDailyElements[1]\n          });\n        }\n      });\n    };\n\n    this.getForecastHourly = (lat, lon) => {\n      this.state.forecastHourlyElements.length = 0;\n      fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&lang=pl&appid=${API_key}`).then(response => {\n        if (response.ok) {\n          return response;\n        }\n\n        throw Error(\"Błąd pobierania danych z API\");\n      }).then(response => response.json()).then(response => {\n        const localTime = new Date().toLocaleString();\n        console.log(response);\n\n        for (var i = 0; i < 48; i++) {\n          this.setState({\n            forecastHourlyElements: [...this.state.forecastHourlyElements, {\n              'id': i,\n              'date': CalDate(response.hourly[i].dt),\n              'time': CalTime(response.hourly[i].dt, response.timezone_offset),\n              'weather': response.hourly[i].weather[0].description,\n              'temp': CalCelsius(response.hourly[i].temp),\n              'tempFeel': CalCelsius(response.hourly[i].feels_like),\n              'pressure': response.hourly[i].pressure,\n              'humidity': response.hourly[i].humidity,\n              'wind': CalWindSpeed(response.hourly[i].wind_speed),\n              'image': weatherIcons[response.hourly[i].weather[0].id],\n              'clouds': response.hourly[i].clouds\n            }],\n            hourlyProperty: this.state.forecastHourlyElements[1]\n          });\n        }\n      });\n    };\n\n    this.inputHandler = e => {\n      this.setState({\n        value: e.target.value\n      });\n    };\n\n    this.setForecast = () => {\n      if (this.state.forecast) {\n        this.setState({\n          forecast: false\n        });\n      } else {\n        this.setState({\n          forecast: true\n        });\n      }\n    };\n\n    this.state = {\n      value: \"\",\n      city: \"\",\n      country: \"\",\n      aqi: undefined,\n      image: undefined,\n      background: undefined,\n      weather: undefined,\n      temp: undefined,\n      tempMax: undefined,\n      tempMin: undefined,\n      tempFeel: undefined,\n      pressurre: undefined,\n      wind: undefined,\n      lat: undefined,\n      lon: undefined,\n      clouds: undefined,\n      humidity: undefined,\n      sunrise: undefined,\n      sunset: undefined,\n      background: undefined,\n      forecastDailyElements: [],\n      forecastHourlyElements: [],\n      dailyProperty: undefined,\n      hourlyProperty: undefined,\n      forecast: true,\n      error: false\n    };\n  }\n\n  getAirQuality(lat, lon) {\n    fetch(`http://api.openweathermap.org/data/2.5/air_pollution?lat=${lat}&lon=${lon}&appid=${API_key}`).then(response2 => {\n      if (response2.ok) {\n        return response2;\n      }\n\n      throw Error(\"Błąd pobierania danych z API\");\n    }).then(response2 => response2.json()).then(response2 => {\n      console.log(response2);\n      this.setState(state => ({\n        aqi: airConditions[response2.list[0].main.aqi],\n        color: response2.list[0].main.aqi,\n        error: false\n      }));\n    }).catch(err => {\n      console.log(err);\n      this.setState(prevState => {\n        return {\n          error: true,\n          city: prevState.city\n        };\n      });\n    });\n  }\n\n  getAlerts(lat, lon) {\n    fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&lang=pl&appid=${API_key}`).then(response2 => {\n      if (response2.ok) {\n        return response2;\n      }\n\n      throw Error(\"Błąd pobierania danych z API\");\n    }).then(response2 => response2.json()).then(response2 => {\n      console.log(response2);\n\n      if (response2.alerts) {\n        this.setState(state => ({\n          description: response2.alerts[0].description,\n          error: false\n        }));\n      } else {\n        this.setState(state => ({\n          description: \"brak alertów\",\n          error: false\n        }));\n      }\n    }).catch(err => {\n      console.log(err);\n      this.setState(prevState => {\n        return {\n          error: true,\n          city: prevState.city\n        };\n      });\n    });\n  }\n\n  componentDidMount() {\n    this.defaultWeather(\"Warszawa\");\n  }\n\n  render() {\n    const {\n      forecastDailyElements,\n      forecastHourlyElements,\n      dailyProperty,\n      hourlyProperty\n    } = this.state;\n\n    if (this.state.forecast) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main\",\n        style: {\n          backgroundImage: `url(\"/images/bg.jpg\")`\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"city-form\",\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \"Wyszukaj miasto dla kt\\xF3rego chcesz sprawdzi\\u0107 obecne warunki pogodowe oraz prognozy pogody\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 339,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Form, {\n            value: this.state.value,\n            handler: this.inputHandler,\n            submit: this.getWeather\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 340,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"current-main\",\n          children: this.state.city ? /*#__PURE__*/_jsxDEV(WeatherItem, {\n            weather: this.state\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 348,\n            columnNumber: 29\n          }, this) : null\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 346,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"forecast-main\",\n          children: dailyProperty ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"forecast-cards\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"left\",\n              onClick: () => this.nextdailyProperty(),\n              disabled: dailyProperty.id === forecastDailyElements.length - 3,\n              children: \"Next\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 354,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"swap-button\",\n              onClick: () => this.setForecast(),\n              children: \"GODZINOWA\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 359,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"right\",\n              onClick: () => this.prevdailyProperty(),\n              disabled: dailyProperty.id === 1,\n              children: \"Prev\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 363,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"main-cards\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"cards-slider\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"cards-slider-wrapper\",\n                  style: {\n                    'transform': `translateX(-${dailyProperty.id * (100 / forecastDailyElements.length)}%)`\n                  },\n                  children: forecastDailyElements.map(fde => /*#__PURE__*/_jsxDEV(ForecastDailyItem, {\n                    element: fde\n                  }, fde.id, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 373,\n                    columnNumber: 75\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 370,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 369,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 368,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 353,\n            columnNumber: 25\n          }, this) : null\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 351,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 21\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main\",\n        style: {\n          backgroundImage: `url(\"/images/bg.jpg\")`\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"city-form\",\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \"Wyszukaj miasto dla kt\\xF3rego chcesz sprawdzi\\u0107 obecne warunki pogodowe oraz prognozy pogody\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 388,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form, {\n            value: this.state.value,\n            handler: this.inputHandler,\n            submit: this.getWeather\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 389,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 387,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"current-main\",\n          children: this.state.city ? /*#__PURE__*/_jsxDEV(WeatherItem, {\n            weather: this.state\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 397,\n            columnNumber: 25\n          }, this) : null\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 395,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"forecast-main\",\n          children: hourlyProperty ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"forecast-cards\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"left\",\n              onClick: () => this.nextHourlyProperty(),\n              disabled: hourlyProperty.id === forecastHourlyElements.length - 3,\n              children: \"Next\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 403,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"swap-button\",\n              onClick: () => this.setForecast(),\n              children: \"DZIENNA\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 408,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"right\",\n              onClick: () => this.prevHourlyProperty(),\n              disabled: hourlyProperty.id === 1,\n              children: \"Prev\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 412,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"main-cards\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"cards-slider\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"cards-slider-wrapper\",\n                  style: {\n                    'transform': `translateX(-${hourlyProperty.id * (100 / forecastHourlyElements.length)}%)`\n                  },\n                  children: forecastHourlyElements.map(fde => /*#__PURE__*/_jsxDEV(ForecastHourlyItem, {\n                    element: fde\n                  }, fde.id, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 422,\n                    columnNumber: 72\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 419,\n                  columnNumber: 33\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 418,\n                columnNumber: 29\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 417,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 402,\n            columnNumber: 21\n          }, this) : null\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 400,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 384,\n        columnNumber: 17\n      }, this);\n    }\n  }\n\n}\n\nconst weatherIcons = {\n  200: '/images/thunderstorm.png',\n  201: '/images/thunderstorm.png',\n  202: '/images/thunderstorm.png',\n  210: '/images/thunderstorm.png',\n  211: '/images/thunderstorm.png',\n  212: '/images/thunderstorm.png',\n  221: '/images/thunderstorm.png',\n  230: '/images/thunderstorm.png',\n  231: '/images/thunderstorm.png',\n  232: '/images/thunderstorm.png',\n  300: '/images/drizzle.png',\n  301: '/images/drizzle.png',\n  302: '/images/drizzle.png',\n  310: '/images/drizzle.png',\n  311: '/images/drizzle.png',\n  312: '/images/drizzle.png',\n  313: '/images/drizzle.png',\n  314: '/images/drizzle.png',\n  321: '/images/drizzle.png',\n  500: '/images/rain.png',\n  501: '/images/rain.png',\n  503: '/images/rain.png',\n  504: '/images/rain.png',\n  511: '/images/rain.png',\n  520: '/images/rain.png',\n  521: '/images/rain.png',\n  522: '/images/rain.png',\n  531: '/images/rain.png',\n  500: '/images/rain.png',\n  600: '/images/snow.png',\n  601: '/images/snow.png',\n  602: '/images/snow.png',\n  611: '/images/snow.png',\n  612: '/images/snow.png',\n  613: '/images/snow.png',\n  615: '/images/snow.png',\n  616: '/images/snow.png',\n  620: '/images/snow.png',\n  621: '/images/snow.png',\n  622: '/images/snow.png',\n  701: '/images/mist.png',\n  711: '/images/mist.png',\n  721: '/images/mist.png',\n  731: '/images/mist.png',\n  741: '/images/mist.png',\n  751: '/images/mist.png',\n  761: '/images/mist.png',\n  762: '/images/mist.png',\n  771: '/images/mist.png',\n  781: '/images/mist.png',\n  800: '/images/clear.png',\n  801: '/images/clouds.png',\n  802: '/images/clouds.png',\n  803: '/images/clouds.png',\n  804: '/images/clouds.png'\n};\nconst airConditions = {\n  1: 'Bardzo dobra',\n  2: 'Dobra',\n  3: 'Średnia',\n  4: 'Zła',\n  5: 'Bardzo zła'\n};\nexport default CurrentWeather;","map":{"version":3,"sources":["C:/Users/vened/Desktop/Pogoda/my_weather/client/src/components/currentWeather/CurrentWeather.js"],"names":["React","WeatherItem","Form","CalDate","CalTime","CalCelsius","CalWindSpeed","ForecastDailyItem","ForecastHourlyItem","API_key","CurrentWeather","Component","constructor","props","nextdailyProperty","newIndex","state","dailyProperty","id","setState","forecastDailyElements","console","log","prevdailyProperty","nextHourlyProperty","hourlyProperty","forecastHourlyElements","prevHourlyProperty","defaultWeather","cityName","city","error","fetch","then","response","ok","Error","json","getForecastDaily","coord","lat","lon","getForecastHourly","getAirQuality","localTime","Date","toLocaleString","country","sys","date","dt","time","timezone","weather","description","temp","main","tempMax","temp_max","tempMin","temp_min","tempFeel","feels_like","pressure","wind","speed","image","weatherIcons","clouds","all","humidity","sunrise","sunset","background","catch","err","prevState","getWeather","e","preventDefault","value","getAlerts","undefined","length","i","daily","max","min","wind_speed","timezone_offset","hourly","inputHandler","target","setForecast","forecast","aqi","pressurre","response2","airConditions","list","color","alerts","componentDidMount","render","backgroundImage","map","fde"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,IAAP,MAAiB,cAAjB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAOC,YAAP,MAAyB,2BAAzB;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;AACA,OAAOC,kBAAP,MAA+B,sBAA/B;AACA,OAAO,gBAAP;AACA,OAAO,sBAAP;;AAEA,MAAMC,OAAO,GAAC,kCAAd,C,CACA;;AAEA,MAAMC,cAAN,SAA6BV,KAAK,CAACW,SAAnC,CAA4C;AACxCC,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;;AADc,SAkClBC,iBAlCkB,GAkCE,MAAM;AACtB,YAAMC,QAAQ,GAAG,KAAKC,KAAL,CAAWC,aAAX,CAAyBC,EAAzB,GAA6B,CAA9C;AACA,WAAKC,QAAL,CAAc;AACVF,QAAAA,aAAa,EAAE,KAAKD,KAAL,CAAWI,qBAAX,CAAiCL,QAAjC;AADL,OAAd;AAGAM,MAAAA,OAAO,CAACC,GAAR,CAAYP,QAAZ;AACH,KAxCiB;;AAAA,SA0ClBQ,iBA1CkB,GA0CE,MAAM;AACtB,YAAMR,QAAQ,GAAG,KAAKC,KAAL,CAAWC,aAAX,CAAyBC,EAAzB,GAA6B,CAA9C;AACA,WAAKC,QAAL,CAAc;AACVF,QAAAA,aAAa,EAAE,KAAKD,KAAL,CAAWI,qBAAX,CAAiCL,QAAjC;AADL,OAAd;AAGH,KA/CiB;;AAAA,SAiDlBS,kBAjDkB,GAiDG,MAAM;AACvB,YAAMT,QAAQ,GAAG,KAAKC,KAAL,CAAWS,cAAX,CAA0BP,EAA1B,GAA8B,CAA/C;AACA,WAAKC,QAAL,CAAc;AACVM,QAAAA,cAAc,EAAE,KAAKT,KAAL,CAAWU,sBAAX,CAAkCX,QAAlC;AADN,OAAd;AAGH,KAtDiB;;AAAA,SAwDlBY,kBAxDkB,GAwDG,MAAM;AACvB,YAAMZ,QAAQ,GAAG,KAAKC,KAAL,CAAWS,cAAX,CAA0BP,EAA1B,GAA8B,CAA/C;AACA,WAAKC,QAAL,CAAc;AACVM,QAAAA,cAAc,EAAE,KAAKT,KAAL,CAAWU,sBAAX,CAAkCX,QAAlC;AADN,OAAd;AAGH,KA7DiB;;AAAA,SA8DlBa,cA9DkB,GA8DAC,QAAD,IAAc;AAC3B,WAAKV,QAAL,CAAcH,KAAK,KAAI;AACnBc,QAAAA,IAAI,EAACD,QADc;AAEnBE,QAAAA,KAAK,EAAC;AAFa,OAAJ,CAAnB;AAIEC,MAAAA,KAAK,CAAE,oDAAmDH,QAAS,kBAAiBpB,OAAQ,EAAvF,CAAL,CACCwB,IADD,CACMC,QAAQ,IAAI;AACd,YAAGA,QAAQ,CAACC,EAAZ,EAAe;AACX,iBAAOD,QAAP;AACH;;AACD,cAAME,KAAK,CAAC,8BAAD,CAAX;AACH,OAND,EAOCH,IAPD,CAOMC,QAAQ,IAAIA,QAAQ,CAACG,IAAT,EAPlB,EAQCJ,IARD,CAQMC,QAAQ,IAAI;AAChB,aAAKI,gBAAL,CAAsBJ,QAAQ,CAACK,KAAT,CAAeC,GAArC,EAAyCN,QAAQ,CAACK,KAAT,CAAeE,GAAxD;AACA,aAAKC,iBAAL,CAAuBR,QAAQ,CAACK,KAAT,CAAeC,GAAtC,EAA0CN,QAAQ,CAACK,KAAT,CAAeE,GAAzD;AACA,aAAKE,aAAL,CAAmBT,QAAQ,CAACK,KAAT,CAAeC,GAAlC,EAAsCN,QAAQ,CAACK,KAAT,CAAeE,GAArD;AACE,cAAMG,SAAS,GAAG,IAAIC,IAAJ,GAAWC,cAAX,EAAlB;AACAzB,QAAAA,OAAO,CAACC,GAAR,CAAYY,QAAZ;AACA,aAAKf,QAAL,CAAcH,KAAK,KAAI;AACrBc,UAAAA,IAAI,EAACd,KAAK,CAACc,IADU;AAErBiB,UAAAA,OAAO,EAACb,QAAQ,CAACc,GAAT,CAAaD,OAFA;AAGrBE,UAAAA,IAAI,EAAC9C,OAAO,CAAC+B,QAAQ,CAACgB,EAAV,CAHS;AAIrBC,UAAAA,IAAI,EAAC/C,OAAO,CAAC8B,QAAQ,CAACgB,EAAV,EAAahB,QAAQ,CAACkB,QAAtB,CAJS;AAKrBC,UAAAA,OAAO,EAACnB,QAAQ,CAACmB,OAAT,CAAiB,CAAjB,EAAoBC,WALP;AAMrBC,UAAAA,IAAI,EAAClD,UAAU,CAAC6B,QAAQ,CAACsB,IAAT,CAAcD,IAAf,CANM;AAOrBE,UAAAA,OAAO,EAACpD,UAAU,CAAC6B,QAAQ,CAACsB,IAAT,CAAcE,QAAf,CAPG;AAQrBC,UAAAA,OAAO,EAACtD,UAAU,CAAC6B,QAAQ,CAACsB,IAAT,CAAcI,QAAf,CARG;AASrBC,UAAAA,QAAQ,EAACxD,UAAU,CAAC6B,QAAQ,CAACsB,IAAT,CAAcM,UAAf,CATE;AAUrBC,UAAAA,QAAQ,EAAC7B,QAAQ,CAACsB,IAAT,CAAcO,QAVF;AAWrBC,UAAAA,IAAI,EAAC1D,YAAY,CAAC4B,QAAQ,CAAC8B,IAAT,CAAcC,KAAf,CAXI;AAYrBC,UAAAA,KAAK,EAACC,YAAY,CAACjC,QAAQ,CAACmB,OAAT,CAAiB,CAAjB,EAAoBnC,EAArB,CAZG;AAarBsB,UAAAA,GAAG,EAACN,QAAQ,CAACK,KAAT,CAAeC,GAbE;AAcrBC,UAAAA,GAAG,EAACP,QAAQ,CAACK,KAAT,CAAeE,GAdE;AAerB2B,UAAAA,MAAM,EAAClC,QAAQ,CAACkC,MAAT,CAAgBC,GAfF;AAgBrBC,UAAAA,QAAQ,EAACpC,QAAQ,CAACsB,IAAT,CAAcc,QAhBF;AAiBrBC,UAAAA,OAAO,EAACnE,OAAO,CAAC8B,QAAQ,CAACc,GAAT,CAAauB,OAAd,EAAsBrC,QAAQ,CAACkB,QAA/B,CAjBM;AAkBrBoB,UAAAA,MAAM,EAACpE,OAAO,CAAC8B,QAAQ,CAACc,GAAT,CAAawB,MAAd,EAAqBtC,QAAQ,CAACkB,QAA9B,CAlBO;AAmBrBqB,UAAAA,UAAU,EAAC,wBAnBU;AAoBrB1C,UAAAA,KAAK,EAAC;AApBe,SAAJ,CAAnB;AAsBH,OApCD,EAqCC2C,KArCD,CAqCOC,GAAG,IAAG;AACXtD,QAAAA,OAAO,CAACC,GAAR,CAAYqD,GAAZ;AACA,aAAKxD,QAAL,CAAcyD,SAAS,IAAG;AACtB,iBAAM;AACN7C,YAAAA,KAAK,EAAC,IADA;AAEND,YAAAA,IAAI,EAAC8C,SAAS,CAAC9C;AAFT,WAAN;AAGF,SAJF;AAKH,OA5CC;AA6CL,KAhHiB;;AAAA,SAiHlB+C,UAjHkB,GAiHJC,CAAD,IAAM;AAEfA,MAAAA,CAAC,CAACC,cAAF;AAEE/C,MAAAA,KAAK,CAAE,oDAAmD,KAAKhB,KAAL,CAAWgE,KAAM,kBAAiBvE,OAAQ,EAA/F,CAAL,CACCwB,IADD,CACMC,QAAQ,IAAI;AACd,YAAGA,QAAQ,CAACC,EAAZ,EAAe;AACX,iBAAOD,QAAP;AACH;;AACD,cAAME,KAAK,CAAC,8BAAD,CAAX;AACH,OAND,EAOCH,IAPD,CAOMC,QAAQ,IAAIA,QAAQ,CAACG,IAAT,EAPlB,EAQCJ,IARD,CAQMC,QAAQ,IAAI;AACd,cAAMU,SAAS,GAAG,IAAIC,IAAJ,GAAWC,cAAX,EAAlB;AACAzB,QAAAA,OAAO,CAACC,GAAR,CAAYY,QAAZ;AACA,aAAKI,gBAAL,CAAsBJ,QAAQ,CAACK,KAAT,CAAeC,GAArC,EAAyCN,QAAQ,CAACK,KAAT,CAAeE,GAAxD;AACA,aAAKC,iBAAL,CAAuBR,QAAQ,CAACK,KAAT,CAAeC,GAAtC,EAA0CN,QAAQ,CAACK,KAAT,CAAeE,GAAzD;AACA,aAAKE,aAAL,CAAmBT,QAAQ,CAACK,KAAT,CAAeC,GAAlC,EAAsCN,QAAQ,CAACK,KAAT,CAAeE,GAArD;AACA,aAAKwC,SAAL,CAAe/C,QAAQ,CAACK,KAAT,CAAeC,GAA9B,EAAkCN,QAAQ,CAACK,KAAT,CAAeE,GAAjD;AACA,aAAKtB,QAAL,CAAcH,KAAK,KAAI;AACrBc,UAAAA,IAAI,EAACd,KAAK,CAACgE,KADU;AAErBjC,UAAAA,OAAO,EAACb,QAAQ,CAACc,GAAT,CAAaD,OAFA;AAGrBE,UAAAA,IAAI,EAAC9C,OAAO,CAAC+B,QAAQ,CAACgB,EAAV,CAHS;AAIrBC,UAAAA,IAAI,EAAC/C,OAAO,CAAC8B,QAAQ,CAACgB,EAAV,EAAahB,QAAQ,CAACkB,QAAtB,CAJS;AAKrBC,UAAAA,OAAO,EAACnB,QAAQ,CAACmB,OAAT,CAAiB,CAAjB,EAAoBC,WALP;AAMrBC,UAAAA,IAAI,EAAClD,UAAU,CAAC6B,QAAQ,CAACsB,IAAT,CAAcD,IAAf,CANM;AAOrBE,UAAAA,OAAO,EAACpD,UAAU,CAAC6B,QAAQ,CAACsB,IAAT,CAAcE,QAAf,CAPG;AAQrBC,UAAAA,OAAO,EAACtD,UAAU,CAAC6B,QAAQ,CAACsB,IAAT,CAAcI,QAAf,CARG;AASrBC,UAAAA,QAAQ,EAACxD,UAAU,CAAC6B,QAAQ,CAACsB,IAAT,CAAcM,UAAf,CATE;AAUrBC,UAAAA,QAAQ,EAAC7B,QAAQ,CAACsB,IAAT,CAAcO,QAVF;AAWrBC,UAAAA,IAAI,EAAC1D,YAAY,CAAC4B,QAAQ,CAAC8B,IAAT,CAAcC,KAAf,CAXI;AAYrBC,UAAAA,KAAK,EAACC,YAAY,CAACjC,QAAQ,CAACmB,OAAT,CAAiB,CAAjB,EAAoBnC,EAArB,CAZG;AAarBsB,UAAAA,GAAG,EAACN,QAAQ,CAACK,KAAT,CAAeC,GAbE;AAcrBC,UAAAA,GAAG,EAACP,QAAQ,CAACK,KAAT,CAAeE,GAdE;AAerB2B,UAAAA,MAAM,EAAClC,QAAQ,CAACkC,MAAT,CAAgBC,GAfF;AAgBrBC,UAAAA,QAAQ,EAACpC,QAAQ,CAACsB,IAAT,CAAcc,QAhBF;AAiBrBC,UAAAA,OAAO,EAACnE,OAAO,CAAC8B,QAAQ,CAACc,GAAT,CAAauB,OAAd,EAAsBrC,QAAQ,CAACkB,QAA/B,CAjBM;AAkBrBoB,UAAAA,MAAM,EAACpE,OAAO,CAAC8B,QAAQ,CAACc,GAAT,CAAawB,MAAd,EAAqBtC,QAAQ,CAACkB,QAA9B,CAlBO;AAmBrBqB,UAAAA,UAAU,EAAC,wBAnBU;AAoBrBnB,UAAAA,WAAW,EAAC4B,SApBS;AAqBrBnD,UAAAA,KAAK,EAAC;AArBe,SAAJ,CAAnB;AAuBH,OAtCD,EAuCC2C,KAvCD,CAuCOC,GAAG,IAAG;AACXtD,QAAAA,OAAO,CAACC,GAAR,CAAYqD,GAAZ;AACA,aAAKxD,QAAL,CAAcyD,SAAS,IAAG;AACtB,iBAAM;AACN7C,YAAAA,KAAK,EAAC,IADA;AAEND,YAAAA,IAAI,EAAC8C,SAAS,CAAC9C;AAFT,WAAN;AAGF,SAJF;AAKH,OA9CC;AAgDL,KArKiB;;AAAA,SAgOlBQ,gBAhOkB,GAgOC,CAACE,GAAD,EAAKC,GAAL,KAAW;AAE1BpB,MAAAA,OAAO,CAACC,GAAR,CAAYkB,GAAZ;AACA,WAAKxB,KAAL,CAAWI,qBAAX,CAAiC+D,MAAjC,GAAwC,CAAxC;AAEAnD,MAAAA,KAAK,CAAE,uDAAsDQ,GAAI,QAAOC,GAAI,kBAAiBhC,OAAQ,EAAhG,CAAL,CACGwB,IADH,CACQC,QAAQ,IAAI;AACd,YAAGA,QAAQ,CAACC,EAAZ,EAAe;AACX,iBAAOD,QAAP;AACH;;AACD,cAAME,KAAK,CAAC,8BAAD,CAAX;AACH,OANH,EAOGH,IAPH,CAOQC,QAAQ,IAAIA,QAAQ,CAACG,IAAT,EAPpB,EAQGJ,IARH,CAQQC,QAAQ,IAAI;AACdb,QAAAA,OAAO,CAACC,GAAR,CAAYY,QAAZ;;AACA,aAAK,IAAIkD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1B,eAAKjE,QAAL,CAAc;AACVC,YAAAA,qBAAqB,EAAC,CAAC,GAAG,KAAKJ,KAAL,CAAWI,qBAAf,EAAqC;AACvD,oBAAKgE,CADkD;AAEvD,sBAAOjF,OAAO,CAAC+B,QAAQ,CAACmD,KAAT,CAAeD,CAAf,EAAkBlC,EAAnB,CAFyC;AAGvD,yBAAUhB,QAAQ,CAACmD,KAAT,CAAeD,CAAf,EAAkB/B,OAAlB,CAA0B,CAA1B,EAA6BC,WAHgB;AAIvD,yBAAUjD,UAAU,CAAC6B,QAAQ,CAACmD,KAAT,CAAeD,CAAf,EAAkB7B,IAAlB,CAAuB+B,GAAxB,CAJmC;AAKvD,yBAAUjF,UAAU,CAAC6B,QAAQ,CAACmD,KAAT,CAAeD,CAAf,EAAkB7B,IAAlB,CAAuBgC,GAAxB,CALmC;AAMvD,0BAAWrD,QAAQ,CAACmD,KAAT,CAAeD,CAAf,EAAkBrB,QAN0B;AAOvD,sBAAOzD,YAAY,CAAC4B,QAAQ,CAACmD,KAAT,CAAeD,CAAf,EAAkBI,UAAnB,CAPoC;AAQvD,uBAAQrB,YAAY,CAACjC,QAAQ,CAACmD,KAAT,CAAeD,CAAf,EAAkB/B,OAAlB,CAA0B,CAA1B,EAA6BnC,EAA9B,CARmC;AASvD,wBAASgB,QAAQ,CAACmD,KAAT,CAAeD,CAAf,EAAkBhB,MAT4B;AAUvD,0BAAWlC,QAAQ,CAACmD,KAAT,CAAeD,CAAf,EAAkBd,QAV0B;AAWvD,yBAAUlE,OAAO,CAAC8B,QAAQ,CAACmD,KAAT,CAAeD,CAAf,EAAkBb,OAAnB,EAA2BrC,QAAQ,CAACuD,eAApC,CAXsC;AAYvD,wBAASrF,OAAO,CAAC8B,QAAQ,CAACmD,KAAT,CAAeD,CAAf,EAAkBZ,MAAnB,EAA0BtC,QAAQ,CAACuD,eAAnC;AAZuC,aAArC,CADZ;AAeVxE,YAAAA,aAAa,EAAC,KAAKD,KAAL,CAAWI,qBAAX,CAAiC,CAAjC;AAfJ,WAAd;AAiBH;AACF,OA7BH;AA8BH,KAnQiB;;AAAA,SAoQlBsB,iBApQkB,GAoQE,CAACF,GAAD,EAAKC,GAAL,KAAW;AAE3B,WAAKzB,KAAL,CAAWU,sBAAX,CAAkCyD,MAAlC,GAAyC,CAAzC;AAEAnD,MAAAA,KAAK,CAAE,uDAAsDQ,GAAI,QAAOC,GAAI,kBAAiBhC,OAAQ,EAAhG,CAAL,CACGwB,IADH,CACQC,QAAQ,IAAI;AACd,YAAGA,QAAQ,CAACC,EAAZ,EAAe;AACX,iBAAOD,QAAP;AACH;;AACD,cAAME,KAAK,CAAC,8BAAD,CAAX;AACH,OANH,EAOGH,IAPH,CAOQC,QAAQ,IAAIA,QAAQ,CAACG,IAAT,EAPpB,EAQGJ,IARH,CAQQC,QAAQ,IAAI;AACd,cAAMU,SAAS,GAAG,IAAIC,IAAJ,GAAWC,cAAX,EAAlB;AACAzB,QAAAA,OAAO,CAACC,GAAR,CAAYY,QAAZ;;AACA,aAAK,IAAIkD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AAC3B,eAAKjE,QAAL,CAAc;AACVO,YAAAA,sBAAsB,EAAC,CAAC,GAAG,KAAKV,KAAL,CAAWU,sBAAf,EAAsC;AACzD,oBAAK0D,CADoD;AAEzD,sBAAOjF,OAAO,CAAC+B,QAAQ,CAACwD,MAAT,CAAgBN,CAAhB,EAAmBlC,EAApB,CAF2C;AAGzD,sBAAO9C,OAAO,CAAC8B,QAAQ,CAACwD,MAAT,CAAgBN,CAAhB,EAAmBlC,EAApB,EAAuBhB,QAAQ,CAACuD,eAAhC,CAH2C;AAIzD,yBAAUvD,QAAQ,CAACwD,MAAT,CAAgBN,CAAhB,EAAmB/B,OAAnB,CAA2B,CAA3B,EAA8BC,WAJiB;AAKzD,sBAAOjD,UAAU,CAAC6B,QAAQ,CAACwD,MAAT,CAAgBN,CAAhB,EAAmB7B,IAApB,CALwC;AAMzD,0BAAWlD,UAAU,CAAC6B,QAAQ,CAACwD,MAAT,CAAgBN,CAAhB,EAAmBtB,UAApB,CANoC;AAOzD,0BAAW5B,QAAQ,CAACwD,MAAT,CAAgBN,CAAhB,EAAmBrB,QAP2B;AAQzD,0BAAW7B,QAAQ,CAACwD,MAAT,CAAgBN,CAAhB,EAAmBd,QAR2B;AASzD,sBAAOhE,YAAY,CAAC4B,QAAQ,CAACwD,MAAT,CAAgBN,CAAhB,EAAmBI,UAApB,CATsC;AAUzD,uBAAQrB,YAAY,CAACjC,QAAQ,CAACwD,MAAT,CAAgBN,CAAhB,EAAmB/B,OAAnB,CAA2B,CAA3B,EAA8BnC,EAA/B,CAVqC;AAWzD,wBAASgB,QAAQ,CAACwD,MAAT,CAAgBN,CAAhB,EAAmBhB;AAX6B,aAAtC,CADb;AAcV3C,YAAAA,cAAc,EAAC,KAAKT,KAAL,CAAWU,sBAAX,CAAkC,CAAlC;AAdL,WAAd;AAgBH;AACF,OA7BH;AA8BH,KAtSiB;;AAAA,SAuSlBiE,YAvSkB,GAuSJb,CAAD,IAAK;AACd,WAAK3D,QAAL,CAAc;AACV6D,QAAAA,KAAK,EAACF,CAAC,CAACc,MAAF,CAASZ;AADL,OAAd;AAGH,KA3SiB;;AAAA,SA+SlBa,WA/SkB,GA+SN,MAAI;AACZ,UAAG,KAAK7E,KAAL,CAAW8E,QAAd,EAAuB;AACnB,aAAK3E,QAAL,CAAc;AACV2E,UAAAA,QAAQ,EAAC;AADC,SAAd;AAGH,OAJD,MAIK;AACD,aAAK3E,QAAL,CAAc;AACV2E,UAAAA,QAAQ,EAAC;AADC,SAAd;AAGH;AACJ,KAzTiB;;AAEd,SAAK9E,KAAL,GAAW;AACPgE,MAAAA,KAAK,EAAC,EADC;AAEPlD,MAAAA,IAAI,EAAC,EAFE;AAGPiB,MAAAA,OAAO,EAAC,EAHD;AAIPgD,MAAAA,GAAG,EAACb,SAJG;AAKPhB,MAAAA,KAAK,EAACgB,SALC;AAMPT,MAAAA,UAAU,EAACS,SANJ;AAOP7B,MAAAA,OAAO,EAAC6B,SAPD;AAQP3B,MAAAA,IAAI,EAAC2B,SARE;AASPzB,MAAAA,OAAO,EAACyB,SATD;AAUPvB,MAAAA,OAAO,EAACuB,SAVD;AAWPrB,MAAAA,QAAQ,EAACqB,SAXF;AAYPc,MAAAA,SAAS,EAACd,SAZH;AAaPlB,MAAAA,IAAI,EAACkB,SAbE;AAcP1C,MAAAA,GAAG,EAAC0C,SAdG;AAePzC,MAAAA,GAAG,EAACyC,SAfG;AAgBPd,MAAAA,MAAM,EAACc,SAhBA;AAiBPZ,MAAAA,QAAQ,EAACY,SAjBF;AAkBPX,MAAAA,OAAO,EAACW,SAlBD;AAmBPV,MAAAA,MAAM,EAACU,SAnBA;AAoBPT,MAAAA,UAAU,EAACS,SApBJ;AAqBP9D,MAAAA,qBAAqB,EAAC,EArBf;AAuBPM,MAAAA,sBAAsB,EAAC,EAvBhB;AAyBPT,MAAAA,aAAa,EAAEiE,SAzBR;AA0BPzD,MAAAA,cAAc,EAAEyD,SA1BT;AA2BPY,MAAAA,QAAQ,EAAC,IA3BF;AA4BP/D,MAAAA,KAAK,EAAC;AA5BC,KAAX;AA8BH;;AAsIDY,EAAAA,aAAa,CAACH,GAAD,EAAKC,GAAL,EAAS;AAClBT,IAAAA,KAAK,CAAE,4DAA2DQ,GAAI,QAAOC,GAAI,UAAShC,OAAQ,EAA7F,CAAL,CACGwB,IADH,CACQgE,SAAS,IAAI;AACf,UAAGA,SAAS,CAAC9D,EAAb,EAAgB;AACZ,eAAO8D,SAAP;AACH;;AACD,YAAM7D,KAAK,CAAC,8BAAD,CAAX;AACH,KANH,EAOGH,IAPH,CAOQgE,SAAS,IAAIA,SAAS,CAAC5D,IAAV,EAPrB,EAQGJ,IARH,CAQQgE,SAAS,IAAI;AACf5E,MAAAA,OAAO,CAACC,GAAR,CAAY2E,SAAZ;AACA,WAAK9E,QAAL,CAAcH,KAAK,KAAI;AACrB+E,QAAAA,GAAG,EAACG,aAAa,CAACD,SAAS,CAACE,IAAV,CAAe,CAAf,EAAkB3C,IAAlB,CAAuBuC,GAAxB,CADI;AAErBK,QAAAA,KAAK,EAACH,SAAS,CAACE,IAAV,CAAe,CAAf,EAAkB3C,IAAlB,CAAuBuC,GAFR;AAGrBhE,QAAAA,KAAK,EAAC;AAHe,OAAJ,CAAnB;AAKH,KAfH,EAgBG2C,KAhBH,CAgBSC,GAAG,IAAG;AACXtD,MAAAA,OAAO,CAACC,GAAR,CAAYqD,GAAZ;AACA,WAAKxD,QAAL,CAAcyD,SAAS,IAAG;AACtB,eAAM;AACN7C,UAAAA,KAAK,EAAC,IADA;AAEND,UAAAA,IAAI,EAAC8C,SAAS,CAAC9C;AAFT,SAAN;AAGF,OAJF;AAKH,KAvBD;AAwBH;;AACDmD,EAAAA,SAAS,CAACzC,GAAD,EAAKC,GAAL,EAAS;AAClBT,IAAAA,KAAK,CAAE,uDAAsDQ,GAAI,QAAOC,GAAI,kBAAiBhC,OAAQ,EAAhG,CAAL,CACOwB,IADP,CACYgE,SAAS,IAAI;AACf,UAAGA,SAAS,CAAC9D,EAAb,EAAgB;AACZ,eAAO8D,SAAP;AACH;;AACD,YAAM7D,KAAK,CAAC,8BAAD,CAAX;AACH,KANP,EAOOH,IAPP,CAOYgE,SAAS,IAAIA,SAAS,CAAC5D,IAAV,EAPzB,EAQOJ,IARP,CAQYgE,SAAS,IAAI;AACf5E,MAAAA,OAAO,CAACC,GAAR,CAAY2E,SAAZ;;AACA,UAAGA,SAAS,CAACI,MAAb,EAAoB;AAClB,aAAKlF,QAAL,CAAcH,KAAK,KAAI;AACfsC,UAAAA,WAAW,EAAC2C,SAAS,CAACI,MAAV,CAAiB,CAAjB,EAAoB/C,WADjB;AAEfvB,UAAAA,KAAK,EAAC;AAFS,SAAJ,CAAnB;AAID,OALD,MAKK;AACH,aAAKZ,QAAL,CAAcH,KAAK,KAAI;AACfsC,UAAAA,WAAW,EAAC,cADG;AAEfvB,UAAAA,KAAK,EAAC;AAFS,SAAJ,CAAnB;AAID;AACJ,KArBP,EAsBO2C,KAtBP,CAsBaC,GAAG,IAAG;AACXtD,MAAAA,OAAO,CAACC,GAAR,CAAYqD,GAAZ;AACA,WAAKxD,QAAL,CAAcyD,SAAS,IAAG;AACtB,eAAM;AACN7C,UAAAA,KAAK,EAAC,IADA;AAEND,UAAAA,IAAI,EAAC8C,SAAS,CAAC9C;AAFT,SAAN;AAGF,OAJF;AAKH,KA7BL;AA8BC;;AA6EDwE,EAAAA,iBAAiB,GAAE;AACf,SAAK1E,cAAL,CAAoB,UAApB;AACF;;AAYF2E,EAAAA,MAAM,GAAE;AACJ,UAAM;AAACnF,MAAAA,qBAAD;AAAwBM,MAAAA,sBAAxB;AAAgDT,MAAAA,aAAhD;AAA+DQ,MAAAA;AAA/D,QAA+E,KAAKT,KAA1F;;AACA,QAAG,KAAKA,KAAL,CAAW8E,QAAd,EAAuB;AACnB,0BACQ;AAAK,QAAA,SAAS,EAAC,MAAf;AAAsB,QAAA,KAAK,EAAE;AACzBU,UAAAA,eAAe,EAAG;AADO,SAA7B;AAAA,gCAGI;AAAK,UAAA,SAAS,EAAC,WAAf;AAAA,kCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI,QAAC,IAAD;AACI,YAAA,KAAK,EAAE,KAAKxF,KAAL,CAAWgE,KADtB;AAEI,YAAA,OAAO,EAAE,KAAKW,YAFlB;AAGI,YAAA,MAAM,EAAE,KAAKd;AAHjB;AAAA;AAAA;AAAA;AAAA,kBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHJ,eAWI;AAAK,UAAA,SAAS,EAAC,cAAf;AAAA,oBACK,KAAK7D,KAAL,CAAWc,IAAX,gBACD,QAAC,WAAD;AAAa,YAAA,OAAO,EAAE,KAAKd;AAA3B;AAAA;AAAA;AAAA;AAAA,kBADC,GAEC;AAHN;AAAA;AAAA;AAAA;AAAA,gBAXJ,eAgBA;AAAK,UAAA,SAAS,EAAC,eAAf;AAAA,oBACKC,aAAa,gBACd;AAAK,YAAA,SAAS,EAAC,gBAAf;AAAA,oCACI;AAAQ,cAAA,SAAS,EAAC,MAAlB;AACI,cAAA,OAAO,EAAE,MAAM,KAAKH,iBAAL,EADnB;AAEI,cAAA,QAAQ,EAAEG,aAAa,CAACC,EAAd,KAAqBE,qBAAqB,CAAC+D,MAAtB,GAA6B,CAFhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,eAMI;AAAQ,cAAA,SAAS,EAAC,aAAlB;AACI,cAAA,OAAO,EAAE,MAAM,KAAKU,WAAL,EADnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBANJ,eAUI;AAAQ,cAAA,SAAS,EAAC,OAAlB;AACQ,cAAA,OAAO,EAAE,MAAM,KAAKtE,iBAAL,EADvB;AAEQ,cAAA,QAAQ,EAAEN,aAAa,CAACC,EAAd,KAAqB,CAFvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAVJ,eAeI;AAAK,cAAA,SAAS,EAAC,YAAf;AAAA,qCACI;AAAK,gBAAA,SAAS,EAAC,cAAf;AAAA,uCACI;AAAK,kBAAA,SAAS,EAAC,sBAAf;AAAsC,kBAAA,KAAK,EAAE;AACL,iCAAa,eAAcD,aAAa,CAACC,EAAd,IAAkB,MAAIE,qBAAqB,CAAC+D,MAA5C,CAAoD;AAD1E,mBAA7C;AAAA,4BAGK/D,qBAAqB,CAACqF,GAAtB,CAA0BC,GAAG,iBAAI,QAAC,iBAAD;AAAgC,oBAAA,OAAO,EAAEA;AAAzC,qBAAwBA,GAAG,CAACxF,EAA5B;AAAA;AAAA;AAAA;AAAA,0BAAjC;AAHL;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,oBAfJ;AAAA;AAAA;AAAA;AAAA;AAAA,kBADc,GA0BhB;AA3BF;AAAA;AAAA;AAAA;AAAA,gBAhBA;AAAA;AAAA;AAAA;AAAA;AAAA,cADR;AAgDH,KAjDD,MAiDK;AACD,0BACI;AAAK,QAAA,SAAS,EAAC,MAAf;AAAsB,QAAA,KAAK,EAAE;AACzBsF,UAAAA,eAAe,EAAG;AADO,SAA7B;AAAA,gCAGI;AAAK,UAAA,SAAS,EAAC,WAAf;AAAA,kCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI,QAAC,IAAD;AACI,YAAA,KAAK,EAAE,KAAKxF,KAAL,CAAWgE,KADtB;AAEI,YAAA,OAAO,EAAE,KAAKW,YAFlB;AAGI,YAAA,MAAM,EAAE,KAAKd;AAHjB;AAAA;AAAA;AAAA;AAAA,kBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHJ,eAWI;AAAK,UAAA,SAAS,EAAC,cAAf;AAAA,oBACK,KAAK7D,KAAL,CAAWc,IAAX,gBACD,QAAC,WAAD;AAAa,YAAA,OAAO,EAAE,KAAKd;AAA3B;AAAA;AAAA;AAAA;AAAA,kBADC,GAEC;AAHN;AAAA;AAAA;AAAA;AAAA,gBAXJ,eAgBA;AAAK,UAAA,SAAS,EAAC,eAAf;AAAA,oBACKS,cAAc,gBACf;AAAK,YAAA,SAAS,EAAC,gBAAf;AAAA,oCACI;AAAQ,cAAA,SAAS,EAAC,MAAlB;AACI,cAAA,OAAO,EAAE,MAAM,KAAKD,kBAAL,EADnB;AAEI,cAAA,QAAQ,EAAEC,cAAc,CAACP,EAAf,KAAsBQ,sBAAsB,CAACyD,MAAvB,GAA8B,CAFlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,eAMI;AAAQ,cAAA,SAAS,EAAC,aAAlB;AACI,cAAA,OAAO,EAAE,MAAM,KAAKU,WAAL,EADnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBANJ,eAUI;AAAQ,cAAA,SAAS,EAAC,OAAlB;AACQ,cAAA,OAAO,EAAE,MAAM,KAAKlE,kBAAL,EADvB;AAEQ,cAAA,QAAQ,EAAEF,cAAc,CAACP,EAAf,KAAsB,CAFxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAVJ,eAeI;AAAK,cAAA,SAAS,EAAC,YAAf;AAAA,qCACI;AAAK,gBAAA,SAAS,EAAC,cAAf;AAAA,uCACI;AAAK,kBAAA,SAAS,EAAC,sBAAf;AAAsC,kBAAA,KAAK,EAAE;AACL,iCAAa,eAAcO,cAAc,CAACP,EAAf,IAAmB,MAAIQ,sBAAsB,CAACyD,MAA9C,CAAsD;AAD5E,mBAA7C;AAAA,4BAGKzD,sBAAsB,CAAC+E,GAAvB,CAA2BC,GAAG,iBAAI,QAAC,kBAAD;AAAiC,oBAAA,OAAO,EAAEA;AAA1C,qBAAyBA,GAAG,CAACxF,EAA7B;AAAA;AAAA;AAAA;AAAA,0BAAlC;AAHL;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,oBAfJ;AAAA;AAAA;AAAA;AAAA;AAAA,kBADe,GA0BjB;AA3BF;AAAA;AAAA;AAAA;AAAA,gBAhBA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ;AAgDH;AAEJ;;AAjauC;;AAma5C,MAAMiD,YAAY,GAAG;AACjB,OAAI,0BADa;AAEjB,OAAI,0BAFa;AAGjB,OAAI,0BAHa;AAIjB,OAAI,0BAJa;AAKjB,OAAI,0BALa;AAMjB,OAAI,0BANa;AAOjB,OAAI,0BAPa;AAQjB,OAAI,0BARa;AASjB,OAAI,0BATa;AAUjB,OAAI,0BAVa;AAWjB,OAAI,qBAXa;AAYjB,OAAI,qBAZa;AAajB,OAAI,qBAba;AAcjB,OAAI,qBAda;AAejB,OAAI,qBAfa;AAgBjB,OAAI,qBAhBa;AAiBjB,OAAI,qBAjBa;AAkBjB,OAAI,qBAlBa;AAmBjB,OAAI,qBAnBa;AAoBjB,OAAI,kBApBa;AAqBjB,OAAI,kBArBa;AAsBjB,OAAI,kBAtBa;AAuBjB,OAAI,kBAvBa;AAwBjB,OAAI,kBAxBa;AAyBjB,OAAI,kBAzBa;AA0BjB,OAAI,kBA1Ba;AA2BjB,OAAI,kBA3Ba;AA4BjB,OAAI,kBA5Ba;AA6BjB,OAAI,kBA7Ba;AA8BjB,OAAI,kBA9Ba;AA+BjB,OAAI,kBA/Ba;AAgCjB,OAAI,kBAhCa;AAiCjB,OAAI,kBAjCa;AAkCjB,OAAI,kBAlCa;AAmCjB,OAAI,kBAnCa;AAoCjB,OAAI,kBApCa;AAqCjB,OAAI,kBArCa;AAsCjB,OAAI,kBAtCa;AAuCjB,OAAI,kBAvCa;AAwCjB,OAAI,kBAxCa;AAyCjB,OAAI,kBAzCa;AA0CjB,OAAI,kBA1Ca;AA2CjB,OAAI,kBA3Ca;AA4CjB,OAAI,kBA5Ca;AA6CjB,OAAI,kBA7Ca;AA8CjB,OAAI,kBA9Ca;AA+CjB,OAAI,kBA/Ca;AAgDjB,OAAI,kBAhDa;AAiDjB,OAAI,kBAjDa;AAkDjB,OAAI,kBAlDa;AAmDjB,OAAI,mBAnDa;AAoDjB,OAAI,oBApDa;AAqDjB,OAAI,oBArDa;AAsDjB,OAAI,oBAtDa;AAuDjB,OAAI;AAvDa,CAArB;AAyDA,MAAM+B,aAAa,GAAG;AAClB,KAAE,cADgB;AAElB,KAAE,OAFgB;AAGlB,KAAE,SAHgB;AAIlB,KAAE,KAJgB;AAKlB,KAAE;AALgB,CAAtB;AAOA,eAAexF,cAAf","sourcesContent":["import React from 'react'\nimport WeatherItem from './WeatherItem';\nimport Form from '../Form/Form'\nimport CalDate from '../Functions/CalDate';\nimport CalTime from '../Functions/CalTime';\nimport CalCelsius from '../Functions/CalCelsius';\nimport CalWindSpeed from '../Functions/CalWindSpeed';\nimport ForecastDailyItem from './ForecastDailyItem';\nimport ForecastHourlyItem from './ForecastHourlyItem';\nimport './Forecast.css';\nimport './CurrentWeather.css';\n\nconst API_key=\"157d33f8987d245bc6a1997408e90015\"\n//const localTime = new Date().toLocaleString()\n\nclass CurrentWeather extends React.Component{\n    constructor(props){\n        super(props)\n        this.state={\n            value:\"\",\n            city:\"\",\n            country:\"\",\n            aqi:undefined,\n            image:undefined,\n            background:undefined,\n            weather:undefined,\n            temp:undefined,\n            tempMax:undefined,\n            tempMin:undefined,\n            tempFeel:undefined,\n            pressurre:undefined,\n            wind:undefined,\n            lat:undefined,\n            lon:undefined,\n            clouds:undefined, \n            humidity:undefined,\n            sunrise:undefined,\n            sunset:undefined,\n            background:undefined,\n            forecastDailyElements:[\n            ],\n            forecastHourlyElements:[\n            ],\n            dailyProperty: undefined,\n            hourlyProperty: undefined,\n            forecast:true,\n            error:false\n        }\n    }\n\n    nextdailyProperty = () => {\n        const newIndex = this.state.dailyProperty.id +1\n        this.setState({\n            dailyProperty: this.state.forecastDailyElements[newIndex]\n        })\n        console.log(newIndex)\n    }\n\n    prevdailyProperty = () => {\n        const newIndex = this.state.dailyProperty.id -1\n        this.setState({\n            dailyProperty: this.state.forecastDailyElements[newIndex]\n        })\n    }\n\n    nextHourlyProperty = () => {\n        const newIndex = this.state.hourlyProperty.id +1\n        this.setState({\n            hourlyProperty: this.state.forecastHourlyElements[newIndex]\n        })\n    }\n    \n    prevHourlyProperty = () => {\n        const newIndex = this.state.hourlyProperty.id -1\n        this.setState({\n            hourlyProperty: this.state.forecastHourlyElements[newIndex]\n        })\n    }\n    defaultWeather = (cityName) => {\n        this.setState(state =>({\n            city:cityName,\n            error:false\n          }))\n          fetch(`http://api.openweathermap.org/data/2.5/weather?q=${cityName}&lang=pl&APPID=${API_key}`)\n          .then(response => {\n              if(response.ok){\n                  return response\n              }\n              throw Error(\"Błąd pobierania danych z API\")\n          })\n          .then(response => response.json())\n          .then(response => {\n            this.getForecastDaily(response.coord.lat,response.coord.lon)\n            this.getForecastHourly(response.coord.lat,response.coord.lon)\n            this.getAirQuality(response.coord.lat,response.coord.lon)\n              const localTime = new Date().toLocaleString()\n              console.log(response)\n              this.setState(state =>({\n                city:state.city,\n                country:response.sys.country,\n                date:CalDate(response.dt),\n                time:CalTime(response.dt,response.timezone),\n                weather:response.weather[0].description,\n                temp:CalCelsius(response.main.temp),\n                tempMax:CalCelsius(response.main.temp_max),\n                tempMin:CalCelsius(response.main.temp_min),\n                tempFeel:CalCelsius(response.main.feels_like),\n                pressure:response.main.pressure,\n                wind:CalWindSpeed(response.wind.speed),\n                image:weatherIcons[response.weather[0].id],\n                lat:response.coord.lat,\n                lon:response.coord.lon,\n                clouds:response.clouds.all, \n                humidity:response.main.humidity,\n                sunrise:CalTime(response.sys.sunrise,response.timezone),\n                sunset:CalTime(response.sys.sunset,response.timezone),\n                background:\"/images/cloudyCity.jpg\",\n                error:false\n              }))\n          })\n          .catch(err =>{\n            console.log(err)\n            this.setState(prevState =>{\n                return{\n                error:true,\n                city:prevState.city\n            }})\n        })\n    }\n    getWeather = (e) =>{\n        \n        e.preventDefault()\n          \n          fetch(`http://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&lang=pl&APPID=${API_key}`)\n          .then(response => {\n              if(response.ok){\n                  return response\n              }\n              throw Error(\"Błąd pobierania danych z API\")\n          })\n          .then(response => response.json())\n          .then(response => {\n              const localTime = new Date().toLocaleString()\n              console.log(response)\n              this.getForecastDaily(response.coord.lat,response.coord.lon)\n              this.getForecastHourly(response.coord.lat,response.coord.lon)\n              this.getAirQuality(response.coord.lat,response.coord.lon)\n              this.getAlerts(response.coord.lat,response.coord.lon)\n              this.setState(state =>({\n                city:state.value,\n                country:response.sys.country,\n                date:CalDate(response.dt),\n                time:CalTime(response.dt,response.timezone),\n                weather:response.weather[0].description,\n                temp:CalCelsius(response.main.temp),\n                tempMax:CalCelsius(response.main.temp_max),\n                tempMin:CalCelsius(response.main.temp_min),\n                tempFeel:CalCelsius(response.main.feels_like),\n                pressure:response.main.pressure,\n                wind:CalWindSpeed(response.wind.speed),\n                image:weatherIcons[response.weather[0].id],\n                lat:response.coord.lat,\n                lon:response.coord.lon,\n                clouds:response.clouds.all, \n                humidity:response.main.humidity,\n                sunrise:CalTime(response.sys.sunrise,response.timezone),\n                sunset:CalTime(response.sys.sunset,response.timezone),\n                background:\"/images/cloudyCity.jpg\",\n                description:undefined,\n                error:false\n              }))\n          })\n          .catch(err =>{\n            console.log(err)\n            this.setState(prevState =>{\n                return{\n                error:true,\n                city:prevState.city\n            }})\n        })\n        \n    }\n    getAirQuality(lat,lon){\n        fetch(`http://api.openweathermap.org/data/2.5/air_pollution?lat=${lat}&lon=${lon}&appid=${API_key}`)\n          .then(response2 => {\n              if(response2.ok){\n                  return response2\n              }\n              throw Error(\"Błąd pobierania danych z API\")\n          })\n          .then(response2 => response2.json())\n          .then(response2 => {\n              console.log(response2)\n              this.setState(state =>({\n                aqi:airConditions[response2.list[0].main.aqi],\n                color:response2.list[0].main.aqi,\n                error:false\n              }))\n          })\n          .catch(err =>{\n            console.log(err)\n            this.setState(prevState =>{\n                return{\n                error:true,\n                city:prevState.city\n            }})\n        })\n    }\n    getAlerts(lat,lon){\n    fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&lang=pl&appid=${API_key}`)\n          .then(response2 => {\n              if(response2.ok){\n                  return response2\n              }\n              throw Error(\"Błąd pobierania danych z API\")\n          })\n          .then(response2 => response2.json())\n          .then(response2 => {\n              console.log(response2)\n              if(response2.alerts){\n                this.setState(state =>({\n                        description:response2.alerts[0].description,\n                        error:false\n                      }))   \n              }else{\n                this.setState(state =>({\n                        description:\"brak alertów\",\n                        error:false\n                      }))\n              }\n          })\n          .catch(err =>{\n            console.log(err)\n            this.setState(prevState =>{\n                return{\n                error:true,\n                city:prevState.city\n            }})\n        })\n    }\n    getForecastDaily = (lat,lon)=>{\n\n        console.log(lat)\n        this.state.forecastDailyElements.length=0\n        \n        fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&lang=pl&appid=${API_key}`)\n          .then(response => {\n              if(response.ok){\n                  return response\n              }\n              throw Error(\"Błąd pobierania danych z API\")\n          })\n          .then(response => response.json())\n          .then(response => {\n              console.log(response)\n              for (var i = 0; i < 8; i++) {\n                this.setState({\n                    forecastDailyElements:[...this.state.forecastDailyElements,{\n                        'id':i,\n                        'date':CalDate(response.daily[i].dt),\n                        'weather':response.daily[i].weather[0].description,\n                        'tempMax':CalCelsius(response.daily[i].temp.max),\n                        'tempMin':CalCelsius(response.daily[i].temp.min),\n                        'pressure':response.daily[i].pressure,\n                        'wind':CalWindSpeed(response.daily[i].wind_speed),\n                        'image':weatherIcons[response.daily[i].weather[0].id],\n                        'clouds':response.daily[i].clouds,\n                        'humidity':response.daily[i].humidity,\n                        'sunrise':CalTime(response.daily[i].sunrise,response.timezone_offset) ,\n                        'sunset':CalTime(response.daily[i].sunset,response.timezone_offset)\n                    }],\n                    dailyProperty:this.state.forecastDailyElements[1]\n                })\n            }  \n          })\n    }\n    getForecastHourly = (lat,lon)=>{\n\n        this.state.forecastHourlyElements.length=0\n        \n        fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&lang=pl&appid=${API_key}`)\n          .then(response => {\n              if(response.ok){\n                  return response\n              }\n              throw Error(\"Błąd pobierania danych z API\")\n          })\n          .then(response => response.json())\n          .then(response => {\n              const localTime = new Date().toLocaleString()\n              console.log(response)\n              for (var i = 0; i < 48; i++) {\n                this.setState({\n                    forecastHourlyElements:[...this.state.forecastHourlyElements,{\n                        'id':i,\n                        'date':CalDate(response.hourly[i].dt),\n                        'time':CalTime(response.hourly[i].dt,response.timezone_offset),\n                        'weather':response.hourly[i].weather[0].description,\n                        'temp':CalCelsius(response.hourly[i].temp),\n                        'tempFeel':CalCelsius(response.hourly[i].feels_like),\n                        'pressure':response.hourly[i].pressure,\n                        'humidity':response.hourly[i].humidity,\n                        'wind':CalWindSpeed(response.hourly[i].wind_speed),\n                        'image':weatherIcons[response.hourly[i].weather[0].id],\n                        'clouds':response.hourly[i].clouds,\n                    }],\n                    hourlyProperty:this.state.forecastHourlyElements[1]\n                })\n            }\n          })\n    }\n    inputHandler=(e)=>{\n        this.setState({\n            value:e.target.value\n        })\n    }\n    componentDidMount(){\n        this.defaultWeather(\"Warszawa\")\n     }\n    setForecast=()=>{\n        if(this.state.forecast){\n            this.setState({\n                forecast:false\n            })\n        }else{\n            this.setState({\n                forecast:true\n            })\n        }\n    }\n    render(){\n        const {forecastDailyElements, forecastHourlyElements, dailyProperty, hourlyProperty}=this.state\n        if(this.state.forecast){\n            return(\n                    <div className=\"main\" style={{ \n                        backgroundImage: `url(\"/images/bg.jpg\")` \n                    }}>\n                        <div className=\"city-form\">\n                            <h1>Wyszukaj miasto dla którego chcesz sprawdzić obecne warunki pogodowe oraz prognozy pogody</h1>\n                            <Form \n                                value={this.state.value}  \n                                handler={this.inputHandler}\n                                submit={this.getWeather}\n                            /> \n                        </div> \n                        <div className=\"current-main\">\n                            {this.state.city ?(\n                            <WeatherItem weather={this.state}/>   \n                            ):null}\n                        </div>\n                    <div className=\"forecast-main\">\n                        {dailyProperty ?( \n                        <div className=\"forecast-cards\">\n                            <button className=\"left\" \n                                onClick={() => this.nextdailyProperty()} \n                                disabled={dailyProperty.id === forecastDailyElements.length-3}\n                            >Next\n                            </button>\n                            <button className=\"swap-button\"\n                                onClick={() => this.setForecast()} \n                            >GODZINOWA\n                            </button>\n                            <button className=\"right\"\n                                    onClick={() => this.prevdailyProperty()} \n                                    disabled={dailyProperty.id === 1}\n                            >Prev\n                            </button>\n                            <div className=\"main-cards\">  \n                                <div className=\"cards-slider\">         \n                                    <div className=\"cards-slider-wrapper\" style={{\n                                                                            'transform':`translateX(-${dailyProperty.id*(100/forecastDailyElements.length)}%)`\n                                    }}>\n                                        {forecastDailyElements.map(fde => <ForecastDailyItem key={fde.id} element={fde} />)}\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    ):null}\n                    </div>\n                    </div>\n            )\n        }else{\n            return(\n                <div className=\"main\" style={{ \n                    backgroundImage: `url(\"/images/bg.jpg\")` \n                }}>\n                    <div className=\"city-form\">\n                        <h1>Wyszukaj miasto dla którego chcesz sprawdzić obecne warunki pogodowe oraz prognozy pogody</h1>\n                        <Form \n                            value={this.state.value}  \n                            handler={this.inputHandler}\n                            submit={this.getWeather}\n                        /> \n                    </div> \n                    <div className=\"current-main\">\n                        {this.state.city ?(\n                        <WeatherItem weather={this.state}/>   \n                        ):null}\n                    </div>\n                <div className=\"forecast-main\">\n                    {hourlyProperty ?( \n                    <div className=\"forecast-cards\">\n                        <button className=\"left\" \n                            onClick={() => this.nextHourlyProperty()} \n                            disabled={hourlyProperty.id === forecastHourlyElements.length-3}\n                        >Next\n                        </button>\n                        <button className=\"swap-button\"\n                            onClick={() => this.setForecast()} \n                        >DZIENNA\n                        </button>\n                        <button className=\"right\"\n                                onClick={() => this.prevHourlyProperty()} \n                                disabled={hourlyProperty.id === 1}\n                        >Prev\n                        </button>\n                        <div className=\"main-cards\">  \n                            <div className=\"cards-slider\">         \n                                <div className=\"cards-slider-wrapper\" style={{\n                                                                        'transform':`translateX(-${hourlyProperty.id*(100/forecastHourlyElements.length)}%)`\n                                }}>\n                                    {forecastHourlyElements.map(fde => <ForecastHourlyItem key={fde.id} element={fde} />)}\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                ):null}\n                </div>\n                </div>\n            )\n        }\n        \n    }\n}\nconst weatherIcons = {\n    200:'/images/thunderstorm.png',\n    201:'/images/thunderstorm.png',\n    202:'/images/thunderstorm.png',\n    210:'/images/thunderstorm.png',\n    211:'/images/thunderstorm.png',\n    212:'/images/thunderstorm.png',\n    221:'/images/thunderstorm.png',\n    230:'/images/thunderstorm.png',\n    231:'/images/thunderstorm.png',\n    232:'/images/thunderstorm.png',\n    300:'/images/drizzle.png',\n    301:'/images/drizzle.png',\n    302:'/images/drizzle.png',\n    310:'/images/drizzle.png',\n    311:'/images/drizzle.png',\n    312:'/images/drizzle.png',\n    313:'/images/drizzle.png',\n    314:'/images/drizzle.png',\n    321:'/images/drizzle.png',\n    500:'/images/rain.png',\n    501:'/images/rain.png',\n    503:'/images/rain.png',\n    504:'/images/rain.png',\n    511:'/images/rain.png',\n    520:'/images/rain.png',\n    521:'/images/rain.png',\n    522:'/images/rain.png',\n    531:'/images/rain.png',\n    500:'/images/rain.png',\n    600:'/images/snow.png',\n    601:'/images/snow.png',\n    602:'/images/snow.png',\n    611:'/images/snow.png',\n    612:'/images/snow.png',\n    613:'/images/snow.png',\n    615:'/images/snow.png',\n    616:'/images/snow.png',\n    620:'/images/snow.png',\n    621:'/images/snow.png',\n    622:'/images/snow.png',\n    701:'/images/mist.png',\n    711:'/images/mist.png',\n    721:'/images/mist.png',\n    731:'/images/mist.png',\n    741:'/images/mist.png',\n    751:'/images/mist.png',\n    761:'/images/mist.png',\n    762:'/images/mist.png',\n    771:'/images/mist.png',\n    781:'/images/mist.png',\n    800:'/images/clear.png',\n    801:'/images/clouds.png',\n    802:'/images/clouds.png',\n    803:'/images/clouds.png',\n    804:'/images/clouds.png',\n}\nconst airConditions = {\n    1:'Bardzo dobra',\n    2:'Dobra',\n    3:'Średnia',\n    4:'Zła',\n    5:'Bardzo zła',\n}\nexport default CurrentWeather"]},"metadata":{},"sourceType":"module"}