{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vened\\\\Desktop\\\\Pogoda\\\\my_weather\\\\src\\\\components\\\\forecast\\\\Forecast.js\";\nimport React from 'react';\nimport ForecastDailyItem from './ForecastDailyItem';\nimport ForecastHourlyItem from './ForecastHourlyItem';\nimport CurrentWeather from '../currentWeather/CurrentWeather';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_key = \"157d33f8987d245bc6a1997408e90015\";\n\nclass Forecast extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      elements: [],\n      elements2: []\n    };\n\n    this.getForecastDaily = props => {\n      this.state.elements.length = 0;\n      fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${this.props.lat}&lon=${this.props.lon}&appid=${API_key}`).then(response => {\n        if (response.ok) {\n          return response;\n        }\n\n        throw Error(\"Błąd pobierania danych z API\");\n      }).then(response => response.json()).then(response => {\n        const localTime = new Date().toLocaleString();\n        console.log(response);\n\n        for (var i = 1; i < 8; i++) {\n          this.setState({\n            elements: [...this.state.elements, {\n              'id': response.daily[i],\n              'date': this.calDate(response.daily[i].dt),\n              'weather': response.daily[i].weather[0].description,\n              'temp': this.calCelsius(response.daily[i].temp.day),\n              'pressure': response.daily[i].pressure,\n              'wind': this.calWindSpeed(response.daily[i].wind_speed)\n            }]\n          });\n        }\n      });\n    };\n\n    this.getForecastHourly = props => {\n      this.state.elements2.length = 0;\n      fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${this.props.lat}&lon=${this.props.lon}&appid=${API_key}`).then(response => {\n        if (response.ok) {\n          return response;\n        }\n\n        throw Error(\"Błąd pobierania danych z API\");\n      }).then(response => response.json()).then(response => {\n        const localTime = new Date().toLocaleString();\n        console.log(response);\n\n        for (var i = 0; i < 48; i++) {\n          this.setState({\n            elements2: [...this.state.elements2, {\n              'id': response.hourly[i],\n              'date': this.calDate(response.hourly[i].dt),\n              'time': this.calTime(response.hourly[i].dt, response.timezone_offset),\n              'weather': response.hourly[i].weather[0].description,\n              'temp': this.calCelsius(response.hourly[i].temp),\n              'pressure': response.hourly[i].pressure,\n              'wind': this.calWindSpeed(response.hourly[i].wind_speed)\n            }]\n          });\n        }\n      });\n    };\n  }\n\n  calDate(time) {\n    var date = new Date(time * 1000); // Hours part from the timestamp\n\n    var year = date.getFullYear();\n    var month = date.getMonth() + 1;\n    var day = date.getDate();\n    var daytime = day + '-' + 0 + month + '-' + year;\n    return daytime;\n  }\n\n  calTime(time, timezone) {\n    var date = new Date(time * 1000 + timezone * 1000);\n    var hours = date.getHours(); // Minutes part from the timestamp\n\n    var minutes = date.getMinutes(); // Seconds part from the timestamp\n\n    var seconds = date.getSeconds();\n    var daytime = hours + ':' + minutes + ':' + seconds;\n    return daytime;\n  }\n\n  calCelsius(temp) {\n    let cell = Math.floor(temp - 273.15);\n    return cell;\n  }\n\n  calWindSpeed(wind) {\n    let cell = Math.floor(wind * 3.6);\n    return cell;\n  }\n\n  componentDidMount() {\n    this.getForecastDaily();\n    this.getForecastHourly();\n  }\n\n  render() {\n    const elements = this.state.elements.map(e => {\n      return /*#__PURE__*/_jsxDEV(ForecastDailyItem, {\n        element: e\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 20\n      }, this);\n    });\n    const elements2 = this.state.elements2.map(e => {\n      return /*#__PURE__*/_jsxDEV(ForecastHourlyItem, {\n        element: e\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 20\n      }, this);\n    });\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [console.log(this.props.lat), this.getForecastDaily.bind(this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.getForecastDaily.bind(this),\n        children: \"Refresh Component\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.getForecastHourly.bind(this),\n        children: \"Refresh Component\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card2\",\n        children: elements\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card2\",\n        children: elements2\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Forecast;","map":{"version":3,"sources":["C:/Users/vened/Desktop/Pogoda/my_weather/src/components/forecast/Forecast.js"],"names":["React","ForecastDailyItem","ForecastHourlyItem","CurrentWeather","API_key","Forecast","Component","state","elements","elements2","getForecastDaily","props","length","fetch","lat","lon","then","response","ok","Error","json","localTime","Date","toLocaleString","console","log","i","setState","daily","calDate","dt","weather","description","calCelsius","temp","day","pressure","calWindSpeed","wind_speed","getForecastHourly","hourly","calTime","timezone_offset","time","date","year","getFullYear","month","getMonth","getDate","daytime","timezone","hours","getHours","minutes","getMinutes","seconds","getSeconds","cell","Math","floor","wind","componentDidMount","render","map","e","bind"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport ForecastDailyItem from './ForecastDailyItem';\r\nimport ForecastHourlyItem from './ForecastHourlyItem';\r\nimport CurrentWeather from '../currentWeather/CurrentWeather'\r\n\r\nconst API_key=\"157d33f8987d245bc6a1997408e90015\"\r\n\r\nclass Forecast extends React.Component{\r\n    state={\r\n        elements:[\r\n        ],\r\n        elements2:[\r\n        ]\r\n    }\r\n    calDate(time){\r\n        var date = new Date(time * 1000);\r\n        // Hours part from the timestamp\r\n        var year = date.getFullYear();\r\n        var month = date.getMonth()+1;\r\n        var day = date.getDate();\r\n        var daytime=day+'-'+0+month+'-'+year;\r\n        return daytime;\r\n      }\r\n      calTime(time,timezone){\r\n        var date = new Date(time*1000+timezone*1000);\r\n        var hours = date.getHours();\r\n        // Minutes part from the timestamp\r\n        var minutes = date.getMinutes();\r\n        // Seconds part from the timestamp\r\n        var seconds = date.getSeconds();\r\n    \r\n        var daytime=hours+':'+minutes+':'+seconds;\r\n        return daytime;\r\n      }\r\n    calCelsius(temp){\r\n        let cell= Math.floor(temp-273.15)\r\n        return cell;\r\n    }\r\n    calWindSpeed(wind){\r\n        let cell= Math.floor(wind*3.6)\r\n        return cell;\r\n    }\r\n    getForecastDaily = (props)=>{\r\n        this.state.elements.length=0\r\n        fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${this.props.lat}&lon=${this.props.lon}&appid=${API_key}`)\r\n          .then(response => {\r\n              if(response.ok){\r\n                  return response\r\n              }\r\n              throw Error(\"Błąd pobierania danych z API\")\r\n          })\r\n          .then(response => response.json())\r\n          .then(response => {\r\n              const localTime = new Date().toLocaleString()\r\n              console.log(response)\r\n              for (var i = 1; i < 8; i++) {\r\n                this.setState({\r\n                    elements:[...this.state.elements,{\r\n                        'id':response.daily[i],\r\n                        'date':this.calDate(response.daily[i].dt),\r\n                        'weather':response.daily[i].weather[0].description,\r\n                        'temp':this.calCelsius(response.daily[i].temp.day),\r\n                        'pressure':response.daily[i].pressure,\r\n                        'wind':this.calWindSpeed(response.daily[i].wind_speed),\r\n                    }],\r\n                })\r\n            }\r\n          })\r\n    }\r\n    getForecastHourly = (props)=>{\r\n        this.state.elements2.length=0\r\n        fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${this.props.lat}&lon=${this.props.lon}&appid=${API_key}`)\r\n          .then(response => {\r\n              if(response.ok){\r\n                  return response\r\n              }\r\n              throw Error(\"Błąd pobierania danych z API\")\r\n          })\r\n          .then(response => response.json())\r\n          .then(response => {\r\n              const localTime = new Date().toLocaleString()\r\n              console.log(response)\r\n              for (var i = 0; i < 48; i++) {\r\n                this.setState({\r\n                    elements2:[...this.state.elements2,{\r\n                        'id':response.hourly[i],\r\n                        'date':this.calDate(response.hourly[i].dt),\r\n                        'time':this.calTime(response.hourly[i].dt,response.timezone_offset),\r\n                        'weather':response.hourly[i].weather[0].description,\r\n                        'temp':this.calCelsius(response.hourly[i].temp),\r\n                        'pressure':response.hourly[i].pressure,\r\n                        'wind':this.calWindSpeed(response.hourly[i].wind_speed),\r\n                    }],\r\n                })\r\n            }\r\n          })\r\n    }\r\n  componentDidMount(){\r\n       this.getForecastDaily()\r\n       this.getForecastHourly()  \r\n    }\r\n    render(){\r\n        const elements = this.state.elements.map(e=>{\r\n            return <ForecastDailyItem element={e}/>\r\n        })\r\n        const elements2 = this.state.elements2.map(e=>{\r\n            return <ForecastHourlyItem element={e}/>\r\n        })\r\n        return(\r\n            <div >\r\n                {console.log(this.props.lat)}\r\n                { this.getForecastDaily.bind(this) }\r\n                <button onClick={ this.getForecastDaily.bind(this) }>Refresh Component</button>\r\n                <button onClick={ this.getForecastHourly.bind(this) }>Refresh Component</button>\r\n                <div className=\"card2\">\r\n                {elements}\r\n                </div>\r\n                <div className=\"card2\">\r\n                {elements2}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Forecast"]},"metadata":{},"sourceType":"module"}