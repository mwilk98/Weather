{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vened\\\\Desktop\\\\Pogoda\\\\my_weather\\\\client\\\\src\\\\components\\\\AirCondition\\\\AirCondition.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_key = \"157d33f8987d245bc6a1997408e90015\"; //const city = \"Kielce\"\n//const country = \"PL\"\n\nclass AirCondition extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      value: \"\",\n      city: \"\",\n      country: \"\",\n      weather: undefined,\n      temp: undefined,\n      tempMax: undefined,\n      tempMin: undefined,\n      pressurre: undefined,\n      wind: undefined,\n      error: false\n    };\n\n    this.getAir = e => {\n      console.log(this.state.value);\n      fetch(`http://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&APPID=${API_key}`).then(response => {\n        if (response.ok) {\n          return response;\n        }\n\n        throw Error(\"Błąd pobierania danych z API\");\n      }).then(response => response.json()).then(response => {\n        const localTime = new Date().toLocaleString();\n        console.log(response);\n        this.setState(state => ({\n          lat: response.coord.lat,\n          lon: response.coord.lon,\n          error: false\n        }));\n      }).catch(err => {\n        console.log(err);\n        this.setState(prevState => {\n          return {\n            error: true,\n            city: prevState.city\n          };\n        });\n      });\n    };\n\n    this.submitAir = e => {\n      this.setState({\n        value: e.target.value\n      });\n    };\n  }\n\n  calDate(time) {\n    var date = new Date(time * 1000); // Hours part from the timestamp\n\n    var year = date.getFullYear();\n    var month = date.getMonth() + 1;\n    var day = date.getDate();\n    var daytime = day + '-' + 0 + month + '-' + year;\n    return daytime;\n  }\n\n  calTime(time, timezone) {\n    var date = new Date(time * 1000 + timezone * 1000 - 7200000);\n    var hours = date.getHours(); // Minutes part from the timestamp\n\n    var minutes = date.getMinutes(); // Seconds part from the timestamp\n\n    var seconds = date.getSeconds();\n    var daytime = hours + ':' + minutes + ':' + seconds;\n    return daytime;\n  }\n\n  calCelsius(temp) {\n    let cell = Math.floor(temp - 273.15);\n    return cell;\n  }\n\n  calWindSpeed(wind) {\n    let cell = Math.floor(wind * 3.6);\n    return cell;\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Stan powietrza\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"user-form\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Lokalizacja\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"cityName\",\n          onChange: e => {\n            this.getAir(e.target.value);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.submitAir,\n          children: \"Dodaj\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default AirCondition;","map":{"version":3,"sources":["C:/Users/vened/Desktop/Pogoda/my_weather/client/src/components/AirCondition/AirCondition.js"],"names":["React","API_key","AirCondition","Component","state","value","city","country","weather","undefined","temp","tempMax","tempMin","pressurre","wind","error","getAir","e","console","log","fetch","then","response","ok","Error","json","localTime","Date","toLocaleString","setState","lat","coord","lon","catch","err","prevState","submitAir","target","calDate","time","date","year","getFullYear","month","getMonth","day","getDate","daytime","calTime","timezone","hours","getHours","minutes","getMinutes","seconds","getSeconds","calCelsius","cell","Math","floor","calWindSpeed","render"],"mappings":"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","sourcesContent":["import React from 'react'\r\n\r\nconst API_key=\"157d33f8987d245bc6a1997408e90015\"\r\n//const city = \"Kielce\"\r\n//const country = \"PL\"\r\n\r\nclass AirCondition extends React.Component{\r\n    state={\r\n        value:\"\",\r\n        city:\"\",\r\n        country:\"\",\r\n        weather:undefined,\r\n        temp:undefined,\r\n        tempMax:undefined,\r\n        tempMin:undefined,\r\n        pressurre:undefined,\r\n        wind:undefined,\r\n        error:false\r\n    }\r\n    calDate(time){\r\n        var date = new Date(time * 1000);\r\n        // Hours part from the timestamp\r\n        var year = date.getFullYear();\r\n        var month = date.getMonth()+1;\r\n        var day = date.getDate();\r\n        var daytime=day+'-'+0+month+'-'+year;\r\n        return daytime;\r\n      }\r\n      calTime(time,timezone){\r\n        var date = new Date(time*1000+timezone*1000-7200000);\r\n        var hours = date.getHours();\r\n        // Minutes part from the timestamp\r\n        var minutes = date.getMinutes();\r\n        // Seconds part from the timestamp\r\n        var seconds = date.getSeconds();\r\n\r\n        var daytime=hours+':'+minutes+':'+seconds;\r\n        return daytime;\r\n      }\r\n    calCelsius(temp){\r\n        let cell= Math.floor(temp-273.15)\r\n        return cell;\r\n    }\r\n    calWindSpeed(wind){\r\n        let cell= Math.floor(wind*3.6)\r\n        return cell;\r\n    }\r\n    getAir = (e) =>{\r\n         \r\n        console.log(this.state.value)\r\n          fetch(`http://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&APPID=${API_key}`)\r\n          .then(response => {\r\n              if(response.ok){\r\n                  return response\r\n              }\r\n              throw Error(\"Błąd pobierania danych z API\")\r\n          })\r\n          .then(response => response.json())\r\n          .then(response => {\r\n              const localTime = new Date().toLocaleString()\r\n              console.log(response)\r\n              this.setState(state =>({\r\n                lat:response.coord.lat,\r\n                lon:response.coord.lon, \r\n                error:false\r\n              }))\r\n          })\r\n          .catch(err =>{\r\n            console.log(err)\r\n            this.setState(prevState =>{\r\n                return{\r\n                error:true,\r\n                city:prevState.city\r\n            }})\r\n        })\r\n    }\r\n    submitAir=(e)=>{\r\n        this.setState({\r\n            value:e.target.value\r\n        })\r\n    }\r\n    render(){\r\n        \r\n        return(\r\n            <div >\r\n                <h1>Stan powietrza</h1>   \r\n                <div className='user-form'>\r\n                    <label>Lokalizacja</label>\r\n                    <input type=\"text\" name=\"cityName\" onChange={(e)=>{\r\n                        this.getAir(e.target.value)\r\n                    }}/>\r\n                    <button onClick={this.submitAir}>Dodaj</button>\r\n                </div>\r\n            </div>\r\n            \r\n        )\r\n    }\r\n}\r\nexport default AirCondition"]},"metadata":{},"sourceType":"module"}