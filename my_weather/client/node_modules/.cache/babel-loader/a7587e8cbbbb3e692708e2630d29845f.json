{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vened\\\\Desktop\\\\Pogoda\\\\my_weather\\\\src\\\\components\\\\currentWeather\\\\CurrentWeather.js\";\nimport React from 'react';\nimport WeatherItem from './WeatherItem';\nimport Forecast from '../forecast/Forecast';\nimport Form from '../Form/Form';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_key = \"157d33f8987d245bc6a1997408e90015\"; //const city = \"Kielce\"\n//const country = \"PL\"\n\nclass CurrentWeather extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      city: \"\",\n      error: false\n    };\n\n    this.getWeather = e => {\n      e.preventDefault();\n      fetch(`http://api.openweathermap.org/data/2.5/weather?q=${this.state.city}&APPID=${API_key}`).then(response => {\n        if (response.ok) {\n          return response;\n        }\n\n        throw Error(\"Błąd pobierania danych z API\");\n      }).then(response => response.json()).then(response => {\n        const localTime = new Date().toLocaleString();\n        this.setState(state => ({\n          city: state.city,\n          country: response.sys.country,\n          date: this.calDate(response.dt),\n          time: this.calTime(response.dt),\n          weather: response.weather[0].description,\n          temp: this.calCelsius(response.main.temp),\n          tempMax: this.calCelsius(response.main.temp_max),\n          tempMin: this.calCelsius(response.main.temp_min),\n          pressure: response.main.pressure,\n          wind: this.calWindSpeed(response.wind.speed),\n          lat: response.coord.lat,\n          lon: response.coord.lon,\n          error: false\n        }));\n      }).catch(err => {\n        console.log(err);\n        this.setState(state => {\n          return {\n            error: true,\n            city: this.state.city\n          };\n        });\n      });\n    };\n\n    this.inputCityHandler = e => {\n      this.setState({\n        city: e.target.value\n      });\n    };\n\n    this.inputCountryHandler = e => {\n      this.setState({\n        country: e.target.value\n      });\n    };\n\n    this.inputHandler = e => {\n      this.setState({\n        city: e.target.value\n      });\n    };\n\n    this.submitHandler = e => {\n      e.preventDefault();\n      console.log(\"chyba bangla\");\n    };\n  }\n\n  calDate(time) {\n    var date = new Date(time * 1000); // Hours part from the timestamp\n\n    var year = date.getFullYear();\n    var month = date.getMonth() + 1;\n    var day = date.getDate();\n    var daytime = day + '-' + 0 + month + '-' + year;\n    return daytime;\n  }\n\n  calTime(time) {\n    var date = new Date(time * 1000);\n    var hours = date.getHours(); // Minutes part from the timestamp\n\n    var minutes = date.getMinutes(); // Seconds part from the timestamp\n\n    var seconds = date.getSeconds();\n    var daytime = hours + ':' + minutes + ':' + seconds;\n    console.log(time);\n    return daytime;\n  }\n\n  calCelsius(temp) {\n    let cell = Math.floor(temp - 273.15);\n    return cell;\n  }\n\n  calWindSpeed(wind) {\n    let cell = Math.floor(wind * 3.6);\n    return cell;\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Pogoda\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Form, {\n          city: this.state.city,\n          handler: this.inputHandler,\n          submit: this.submitHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: this.state.cityName,\n        onChange: this.inputCityHandler.bind(this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: this.state.CountryName,\n        onChange: this.inputCountryHandler.bind(this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.getWeather.bind(this),\n          children: \"Pobierz aktualn\\u0105 pogode\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [this.state.city, \",\", this.state.country, /*#__PURE__*/_jsxDEV(\"td\", {\n          children: this.state.date\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 21\n        }, this), this.state.time, /*#__PURE__*/_jsxDEV(\"td\", {\n          children: this.state.weather\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 21\n        }, this), \"Aktualna temperatura: \", this.state.temp, \"\\xB0\", /*#__PURE__*/_jsxDEV(\"td\", {\n          children: [\"Temperatura maksymalna:\", this.state.tempMax, \"\\xB0\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 21\n        }, this), \"Temperatura minimalna:\", this.state.tempMin, \"\\xB0\", /*#__PURE__*/_jsxDEV(\"td\", {\n          children: [\"Ci\\u015Bnienie:\", this.state.pressure, \" hPa\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 21\n        }, this), \"Wiatr:\", this.state.wind, \"km/h\", /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(Forecast, {\n            lat: this.state.lat,\n            lon: this.state.lon\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default CurrentWeather;","map":{"version":3,"sources":["C:/Users/vened/Desktop/Pogoda/my_weather/src/components/currentWeather/CurrentWeather.js"],"names":["React","WeatherItem","Forecast","Form","API_key","CurrentWeather","Component","state","city","error","getWeather","e","preventDefault","fetch","then","response","ok","Error","json","localTime","Date","toLocaleString","setState","country","sys","date","calDate","dt","time","calTime","weather","description","temp","calCelsius","main","tempMax","temp_max","tempMin","temp_min","pressure","wind","calWindSpeed","speed","lat","coord","lon","catch","err","console","log","inputCityHandler","target","value","inputCountryHandler","inputHandler","submitHandler","year","getFullYear","month","getMonth","day","getDate","daytime","hours","getHours","minutes","getMinutes","seconds","getSeconds","cell","Math","floor","render","cityName","bind","CountryName"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,QAAP,MAAqB,sBAArB;AACA,OAAOC,IAAP,MAAiB,cAAjB;;AAEA,MAAMC,OAAO,GAAC,kCAAd,C,CACA;AACA;;AAEA,MAAMC,cAAN,SAA6BL,KAAK,CAACM,SAAnC,CAA4C;AAAA;AAAA;AAAA,SACxCC,KADwC,GAClC;AACFC,MAAAA,IAAI,EAAC,EADH;AAEFC,MAAAA,KAAK,EAAC;AAFJ,KADkC;;AAAA,SAkCxCC,UAlCwC,GAkC1BC,CAAD,IAAM;AAEfA,MAAAA,CAAC,CAACC,cAAF;AAEEC,MAAAA,KAAK,CAAE,oDAAmD,KAAKN,KAAL,CAAWC,IAAK,UAASJ,OAAQ,EAAtF,CAAL,CACCU,IADD,CACMC,QAAQ,IAAI;AACd,YAAGA,QAAQ,CAACC,EAAZ,EAAe;AACX,iBAAOD,QAAP;AACH;;AACD,cAAME,KAAK,CAAC,8BAAD,CAAX;AACH,OAND,EAOCH,IAPD,CAOMC,QAAQ,IAAIA,QAAQ,CAACG,IAAT,EAPlB,EAQCJ,IARD,CAQMC,QAAQ,IAAI;AACd,cAAMI,SAAS,GAAG,IAAIC,IAAJ,GAAWC,cAAX,EAAlB;AACA,aAAKC,QAAL,CAAcf,KAAK,KAAI;AACrBC,UAAAA,IAAI,EAACD,KAAK,CAACC,IADU;AAErBe,UAAAA,OAAO,EAACR,QAAQ,CAACS,GAAT,CAAaD,OAFA;AAGrBE,UAAAA,IAAI,EAAC,KAAKC,OAAL,CAAaX,QAAQ,CAACY,EAAtB,CAHgB;AAIrBC,UAAAA,IAAI,EAAC,KAAKC,OAAL,CAAad,QAAQ,CAACY,EAAtB,CAJgB;AAKrBG,UAAAA,OAAO,EAACf,QAAQ,CAACe,OAAT,CAAiB,CAAjB,EAAoBC,WALP;AAMrBC,UAAAA,IAAI,EAAC,KAAKC,UAAL,CAAgBlB,QAAQ,CAACmB,IAAT,CAAcF,IAA9B,CANgB;AAOrBG,UAAAA,OAAO,EAAC,KAAKF,UAAL,CAAgBlB,QAAQ,CAACmB,IAAT,CAAcE,QAA9B,CAPa;AAQrBC,UAAAA,OAAO,EAAC,KAAKJ,UAAL,CAAgBlB,QAAQ,CAACmB,IAAT,CAAcI,QAA9B,CARa;AASrBC,UAAAA,QAAQ,EAACxB,QAAQ,CAACmB,IAAT,CAAcK,QATF;AAUrBC,UAAAA,IAAI,EAAC,KAAKC,YAAL,CAAkB1B,QAAQ,CAACyB,IAAT,CAAcE,KAAhC,CAVgB;AAWrBC,UAAAA,GAAG,EAAC5B,QAAQ,CAAC6B,KAAT,CAAeD,GAXE;AAYrBE,UAAAA,GAAG,EAAC9B,QAAQ,CAAC6B,KAAT,CAAeC,GAZE;AAarBpC,UAAAA,KAAK,EAAC;AAbe,SAAJ,CAAnB;AAeH,OAzBD,EA0BCqC,KA1BD,CA0BOC,GAAG,IAAG;AACTC,QAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACA,aAAKzB,QAAL,CAAcf,KAAK,IAAG;AAClB,iBAAM;AACNE,YAAAA,KAAK,EAAC,IADA;AAEND,YAAAA,IAAI,EAAC,KAAKD,KAAL,CAAWC;AAFV,WAAN;AAGF,SAJF;AAKH,OAjCD;AAkCL,KAxEuC;;AAAA,SAyExC0C,gBAzEwC,GAyEtBvC,CAAD,IAAK;AAClB,WAAKW,QAAL,CAAc;AACVd,QAAAA,IAAI,EAACG,CAAC,CAACwC,MAAF,CAASC;AADJ,OAAd;AAGH,KA7EuC;;AAAA,SA8ExCC,mBA9EwC,GA8EnB1C,CAAD,IAAK;AACrB,WAAKW,QAAL,CAAc;AACVC,QAAAA,OAAO,EAACZ,CAAC,CAACwC,MAAF,CAASC;AADP,OAAd;AAGH,KAlFuC;;AAAA,SAmFxCE,YAnFwC,GAmF1B3C,CAAD,IAAK;AACd,WAAKW,QAAL,CAAc;AACVd,QAAAA,IAAI,EAACG,CAAC,CAACwC,MAAF,CAASC;AADJ,OAAd;AAGH,KAvFuC;;AAAA,SAwFxCG,aAxFwC,GAwFvB5C,CAAD,IAAO;AACnBA,MAAAA,CAAC,CAACC,cAAF;AACAoC,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACH,KA3FuC;AAAA;;AAKxCvB,EAAAA,OAAO,CAACE,IAAD,EAAM;AACT,QAAIH,IAAI,GAAG,IAAIL,IAAJ,CAASQ,IAAI,GAAG,IAAhB,CAAX,CADS,CAET;;AACA,QAAI4B,IAAI,GAAG/B,IAAI,CAACgC,WAAL,EAAX;AACA,QAAIC,KAAK,GAAGjC,IAAI,CAACkC,QAAL,KAAgB,CAA5B;AACA,QAAIC,GAAG,GAAGnC,IAAI,CAACoC,OAAL,EAAV;AACA,QAAIC,OAAO,GAACF,GAAG,GAAC,GAAJ,GAAQ,CAAR,GAAUF,KAAV,GAAgB,GAAhB,GAAoBF,IAAhC;AACA,WAAOM,OAAP;AACD;;AACDjC,EAAAA,OAAO,CAACD,IAAD,EAAM;AACX,QAAIH,IAAI,GAAG,IAAIL,IAAJ,CAASQ,IAAI,GAAC,IAAd,CAAX;AACA,QAAImC,KAAK,GAAGtC,IAAI,CAACuC,QAAL,EAAZ,CAFW,CAGX;;AACA,QAAIC,OAAO,GAAGxC,IAAI,CAACyC,UAAL,EAAd,CAJW,CAKX;;AACA,QAAIC,OAAO,GAAG1C,IAAI,CAAC2C,UAAL,EAAd;AAEA,QAAIN,OAAO,GAACC,KAAK,GAAC,GAAN,GAAUE,OAAV,GAAkB,GAAlB,GAAsBE,OAAlC;AACAnB,IAAAA,OAAO,CAACC,GAAR,CAAYrB,IAAZ;AACA,WAAOkC,OAAP;AACD;;AACH7B,EAAAA,UAAU,CAACD,IAAD,EAAM;AACZ,QAAIqC,IAAI,GAAEC,IAAI,CAACC,KAAL,CAAWvC,IAAI,GAAC,MAAhB,CAAV;AACA,WAAOqC,IAAP;AACH;;AACD5B,EAAAA,YAAY,CAACD,IAAD,EAAM;AACd,QAAI6B,IAAI,GAAEC,IAAI,CAACC,KAAL,CAAW/B,IAAI,GAAC,GAAhB,CAAV;AACA,WAAO6B,IAAP;AACH;;AA2DDG,EAAAA,MAAM,GAAE;AAEJ,wBACI;AAAA,8BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAA,+BACA,QAAC,IAAD;AACA,UAAA,IAAI,EAAE,KAAKjE,KAAL,CAAWC,IADjB;AAEA,UAAA,OAAO,EAAE,KAAK8C,YAFd;AAGA,UAAA,MAAM,EAAE,KAAKC;AAHb;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,cAFJ,eASI;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,KAAK,EAAE,KAAKhD,KAAL,CAAWkE,QAArC;AAA+C,QAAA,QAAQ,EAAE,KAAKvB,gBAAL,CAAsBwB,IAAtB,CAA2B,IAA3B;AAAzD;AAAA;AAAA;AAAA;AAAA,cATJ,eAUI;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,KAAK,EAAE,KAAKnE,KAAL,CAAWoE,WAArC;AAAkD,QAAA,QAAQ,EAAE,KAAKtB,mBAAL,CAAyBqB,IAAzB,CAA8B,IAA9B;AAA5D;AAAA;AAAA;AAAA;AAAA,cAVJ,eAWI;AAAA,+BAAI;AAAQ,UAAA,OAAO,EAAE,KAAKhE,UAAL,CAAgBgE,IAAhB,CAAqB,IAArB,CAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAJ;AAAA;AAAA;AAAA;AAAA,cAXJ,eAYI;AAAA,mBACK,KAAKnE,KAAL,CAAWC,IADhB,OACuB,KAAKD,KAAL,CAAWgB,OADlC,eAEI;AAAA,oBAAK,KAAKhB,KAAL,CAAWkB;AAAhB;AAAA;AAAA;AAAA;AAAA,gBAFJ,EAGK,KAAKlB,KAAL,CAAWqB,IAHhB,eAII;AAAA,oBAAK,KAAKrB,KAAL,CAAWuB;AAAhB;AAAA;AAAA;AAAA;AAAA,gBAJJ,4BAK2B,KAAKvB,KAAL,CAAWyB,IALtC,uBAMI;AAAA,gDAA4B,KAAKzB,KAAL,CAAW4B,OAAvC;AAAA;AAAA;AAAA;AAAA;AAAA,gBANJ,4BAO2B,KAAK5B,KAAL,CAAW8B,OAPtC,uBAQI;AAAA,wCAAe,KAAK9B,KAAL,CAAWgC,QAA1B;AAAA;AAAA;AAAA;AAAA;AAAA,gBARJ,YASW,KAAKhC,KAAL,CAAWiC,IATtB,uBAUA;AAAA,iCACA,QAAC,QAAD;AAAU,YAAA,GAAG,EAAE,KAAKjC,KAAL,CAAWoC,GAA1B;AAA+B,YAAA,GAAG,EAAE,KAAKpC,KAAL,CAAWsC;AAA/C;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,gBAVA;AAAA;AAAA;AAAA;AAAA;AAAA,cAZJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AA8BH;;AA5HuC;;AA+H5C,eAAexC,cAAf","sourcesContent":["import React from 'react'\r\nimport WeatherItem from './WeatherItem';\r\nimport Forecast from '../forecast/Forecast'\r\nimport Form from '../Form/Form'\r\n\r\nconst API_key=\"157d33f8987d245bc6a1997408e90015\"\r\n//const city = \"Kielce\"\r\n//const country = \"PL\"\r\n\r\nclass CurrentWeather extends React.Component{\r\n    state={\r\n        city:\"\",\r\n        error:false\r\n    }\r\n    calDate(time){\r\n        var date = new Date(time * 1000);\r\n        // Hours part from the timestamp\r\n        var year = date.getFullYear();\r\n        var month = date.getMonth()+1;\r\n        var day = date.getDate();\r\n        var daytime=day+'-'+0+month+'-'+year;\r\n        return daytime;\r\n      }\r\n      calTime(time){\r\n        var date = new Date(time*1000);\r\n        var hours = date.getHours();\r\n        // Minutes part from the timestamp\r\n        var minutes = date.getMinutes();\r\n        // Seconds part from the timestamp\r\n        var seconds = date.getSeconds();\r\n    \r\n        var daytime=hours+':'+minutes+':'+seconds;\r\n        console.log(time)\r\n        return daytime;\r\n      }\r\n    calCelsius(temp){\r\n        let cell= Math.floor(temp-273.15)\r\n        return cell;\r\n    }\r\n    calWindSpeed(wind){\r\n        let cell= Math.floor(wind*3.6)\r\n        return cell;\r\n    }\r\n    getWeather = (e) =>{\r\n        \r\n        e.preventDefault()\r\n          \r\n          fetch(`http://api.openweathermap.org/data/2.5/weather?q=${this.state.city}&APPID=${API_key}`)\r\n          .then(response => {\r\n              if(response.ok){\r\n                  return response\r\n              }\r\n              throw Error(\"Błąd pobierania danych z API\")\r\n          })\r\n          .then(response => response.json())\r\n          .then(response => {\r\n              const localTime = new Date().toLocaleString()\r\n              this.setState(state =>({\r\n                city:state.city,\r\n                country:response.sys.country,\r\n                date:this.calDate(response.dt),\r\n                time:this.calTime(response.dt),\r\n                weather:response.weather[0].description,\r\n                temp:this.calCelsius(response.main.temp),\r\n                tempMax:this.calCelsius(response.main.temp_max),\r\n                tempMin:this.calCelsius(response.main.temp_min),\r\n                pressure:response.main.pressure,\r\n                wind:this.calWindSpeed(response.wind.speed),\r\n                lat:response.coord.lat,\r\n                lon:response.coord.lon, \r\n                error:false\r\n              }))\r\n          })\r\n          .catch(err =>{\r\n              console.log(err)\r\n              this.setState(state =>{\r\n                  return{\r\n                  error:true,\r\n                  city:this.state.city\r\n              }})\r\n          })\r\n    }\r\n    inputCityHandler=(e)=>{\r\n        this.setState({\r\n            city:e.target.value\r\n        })\r\n    }\r\n    inputCountryHandler=(e)=>{\r\n        this.setState({\r\n            country:e.target.value\r\n        })\r\n    }\r\n    inputHandler=(e)=>{\r\n        this.setState({\r\n            city:e.target.value\r\n        })\r\n    }\r\n    submitHandler = (e) => {\r\n        e.preventDefault()\r\n        console.log(\"chyba bangla\")\r\n    }\r\n    render(){\r\n        \r\n        return(\r\n            <div>\r\n                <h1>Pogoda</h1>\r\n                <div>\r\n                <Form \r\n                city={this.state.city}  \r\n                handler={this.inputHandler}\r\n                submit={this.submitHandler}\r\n                /> \r\n                </div> \r\n                <input type=\"text\" value={this.state.cityName} onChange={this.inputCityHandler.bind(this)}></input>\r\n                <input type=\"text\" value={this.state.CountryName} onChange={this.inputCountryHandler.bind(this)}></input>\r\n                <td><button onClick={this.getWeather.bind(this)}>Pobierz aktualną pogode</button></td>\r\n                <div >\r\n                    {this.state.city},{this.state.country}\r\n                    <td>{this.state.date}</td>\r\n                    {this.state.time}\r\n                    <td>{this.state.weather}</td>\r\n                    Aktualna temperatura: {this.state.temp}&deg;\r\n                    <td>Temperatura maksymalna:{this.state.tempMax}&deg;</td>  \r\n                    Temperatura minimalna:{this.state.tempMin}&deg;\r\n                    <td>Ciśnienie:{this.state.pressure} hPa</td>  \r\n                    Wiatr:{this.state.wind}km/h\r\n                <div>\r\n                <Forecast lat={this.state.lat} lon={this.state.lon}/> \r\n                </div>   \r\n                </div>\r\n            </div>\r\n            \r\n        )\r\n    }\r\n}\r\n\r\nexport default CurrentWeather"]},"metadata":{},"sourceType":"module"}