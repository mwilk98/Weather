{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vened\\\\Desktop\\\\Pogoda\\\\my_weather\\\\client\\\\src\\\\components\\\\currentWeather\\\\CurrentWeather.js\";\nimport React from 'react';\nimport WeatherItem from './WeatherItem';\nimport Forecast from '../forecast/Forecast';\nimport Form from '../Form/Form';\nimport CalDate from '../Functions/CalDate';\nimport CalTime from '../Functions/CalTime';\nimport CalCelsius from '../Functions/CalCelsius';\nimport CalWindSpeed from '../Functions/CalWindSpeed';\nimport logo from \"../../img/wi-cloud.svg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_key = \"157d33f8987d245bc6a1997408e90015\";\n\nclass CurrentWeather extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      value: \"\",\n      city: \"\",\n      country: \"\",\n      image: undefined,\n      weather: undefined,\n      temp: undefined,\n      tempMax: undefined,\n      tempMin: undefined,\n      pressurre: undefined,\n      wind: undefined,\n      error: false\n    };\n\n    this.getWeather = e => {\n      e.preventDefault();\n      fetch(`http://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&lang=pl&APPID=${API_key}`).then(response => {\n        if (response.ok) {\n          return response;\n        }\n\n        throw Error(\"BÅ‚Ä…d pobierania danych z API\");\n      }).then(response => response.json()).then(response => {\n        const localTime = new Date().toLocaleString();\n        console.log(response);\n        this.setState(state => ({\n          city: state.value,\n          country: response.sys.country,\n          image: logo,\n          date: CalDate(response.dt),\n          time: CalTime(response.dt, response.timezone),\n          weather: response.weather[0].description,\n          temp: CalCelsius(response.main.temp),\n          tempMax: CalCelsius(response.main.temp_max),\n          tempMin: CalCelsius(response.main.temp_min),\n          pressure: response.main.pressure,\n          wind: CalWindSpeed(response.wind.speed),\n          lat: response.coord.lat,\n          lon: response.coord.lon,\n          error: false\n        }));\n\n        if (response.weather[0].id >= 200 && response.weather[0].id <= 232) {\n          this.setState({\n            image: weatherIcons[thunderstorm]\n          });\n        }\n      }).catch(err => {\n        console.log(err);\n        this.setState(prevState => {\n          return {\n            error: true,\n            city: prevState.city\n          };\n        });\n      });\n    };\n\n    this.inputHandler = e => {\n      this.setState({\n        value: e.target.value\n      });\n    };\n\n    this.submitHandler = e => {\n      this.getWeather(e);\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Pogoda\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Form, {\n          value: this.state.value,\n          handler: this.inputHandler,\n          submit: this.submitHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: this.state.city ? /*#__PURE__*/_jsxDEV(WeatherItem, {\n          weather: this.state\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 21\n        }, this) : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: this.state.city ? /*#__PURE__*/_jsxDEV(Forecast, {\n          lat: this.state.lat,\n          lon: this.state.lon\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 21\n        }, this) : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst weatherIcons = {\n  thunderstorm: '../../img/wi-storm-showers',\n  clear: '../../img/wi-solar-eclipse.svg',\n  clouds: '../../img/wi-cloud.svg'\n};\nexport default CurrentWeather;","map":{"version":3,"sources":["C:/Users/vened/Desktop/Pogoda/my_weather/client/src/components/currentWeather/CurrentWeather.js"],"names":["React","WeatherItem","Forecast","Form","CalDate","CalTime","CalCelsius","CalWindSpeed","API_key","CurrentWeather","Component","state","value","city","country","image","undefined","weather","temp","tempMax","tempMin","pressurre","wind","error","getWeather","e","preventDefault","fetch","then","response","ok","Error","json","localTime","Date","toLocaleString","console","log","setState","sys","logo","date","dt","time","timezone","description","main","temp_max","temp_min","pressure","speed","lat","coord","lon","id","weatherIcons","thunderstorm","catch","err","prevState","inputHandler","target","submitHandler","render","clear","clouds"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport WeatherItem from './WeatherItem';\r\nimport Forecast from '../forecast/Forecast'\r\nimport Form from '../Form/Form'\r\nimport CalDate from '../Functions/CalDate';\r\nimport CalTime from '../Functions/CalTime';\r\nimport CalCelsius from '../Functions/CalCelsius';\r\nimport CalWindSpeed from '../Functions/CalWindSpeed';\r\nimport logo from '../../img/wi-cloud.svg'\r\n\r\nconst API_key=\"157d33f8987d245bc6a1997408e90015\"\r\n\r\nclass CurrentWeather extends React.Component{\r\n    \r\n    state={\r\n        value:\"\",\r\n        city:\"\",\r\n        country:\"\",\r\n        image:undefined,\r\n        weather:undefined,\r\n        temp:undefined,\r\n        tempMax:undefined,\r\n        tempMin:undefined,\r\n        pressurre:undefined,\r\n        wind:undefined,\r\n        error:false\r\n    }\r\n    \r\n    getWeather = (e) =>{\r\n        \r\n        e.preventDefault()\r\n          \r\n          fetch(`http://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&lang=pl&APPID=${API_key}`)\r\n          .then(response => {\r\n              if(response.ok){\r\n                  return response\r\n              }\r\n              throw Error(\"BÅ‚Ä…d pobierania danych z API\")\r\n          })\r\n          .then(response => response.json())\r\n          .then(response => {\r\n              const localTime = new Date().toLocaleString()\r\n              console.log(response)\r\n              this.setState(state =>({\r\n                city:state.value,\r\n                country:response.sys.country,\r\n                image:logo,\r\n                date:CalDate(response.dt),\r\n                time:CalTime(response.dt,response.timezone),\r\n                weather:response.weather[0].description,\r\n                temp:CalCelsius(response.main.temp),\r\n                tempMax:CalCelsius(response.main.temp_max),\r\n                tempMin:CalCelsius(response.main.temp_min),\r\n                pressure:response.main.pressure,\r\n                wind:CalWindSpeed(response.wind.speed),\r\n                lat:response.coord.lat,\r\n                lon:response.coord.lon, \r\n                error:false\r\n              }))\r\n              if(response.weather[0].id >=200 && response.weather[0].id <=232){\r\n                  this.setState({\r\n                      image:weatherIcons[thunderstorm]\r\n                  })\r\n              }\r\n          })\r\n          .catch(err =>{\r\n            console.log(err)\r\n            this.setState(prevState =>{\r\n                return{\r\n                error:true,\r\n                city:prevState.city\r\n            }})\r\n        })\r\n    }\r\n    inputHandler=(e)=>{\r\n        this.setState({\r\n            value:e.target.value\r\n        })\r\n    }\r\n    submitHandler=(e)=>{\r\n        this.getWeather(e)\r\n    }\r\n    render(){\r\n        return(\r\n            <div >\r\n                <h1>Pogoda</h1>\r\n                <div>\r\n                <Form \r\n                value={this.state.value}  \r\n                handler={this.inputHandler}\r\n                submit={this.submitHandler}\r\n                /> \r\n                </div> \r\n                <div>\r\n                {this.state.city ?(\r\n                    <WeatherItem weather={this.state}/>   \r\n                ):null}\r\n                </div>\r\n                <div>\r\n                {this.state.city ?(\r\n                    <Forecast lat={this.state.lat} lon={this.state.lon}/>   \r\n                ):null}\r\n                 \r\n                </div>   \r\n            </div>\r\n            \r\n        )\r\n    }\r\n}\r\nconst weatherIcons = {\r\n        thunderstorm:'../../img/wi-storm-showers',\r\n        clear:'../../img/wi-solar-eclipse.svg',\r\n        clouds: '../../img/wi-cloud.svg',\r\n}\r\nexport default CurrentWeather"]},"metadata":{},"sourceType":"module"}