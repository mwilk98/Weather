{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vened\\\\Desktop\\\\Pogoda\\\\my_weather\\\\src\\\\components\\\\forecast\\\\Forecast.js\";\nimport React from 'react';\nimport ForecastDailyItem from './ForecastDailyItem';\nimport ForecastHourlyItem from './ForecastHourlyItem';\nimport CurrentWeather from '../currentWeather/CurrentWeather';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_key = \"157d33f8987d245bc6a1997408e90015\";\n\nclass Forecast extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      elements: [],\n      elements2: []\n    };\n\n    this.getForecastDaily = async props => {\n      this.state.elements.length = 0;\n      const api_call = await fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${this.props.lat}&lon=${this.props.lon}&appid=${API_key}`);\n      const response = await api_call.json();\n      console.log(response);\n\n      for (var i = 1; i < 8; i++) {\n        this.setState({\n          elements: [...this.state.elements, {\n            'id': response.daily[i],\n            'date': this.calDate(response.daily[i].dt),\n            'weather': response.daily[i].weather[0].description,\n            'temp': this.calCelsius(response.daily[i].temp.day),\n            'pressure': response.daily[i].pressure,\n            'wind': this.calWindSpeed(response.daily[i].wind_speed)\n          }]\n        });\n      }\n    };\n\n    this.getForecastHourly = async props => {\n      this.state.elements2.length = 0;\n      const api_call = await fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${this.props.lat}&lon=${this.props.lon}&appid=${API_key}`);\n      const response = await api_call.json();\n\n      for (var i = 0; i < 48; i++) {\n        this.setState({\n          elements2: [...this.state.elements2, {\n            'id': response.hourly[i],\n            'date': this.calDate(response.hourly[i].dt),\n            'time': this.calTime(response.hourly[i].dt, response.timezone_offset),\n            'weather': response.hourly[i].weather[0].description,\n            'temp': this.calCelsius(response.hourly[i].temp),\n            'pressure': response.hourly[i].pressure,\n            'wind': this.calWindSpeed(response.hourly[i].wind_speed)\n          }]\n        });\n      }\n    };\n  }\n\n  calDate(time) {\n    var date = new Date(time * 1000); // Hours part from the timestamp\n\n    var year = date.getFullYear();\n    var month = date.getMonth() + 1;\n    var day = date.getDate();\n    var daytime = day + '-' + 0 + month + '-' + year;\n    return daytime;\n  }\n\n  calTime(time, timezone) {\n    var date = new Date(time * 1000 + timezone * 1000);\n    var hours = date.getHours(); // Minutes part from the timestamp\n\n    var minutes = date.getMinutes(); // Seconds part from the timestamp\n\n    var seconds = date.getSeconds();\n    var daytime = hours + ':' + minutes + ':' + seconds;\n    return daytime;\n  }\n\n  calCelsius(temp) {\n    let cell = Math.floor(temp - 273.15);\n    return cell;\n  }\n\n  calWindSpeed(wind) {\n    let cell = Math.floor(wind * 3.6);\n    return cell;\n  }\n\n  componentDidMount() {\n    this.getForecastDaily();\n  }\n\n  render() {\n    const elements = this.state.elements.map(e => {\n      return /*#__PURE__*/_jsxDEV(ForecastDailyItem, {\n        element: e\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 20\n      }, this);\n    });\n    const elements2 = this.state.elements2.map(e => {\n      return /*#__PURE__*/_jsxDEV(ForecastHourlyItem, {\n        element: e\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 20\n      }, this);\n    });\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card2\",\n        children: [/*#__PURE__*/_jsxDEV(\"td\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: this.getForecastDaily.bind(this),\n            children: \"Dzienna\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 17\n        }, this), elements]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card2\",\n        children: [/*#__PURE__*/_jsxDEV(\"td\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: this.getForecastHourly.bind(this),\n            children: \"Godzinowa\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 17\n        }, this), elements2]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Forecast;","map":{"version":3,"sources":["C:/Users/vened/Desktop/Pogoda/my_weather/src/components/forecast/Forecast.js"],"names":["React","ForecastDailyItem","ForecastHourlyItem","CurrentWeather","API_key","Forecast","Component","state","elements","elements2","getForecastDaily","props","length","api_call","fetch","lat","lon","response","json","console","log","i","setState","daily","calDate","dt","weather","description","calCelsius","temp","day","pressure","calWindSpeed","wind_speed","getForecastHourly","hourly","calTime","timezone_offset","time","date","Date","year","getFullYear","month","getMonth","getDate","daytime","timezone","hours","getHours","minutes","getMinutes","seconds","getSeconds","cell","Math","floor","wind","componentDidMount","render","map","e","bind"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport ForecastDailyItem from './ForecastDailyItem';\r\nimport ForecastHourlyItem from './ForecastHourlyItem';\r\nimport CurrentWeather from '../currentWeather/CurrentWeather'\r\n\r\nconst API_key=\"157d33f8987d245bc6a1997408e90015\"\r\n\r\nclass Forecast extends React.Component{\r\n    state={\r\n        elements:[\r\n        ],\r\n        elements2:[\r\n        ]\r\n    }\r\n    calDate(time){\r\n        var date = new Date(time * 1000);\r\n        // Hours part from the timestamp\r\n        var year = date.getFullYear();\r\n        var month = date.getMonth()+1;\r\n        var day = date.getDate();\r\n        var daytime=day+'-'+0+month+'-'+year;\r\n        return daytime;\r\n      }\r\n      calTime(time,timezone){\r\n        var date = new Date(time*1000+timezone*1000);\r\n        var hours = date.getHours();\r\n        // Minutes part from the timestamp\r\n        var minutes = date.getMinutes();\r\n        // Seconds part from the timestamp\r\n        var seconds = date.getSeconds();\r\n    \r\n        var daytime=hours+':'+minutes+':'+seconds;\r\n        return daytime;\r\n      }\r\n    calCelsius(temp){\r\n        let cell= Math.floor(temp-273.15)\r\n        return cell;\r\n    }\r\n    calWindSpeed(wind){\r\n        let cell= Math.floor(wind*3.6)\r\n        return cell;\r\n    }\r\n    getForecastDaily = async(props)=>{\r\n        this.state.elements.length=0\r\n          const api_call = await fetch(\r\n            `https://api.openweathermap.org/data/2.5/onecall?lat=${this.props.lat}&lon=${this.props.lon}&appid=${API_key}`\r\n            );\r\n      \r\n          const response = await api_call.json();\r\n      \r\n          console.log(response)\r\n          for (var i = 1; i < 8; i++) {\r\n            this.setState({\r\n                elements:[...this.state.elements,{\r\n                    'id':response.daily[i],\r\n                    'date':this.calDate(response.daily[i].dt),\r\n                    'weather':response.daily[i].weather[0].description,\r\n                    'temp':this.calCelsius(response.daily[i].temp.day),\r\n                    'pressure':response.daily[i].pressure,\r\n                    'wind':this.calWindSpeed(response.daily[i].wind_speed),\r\n                }],\r\n            })\r\n        }\r\n    }\r\n    getForecastHourly = async(props)=>{\r\n        this.state.elements2.length=0\r\n\r\n        const api_call = await fetch(\r\n          `https://api.openweathermap.org/data/2.5/onecall?lat=${this.props.lat}&lon=${this.props.lon}&appid=${API_key}`\r\n          );\r\n    \r\n        const response = await api_call.json();\r\n    \r\n      for (var i = 0; i < 48; i++) {\r\n          this.setState({\r\n              elements2:[...this.state.elements2,{\r\n                  'id':response.hourly[i],\r\n                  'date':this.calDate(response.hourly[i].dt),\r\n                  'time':this.calTime(response.hourly[i].dt,response.timezone_offset),\r\n                  'weather':response.hourly[i].weather[0].description,\r\n                  'temp':this.calCelsius(response.hourly[i].temp),\r\n                  'pressure':response.hourly[i].pressure,\r\n                  'wind':this.calWindSpeed(response.hourly[i].wind_speed),\r\n              }],\r\n          })\r\n      }   \r\n  }\r\n  componentDidMount(){ this.getForecastDaily() }\r\n\r\n    render(){\r\n        const elements = this.state.elements.map(e=>{\r\n            return <ForecastDailyItem element={e}/>\r\n        })\r\n        const elements2 = this.state.elements2.map(e=>{\r\n            return <ForecastHourlyItem element={e}/>\r\n        })\r\n        return(\r\n            <div >\r\n                <div className=\"card2\">\r\n                <td><button onClick={this.getForecastDaily.bind(this)}>Dzienna</button></td>\r\n                {elements}\r\n                </div>\r\n                <div className=\"card2\">\r\n                <td><button onClick={this.getForecastHourly.bind(this)}>Godzinowa</button></td>\r\n                {elements2}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Forecast"]},"metadata":{},"sourceType":"module"}