{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vened\\\\Desktop\\\\Pogoda\\\\my_weather\\\\client\\\\src\\\\components\\\\currentWeather\\\\CurrentWeather.js\";\nimport React from 'react';\nimport WeatherItem from './WeatherItem';\nimport Form from '../Form/Form';\nimport CalDate from '../Functions/CalDate';\nimport CalTime from '../Functions/CalTime';\nimport CalCelsius from '../Functions/CalCelsius';\nimport CalWindSpeed from '../Functions/CalWindSpeed';\nimport ForecastDailyItem from './ForecastDailyItem';\nimport ForecastHourlyItem from './ForecastHourlyItem';\nimport './Forecast.css';\nimport './CurrentWeather.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_key = \"157d33f8987d245bc6a1997408e90015\"; //const localTime = new Date().toLocaleString()\n\nclass CurrentWeather extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.nextdailyProperty = () => {\n      const newIndex = this.state.dailyProperty.id + 1;\n      this.setState({\n        dailyProperty: this.state.forecastDailyElements[newIndex]\n      });\n    };\n\n    this.prevdailyProperty = () => {\n      const newIndex = this.state.dailyProperty.id - 1;\n      this.setState({\n        dailyProperty: this.state.forecastDailyElements[newIndex]\n      });\n    };\n\n    this.nextHourlyProperty = () => {\n      const newIndex = this.state.hourlyProperty.id + 1;\n      this.setState({\n        hourlyProperty: this.state.forecastHourlyElements[newIndex]\n      });\n    };\n\n    this.prevHourlyProperty = () => {\n      const newIndex = this.state.hourlyProperty.id - 1;\n      this.setState({\n        hourlyProperty: this.state.forecastHourlyElements[newIndex]\n      });\n    };\n\n    this.getWeather = e => {\n      fetch(`http://api.openweathermap.org/data/2.5/weather?q=${this.state.city}&lang=pl&APPID=${API_key}`).then(response => {\n        if (response.ok) {\n          return response;\n        }\n\n        throw Error(\"Błąd pobierania danych z API\");\n      }).then(response => response.json()).then(response => {\n        const localTime = new Date().toLocaleString();\n        console.log(response);\n        this.getForecastDaily(response.coord.lat, response.coord.lon);\n        this.getForecastHourly(response.coord.lat, response.coord.lon);\n        this.setState(state => ({\n          city: state.value,\n          country: response.sys.country,\n          date: CalDate(response.dt),\n          time: CalTime(response.dt, response.timezone),\n          weather: response.weather[0].description,\n          temp: CalCelsius(response.main.temp),\n          tempMax: CalCelsius(response.main.temp_max),\n          tempMin: CalCelsius(response.main.temp_min),\n          tempFeel: CalCelsius(response.main.feels_like),\n          pressure: response.main.pressure,\n          wind: CalWindSpeed(response.wind.speed),\n          image: weatherIcons[response.weather[0].id],\n          lat: response.coord.lat,\n          lon: response.coord.lon,\n          clouds: response.clouds.all,\n          humidity: response.main.humidity,\n          sunrise: CalTime(response.sys.sunrise, response.timezone),\n          sunset: CalTime(response.sys.sunset, response.timezone),\n          background: \"/images/cloudyCity.jpg\",\n          error: false\n        }));\n      }).catch(err => {\n        console.log(err);\n        this.setState(prevState => {\n          return {\n            error: true,\n            city: prevState.city\n          };\n        });\n      });\n    };\n\n    this.getForecastDaily = (lat, lon) => {\n      console.log(lat);\n      this.state.forecastDailyElements.length = 0;\n      fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&lang=pl&appid=${API_key}`).then(response => {\n        if (response.ok) {\n          return response;\n        }\n\n        throw Error(\"Błąd pobierania danych z API\");\n      }).then(response => response.json()).then(response => {\n        console.log(response);\n\n        for (var i = 0; i < 8; i++) {\n          this.setState({\n            forecastDailyElements: [...this.state.forecastDailyElements, {\n              'id': i,\n              'date': CalDate(response.daily[i].dt),\n              'weather': response.daily[i].weather[0].description,\n              'temp': CalCelsius(response.daily[i].temp.day),\n              'pressure': response.daily[i].pressure,\n              'wind': CalWindSpeed(response.daily[i].wind_speed),\n              'image': weatherIcons[response.daily[i].weather[0].id],\n              'background': \"/images/download.gif\"\n            }],\n            dailyProperty: this.state.forecastDailyElements[0]\n          });\n        }\n      });\n    };\n\n    this.getForecastHourly = (lat, lon) => {\n      this.state.forecastHourlyElements.length = 0;\n      fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&lang=pl&appid=${API_key}`).then(response => {\n        if (response.ok) {\n          return response;\n        }\n\n        throw Error(\"Błąd pobierania danych z API\");\n      }).then(response => response.json()).then(response => {\n        const localTime = new Date().toLocaleString();\n        console.log(response);\n\n        for (var i = 0; i < 48; i++) {\n          this.setState({\n            forecastHourlyElements: [...this.state.forecastHourlyElements, {\n              'id': i,\n              'date': CalDate(response.hourly[i].dt),\n              'time': CalTime(response.hourly[i].dt, response.timezone_offset),\n              'weather': response.hourly[i].weather[0].description,\n              'temp': CalCelsius(response.hourly[i].temp),\n              'pressure': response.hourly[i].pressure,\n              'wind': CalWindSpeed(response.hourly[i].wind_speed),\n              'image': weatherIcons[response.hourly[i].weather[0].id]\n            }],\n            hourlyProperty: this.state.forecastHourlyElements[0]\n          });\n        }\n      });\n    };\n\n    this.inputHandler = e => {\n      this.setState({\n        value: e.target.value\n      });\n    };\n\n    this.state = {\n      value: \"\",\n      city: \"warszawa\",\n      country: \"pl\",\n      image: undefined,\n      background: undefined,\n      weather: undefined,\n      temp: undefined,\n      tempMax: undefined,\n      tempMin: undefined,\n      tempFeel: undefined,\n      pressurre: undefined,\n      wind: undefined,\n      lat: undefined,\n      lon: undefined,\n      clouds: undefined,\n      humidity: undefined,\n      sunrise: undefined,\n      sunset: undefined,\n      background: undefined,\n      forecastDailyElements: [],\n      forecastHourlyElements: [],\n      dailyProperty: undefined,\n      hourlyProperty: undefined,\n      error: false\n    };\n  }\n\n  render() {\n    const {\n      forecastDailyElements,\n      forecastHourlyElements,\n      dailyProperty,\n      hourlyProperty\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main\",\n      style: {\n        backgroundImage: `url(\"/images/bg.jpg\")`\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"city-form\",\n        children: /*#__PURE__*/_jsxDEV(Form, {\n          value: this.state.value,\n          handler: this.inputHandler,\n          submit: this.getWeather\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: this.state.city ? /*#__PURE__*/_jsxDEV(WeatherItem, {\n          weather: this.state\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 21\n        }, this) : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main-cards\",\n        children: dailyProperty ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"cards-slider\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"left\",\n            onClick: () => this.nextdailyProperty(),\n            disabled: dailyProperty.id === forecastDailyElements.length - 1,\n            children: \"Next\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"cards-slider-wrapper\",\n            style: {\n              'transform': `translateX(-${dailyProperty.id * (100 / forecastDailyElements.length)}%)`\n            },\n            children: forecastDailyElements.map(fde => /*#__PURE__*/_jsxDEV(ForecastDailyItem, {\n              element: fde\n            }, fde.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 224,\n              columnNumber: 63\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"right\",\n            onClick: () => this.prevdailyProperty(),\n            disabled: dailyProperty.id === 0,\n            children: \"Prev\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 21\n        }, this) : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main-cards\",\n        children: hourlyProperty ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"cards-slider\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"left\",\n            onClick: () => this.nextHourlyProperty(),\n            disabled: hourlyProperty.id === forecastHourlyElements.length - 1,\n            children: \"Next\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 237,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"cards-slider-wrapper\",\n            style: {\n              'transform': `translateX(-${hourlyProperty.id * (100 / forecastHourlyElements.length)}%)`\n            },\n            children: forecastHourlyElements.map(fde => /*#__PURE__*/_jsxDEV(ForecastHourlyItem, {\n              element: fde\n            }, fde.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 245,\n              columnNumber: 64\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 242,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"right\",\n            onClick: () => this.prevHourlyProperty(),\n            disabled: hourlyProperty.id === 0,\n            children: \"Prev\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 247,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 21\n        }, this) : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst weatherIcons = {\n  200: '/images/thunderstorm.png',\n  201: '/images/thunderstorm.png',\n  202: '/images/thunderstorm.png',\n  210: '/images/thunderstorm.png',\n  211: '/images/thunderstorm.png',\n  212: '/images/thunderstorm.png',\n  221: '/images/thunderstorm.png',\n  230: '/images/thunderstorm.png',\n  231: '/images/thunderstorm.png',\n  232: '/images/thunderstorm.png',\n  300: '/images/drizzle.png',\n  301: '/images/drizzle.png',\n  302: '/images/drizzle.png',\n  310: '/images/drizzle.png',\n  311: '/images/drizzle.png',\n  312: '/images/drizzle.png',\n  313: '/images/drizzle.png',\n  314: '/images/drizzle.png',\n  321: '/images/drizzle.png',\n  500: '/images/rain.png',\n  501: '/images/rain.png',\n  503: '/images/rain.png',\n  504: '/images/rain.png',\n  511: '/images/rain.png',\n  520: '/images/rain.png',\n  521: '/images/rain.png',\n  522: '/images/rain.png',\n  531: '/images/rain.png',\n  500: '/images/rain.png',\n  600: '/images/snow.png',\n  601: '/images/snow.png',\n  602: '/images/snow.png',\n  611: '/images/snow.png',\n  612: '/images/snow.png',\n  613: '/images/snow.png',\n  615: '/images/snow.png',\n  616: '/images/snow.png',\n  620: '/images/snow.png',\n  621: '/images/snow.png',\n  622: '/images/snow.png',\n  701: '/images/mist.png',\n  711: '/images/mist.png',\n  721: '/images/mist.png',\n  731: '/images/mist.png',\n  741: '/images/mist.png',\n  751: '/images/mist.png',\n  761: '/images/mist.png',\n  762: '/images/mist.png',\n  771: '/images/mist.png',\n  781: '/images/mist.png',\n  800: '/images/clear.png',\n  801: '/images/clouds.png',\n  802: '/images/clouds.png',\n  803: '/images/clouds.png',\n  804: '/images/clouds.png'\n};\nexport default CurrentWeather;","map":{"version":3,"sources":["C:/Users/vened/Desktop/Pogoda/my_weather/client/src/components/currentWeather/CurrentWeather.js"],"names":["React","WeatherItem","Form","CalDate","CalTime","CalCelsius","CalWindSpeed","ForecastDailyItem","ForecastHourlyItem","API_key","CurrentWeather","Component","constructor","props","nextdailyProperty","newIndex","state","dailyProperty","id","setState","forecastDailyElements","prevdailyProperty","nextHourlyProperty","hourlyProperty","forecastHourlyElements","prevHourlyProperty","getWeather","e","fetch","city","then","response","ok","Error","json","localTime","Date","toLocaleString","console","log","getForecastDaily","coord","lat","lon","getForecastHourly","value","country","sys","date","dt","time","timezone","weather","description","temp","main","tempMax","temp_max","tempMin","temp_min","tempFeel","feels_like","pressure","wind","speed","image","weatherIcons","clouds","all","humidity","sunrise","sunset","background","error","catch","err","prevState","length","i","daily","day","wind_speed","hourly","timezone_offset","inputHandler","target","undefined","pressurre","render","backgroundImage","map","fde"],"mappings":"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","sourcesContent":["import React from 'react'\nimport WeatherItem from './WeatherItem';\nimport Form from '../Form/Form'\nimport CalDate from '../Functions/CalDate';\nimport CalTime from '../Functions/CalTime';\nimport CalCelsius from '../Functions/CalCelsius';\nimport CalWindSpeed from '../Functions/CalWindSpeed';\nimport ForecastDailyItem from './ForecastDailyItem';\nimport ForecastHourlyItem from './ForecastHourlyItem';\nimport './Forecast.css';\nimport './CurrentWeather.css';\n\nconst API_key=\"157d33f8987d245bc6a1997408e90015\"\n//const localTime = new Date().toLocaleString()\n\nclass CurrentWeather extends React.Component{\n    constructor(props){\n        super(props)\n        this.state={\n            value:\"\",\n            city:\"warszawa\",\n            country:\"pl\",\n            image:undefined,\n            background:undefined,\n            weather:undefined,\n            temp:undefined,\n            tempMax:undefined,\n            tempMin:undefined,\n            tempFeel:undefined,\n            pressurre:undefined,\n            wind:undefined,\n            lat:undefined,\n            lon:undefined,\n            clouds:undefined, \n            humidity:undefined,\n            sunrise:undefined,\n            sunset:undefined,\n            background:undefined,\n            forecastDailyElements:[\n            ],\n            forecastHourlyElements:[\n            ],\n            dailyProperty: undefined,\n            hourlyProperty: undefined,\n            error:false\n        }\n    }\n\n    nextdailyProperty = () => {\n        const newIndex = this.state.dailyProperty.id +1\n        this.setState({\n            dailyProperty: this.state.forecastDailyElements[newIndex]\n        })\n    }\n\n    prevdailyProperty = () => {\n        const newIndex = this.state.dailyProperty.id -1\n        this.setState({\n            dailyProperty: this.state.forecastDailyElements[newIndex]\n        })\n    }\n\n    nextHourlyProperty = () => {\n        const newIndex = this.state.hourlyProperty.id +1\n        this.setState({\n            hourlyProperty: this.state.forecastHourlyElements[newIndex]\n        })\n    }\n    \n    prevHourlyProperty = () => {\n        const newIndex = this.state.hourlyProperty.id -1\n        this.setState({\n            hourlyProperty: this.state.forecastHourlyElements[newIndex]\n        })\n    }\n    \n    getWeather = (e) =>{\n        \n          \n          fetch(`http://api.openweathermap.org/data/2.5/weather?q=${this.state.city}&lang=pl&APPID=${API_key}`)\n          .then(response => {\n              if(response.ok){\n                  return response\n              }\n              throw Error(\"Błąd pobierania danych z API\")\n          })\n          .then(response => response.json())\n          .then(response => {\n              const localTime = new Date().toLocaleString()\n              console.log(response)\n              this.getForecastDaily(response.coord.lat,response.coord.lon)\n              this.getForecastHourly(response.coord.lat,response.coord.lon)\n              this.setState(state =>({\n                city:state.value,\n                country:response.sys.country,\n                date:CalDate(response.dt),\n                time:CalTime(response.dt,response.timezone),\n                weather:response.weather[0].description,\n                temp:CalCelsius(response.main.temp),\n                tempMax:CalCelsius(response.main.temp_max),\n                tempMin:CalCelsius(response.main.temp_min),\n                tempFeel:CalCelsius(response.main.feels_like),\n                pressure:response.main.pressure,\n                wind:CalWindSpeed(response.wind.speed),\n                image:weatherIcons[response.weather[0].id],\n                lat:response.coord.lat,\n                lon:response.coord.lon,\n                clouds:response.clouds.all, \n                humidity:response.main.humidity,\n                sunrise:CalTime(response.sys.sunrise,response.timezone),\n                sunset:CalTime(response.sys.sunset,response.timezone),\n                background:\"/images/cloudyCity.jpg\",\n                error:false\n              }))\n          })\n          .catch(err =>{\n            console.log(err)\n            this.setState(prevState =>{\n                return{\n                error:true,\n                city:prevState.city\n            }})\n        })\n        \n    }\n    getForecastDaily = (lat,lon)=>{\n\n        console.log(lat)\n        this.state.forecastDailyElements.length=0\n        \n        fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&lang=pl&appid=${API_key}`)\n          .then(response => {\n              if(response.ok){\n                  return response\n              }\n              throw Error(\"Błąd pobierania danych z API\")\n          })\n          .then(response => response.json())\n          .then(response => {\n              console.log(response)\n              for (var i = 0; i < 8; i++) {\n                this.setState({\n                    forecastDailyElements:[...this.state.forecastDailyElements,{\n                        'id':i,\n                        'date':CalDate(response.daily[i].dt),\n                        'weather':response.daily[i].weather[0].description,\n                        'temp':CalCelsius(response.daily[i].temp.day),\n                        'pressure':response.daily[i].pressure,\n                        'wind':CalWindSpeed(response.daily[i].wind_speed),\n                        'image':weatherIcons[response.daily[i].weather[0].id],\n                        'background':\"/images/download.gif\",\n                    }],\n                    dailyProperty:this.state.forecastDailyElements[0]\n                })\n            }   \n          })\n    }\n    getForecastHourly = (lat,lon)=>{\n\n        this.state.forecastHourlyElements.length=0\n        \n        fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&lang=pl&appid=${API_key}`)\n          .then(response => {\n              if(response.ok){\n                  return response\n              }\n              throw Error(\"Błąd pobierania danych z API\")\n          })\n          .then(response => response.json())\n          .then(response => {\n              const localTime = new Date().toLocaleString()\n              console.log(response)\n              for (var i = 0; i < 48; i++) {\n                this.setState({\n                    forecastHourlyElements:[...this.state.forecastHourlyElements,{\n                        'id':i,\n                        'date':CalDate(response.hourly[i].dt),\n                        'time':CalTime(response.hourly[i].dt,response.timezone_offset),\n                        'weather':response.hourly[i].weather[0].description,\n                        'temp':CalCelsius(response.hourly[i].temp),\n                        'pressure':response.hourly[i].pressure,\n                        'wind':CalWindSpeed(response.hourly[i].wind_speed),\n                        'image':weatherIcons[response.hourly[i].weather[0].id],\n                    }],\n                    hourlyProperty:this.state.forecastHourlyElements[0]\n                })\n            }\n          })\n    }\n    inputHandler=(e)=>{\n        this.setState({\n            value:e.target.value\n        })\n    }\n    render(){\n        const {forecastDailyElements, forecastHourlyElements, dailyProperty, hourlyProperty}=this.state\n        return(\n            <div className=\"main\" style={{ \n                backgroundImage: `url(\"/images/bg.jpg\")` \n              }}>\n                <div className=\"city-form\">\n                <Form \n                value={this.state.value}  \n                handler={this.inputHandler}\n                submit={this.getWeather}\n                /> \n                </div> \n                <div>\n                {this.state.city ?(\n                    <WeatherItem weather={this.state}/>   \n                ):null}\n                </div>\n                <div className=\"main-cards\">\n                    {dailyProperty ?( \n                    <div className=\"cards-slider\">\n                        <button className=\"left\" \n                                onClick={() => this.nextdailyProperty()} \n                                disabled={dailyProperty.id === forecastDailyElements.length-1}\n                                >Next\n                        </button>\n                        <div className=\"cards-slider-wrapper\" style={{\n                            'transform':`translateX(-${dailyProperty.id*(100/forecastDailyElements.length)}%)`\n                        }}>\n                            {forecastDailyElements.map(fde => <ForecastDailyItem key={fde.id} element={fde} />)}\n                        </div>\n                        <button className=\"right\"\n                                onClick={() => this.prevdailyProperty()} \n                                disabled={dailyProperty.id === 0}\n                        >Prev\n                        </button>\n                    </div>\n                    ):null}\n                </div>\n                <div className=\"main-cards\">\n                    {hourlyProperty ?( \n                    <div className=\"cards-slider\">\n                        <button className=\"left\" \n                                onClick={() => this.nextHourlyProperty()} \n                                disabled={hourlyProperty.id === forecastHourlyElements.length-1}\n                                >Next\n                        </button>\n                        <div className=\"cards-slider-wrapper\" style={{\n                            'transform':`translateX(-${hourlyProperty.id*(100/forecastHourlyElements.length)}%)`\n                        }}>\n                            {forecastHourlyElements.map(fde => <ForecastHourlyItem key={fde.id} element={fde} />)}\n                        </div>\n                        <button className=\"right\"\n                                onClick={() => this.prevHourlyProperty()} \n                                disabled={hourlyProperty.id === 0}\n                        >Prev\n                        </button>\n                    </div>\n                    ):null}\n                </div>\n            </div>\n        \n        )\n    }\n}\nconst weatherIcons = {\n    200:'/images/thunderstorm.png',\n    201:'/images/thunderstorm.png',\n    202:'/images/thunderstorm.png',\n    210:'/images/thunderstorm.png',\n    211:'/images/thunderstorm.png',\n    212:'/images/thunderstorm.png',\n    221:'/images/thunderstorm.png',\n    230:'/images/thunderstorm.png',\n    231:'/images/thunderstorm.png',\n    232:'/images/thunderstorm.png',\n    300:'/images/drizzle.png',\n    301:'/images/drizzle.png',\n    302:'/images/drizzle.png',\n    310:'/images/drizzle.png',\n    311:'/images/drizzle.png',\n    312:'/images/drizzle.png',\n    313:'/images/drizzle.png',\n    314:'/images/drizzle.png',\n    321:'/images/drizzle.png',\n    500:'/images/rain.png',\n    501:'/images/rain.png',\n    503:'/images/rain.png',\n    504:'/images/rain.png',\n    511:'/images/rain.png',\n    520:'/images/rain.png',\n    521:'/images/rain.png',\n    522:'/images/rain.png',\n    531:'/images/rain.png',\n    500:'/images/rain.png',\n    600:'/images/snow.png',\n    601:'/images/snow.png',\n    602:'/images/snow.png',\n    611:'/images/snow.png',\n    612:'/images/snow.png',\n    613:'/images/snow.png',\n    615:'/images/snow.png',\n    616:'/images/snow.png',\n    620:'/images/snow.png',\n    621:'/images/snow.png',\n    622:'/images/snow.png',\n    701:'/images/mist.png',\n    711:'/images/mist.png',\n    721:'/images/mist.png',\n    731:'/images/mist.png',\n    741:'/images/mist.png',\n    751:'/images/mist.png',\n    761:'/images/mist.png',\n    762:'/images/mist.png',\n    771:'/images/mist.png',\n    781:'/images/mist.png',\n    800:'/images/clear.png',\n    801:'/images/clouds.png',\n    802:'/images/clouds.png',\n    803:'/images/clouds.png',\n    804:'/images/clouds.png',\n}\nexport default CurrentWeather"]},"metadata":{},"sourceType":"module"}