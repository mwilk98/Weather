{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vened\\\\Desktop\\\\Pogoda\\\\my_weather\\\\client\\\\src\\\\components\\\\WeatherAlerts\\\\WeatherAlerts.js\";\nimport React from 'react';\nimport Form from '../Form/Form';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_key = \"157d33f8987d245bc6a1997408e90015\";\n\nclass WeatherAlerts extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      value: \"\",\n      city: \"\",\n      country: \"\",\n      description: \"\",\n      end: undefined,\n      event: \"\",\n      sender_name: \"\",\n      start: undefined,\n      error: false\n    };\n\n    this.getAir = e => {\n      e.preventDefault();\n      fetch(`http://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&APPID=${API_key}`).then(response => {\n        if (response.ok) {\n          return response;\n        }\n\n        throw Error(\"Błąd pobierania danych z API\");\n      }).then(response => response.json()).then(response => {\n        const localTime = new Date().toLocaleString();\n        console.log(response);\n        this.setState(state => ({\n          city: state.value,\n          country: response.sys.country,\n          date: this.calDate(response.dt),\n          time: this.calTime(response.dt, response.timezone),\n          lat: response.coord.lat,\n          lon: response.coord.lon,\n          error: false\n        }));\n        fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${response.coord.lat}&lon=${response.coord.lon}&lang=pl&appid=${API_key}`).then(response2 => {\n          if (response2.ok) {\n            return response2;\n          }\n\n          throw Error(\"Błąd pobierania danych z API\");\n        }).then(response2 => response2.json()).then(response2 => {\n          console.log(response2);\n\n          if (response2.alerts[0] != null) {\n            this.setState(state => ({\n              description: response2.alerts[0].description,\n              error: false\n            }));\n          } else {\n            this.setState(state => ({\n              description: \"brak alertów\",\n              error: false\n            }));\n          }\n        }).catch(err => {\n          console.log(err);\n          this.setState(prevState => {\n            return {\n              error: true,\n              city: prevState.city\n            };\n          });\n        });\n      }).catch(err => {\n        console.log(err);\n        this.setState(prevState => {\n          return {\n            error: true,\n            city: prevState.city\n          };\n        });\n      });\n    };\n\n    this.inputHandler = e => {\n      this.setState({\n        value: e.target.value\n      });\n    };\n\n    this.submitHandler = e => {\n      this.getAir(e);\n    };\n  }\n\n  calDate(time) {\n    var date = new Date(time * 1000); // Hours part from the timestamp\n\n    var year = date.getFullYear();\n    var month = date.getMonth() + 1;\n    var day = date.getDate();\n    var daytime = day + '-' + 0 + month + '-' + year;\n    return daytime;\n  }\n\n  calTime(time, timezone) {\n    var date = new Date(time * 1000 + timezone * 1000 - 7200000);\n    var hours = date.getHours(); // Minutes part from the timestamp\n\n    var minutes = date.getMinutes(); // Seconds part from the timestamp\n\n    var seconds = date.getSeconds();\n    var daytime = hours + ':' + minutes + ':' + seconds;\n    return daytime;\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Alrty Pogodowe\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Form, {\n          value: this.state.value,\n          handler: this.inputHandler,\n          submit: this.submitHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: this.state.city\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: this.state.country\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: this.state.date\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: this.state.time\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: this.state.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default WeatherAlerts;","map":{"version":3,"sources":["C:/Users/vened/Desktop/Pogoda/my_weather/client/src/components/WeatherAlerts/WeatherAlerts.js"],"names":["React","Form","API_key","WeatherAlerts","Component","state","value","city","country","description","end","undefined","event","sender_name","start","error","getAir","e","preventDefault","fetch","then","response","ok","Error","json","localTime","Date","toLocaleString","console","log","setState","sys","date","calDate","dt","time","calTime","timezone","lat","coord","lon","response2","alerts","catch","err","prevState","inputHandler","target","submitHandler","year","getFullYear","month","getMonth","day","getDate","daytime","hours","getHours","minutes","getMinutes","seconds","getSeconds","render"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport Form from '../Form/Form'\r\n\r\nconst API_key=\"157d33f8987d245bc6a1997408e90015\"\r\n\r\n\r\nclass WeatherAlerts extends React.Component{\r\n    state={\r\n        value:\"\",\r\n        city:\"\",\r\n        country:\"\",\r\n        description:\"\",\r\n        end:undefined,\r\n        event:\"\",\r\n        sender_name:\"\",\r\n        start:undefined,\r\n        error:false\r\n    }\r\n    calDate(time){\r\n        var date = new Date(time * 1000);\r\n        // Hours part from the timestamp\r\n        var year = date.getFullYear();\r\n        var month = date.getMonth()+1;\r\n        var day = date.getDate();\r\n        var daytime=day+'-'+0+month+'-'+year;\r\n        return daytime;\r\n      }\r\n      calTime(time,timezone){\r\n        var date = new Date(time*1000+timezone*1000-7200000);\r\n        var hours = date.getHours();\r\n        // Minutes part from the timestamp\r\n        var minutes = date.getMinutes();\r\n        // Seconds part from the timestamp\r\n        var seconds = date.getSeconds();\r\n\r\n        var daytime=hours+':'+minutes+':'+seconds;\r\n        return daytime;\r\n      }\r\n    getAir = (e) =>{\r\n        \r\n        e.preventDefault()\r\n          \r\n          fetch(`http://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&APPID=${API_key}`)\r\n          .then(response => {\r\n              if(response.ok){\r\n                  return response\r\n              }\r\n              throw Error(\"Błąd pobierania danych z API\")\r\n          })\r\n          .then(response => response.json())\r\n          .then(response => {\r\n              const localTime = new Date().toLocaleString()\r\n              console.log(response)\r\n              this.setState(state =>({\r\n                city:state.value,\r\n                country:response.sys.country,\r\n                date:this.calDate(response.dt),\r\n                time:this.calTime(response.dt,response.timezone),\r\n                lat:response.coord.lat,\r\n                lon:response.coord.lon, \r\n                error:false\r\n              }))\r\n              fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${response.coord.lat}&lon=${response.coord.lon}&lang=pl&appid=${API_key}`)\r\n          .then(response2 => {\r\n              if(response2.ok){\r\n                  return response2\r\n              }\r\n              throw Error(\"Błąd pobierania danych z API\")\r\n          })\r\n          .then(response2 => response2.json())\r\n          .then(response2 => {\r\n              console.log(response2)\r\n              if(response2.alerts[0]!=null){\r\n                this.setState(state =>({\r\n                        description:response2.alerts[0].description,\r\n                        error:false\r\n                      }))   \r\n              }else{\r\n                this.setState(state =>({\r\n                        description:\"brak alertów\",\r\n                        error:false\r\n                      }))\r\n              }\r\n          })\r\n          .catch(err =>{\r\n            console.log(err)\r\n            this.setState(prevState =>{\r\n                return{\r\n                error:true,\r\n                city:prevState.city\r\n            }})\r\n        })\r\n          })\r\n          .catch(err =>{\r\n            console.log(err)\r\n            this.setState(prevState =>{\r\n                return{\r\n                error:true,\r\n                city:prevState.city\r\n            }})\r\n        })\r\n    }\r\n    inputHandler=(e)=>{\r\n        this.setState({\r\n            value:e.target.value\r\n        })\r\n    }\r\n    submitHandler=(e)=>{\r\n        this.getAir(e)\r\n    }\r\n    render(){\r\n        \r\n        return(\r\n            <div >\r\n                <h1>Alrty Pogodowe</h1>\r\n                <div>\r\n                <Form \r\n                value={this.state.value}  \r\n                handler={this.inputHandler}\r\n                submit={this.submitHandler}\r\n                /> \r\n                </div> \r\n                <div>\r\n                        <p>{this.state.city}</p>\r\n                        <p>{this.state.country}</p>\r\n                        <p>{this.state.date}</p>\r\n                        <p>{this.state.time}</p> \r\n                        <p>{this.state.description}</p> \r\n                </div>\r\n            </div>\r\n            \r\n        )\r\n    }\r\n}\r\nexport default WeatherAlerts"]},"metadata":{},"sourceType":"module"}