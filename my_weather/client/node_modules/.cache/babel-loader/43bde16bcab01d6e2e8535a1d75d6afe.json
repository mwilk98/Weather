{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vened\\\\Desktop\\\\Pogoda\\\\my_weather\\\\client\\\\src\\\\components\\\\currentWeather\\\\CurrentWeather.js\";\nimport React from 'react';\nimport WeatherItem from './WeatherItem';\nimport Forecast from '../forecast/Forecast';\nimport Form from '../Form/Form';\nimport CalDate from '../Functions/CalDate';\nimport CalTime from '../Functions/CalTime';\nimport CalCelsius from '../Functions/CalCelsius';\nimport CalWindSpeed from '../Functions/CalWindSpeed';\nimport './CurrentWeather.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_key = \"157d33f8987d245bc6a1997408e90015\";\n\nclass CurrentWeather extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getWeather = e => {\n      e.preventDefault();\n      fetch(`http://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&lang=pl&APPID=${API_key}`).then(response => {\n        if (response.ok) {\n          return response;\n        }\n\n        throw Error(\"Błąd pobierania danych z API\");\n      }).then(response => response.json()).then(response => {\n        const localTime = new Date().toLocaleString();\n        console.log(response);\n        this.getForecastDaily(response.coord.lat, response.coord.lon);\n        this.setState(state => ({\n          city: state.value,\n          country: response.sys.country,\n          date: CalDate(response.dt),\n          time: CalTime(response.dt, response.timezone),\n          weather: response.weather[0].description,\n          temp: CalCelsius(response.main.temp),\n          tempMax: CalCelsius(response.main.temp_max),\n          tempMin: CalCelsius(response.main.temp_min),\n          pressure: response.main.pressure,\n          wind: CalWindSpeed(response.wind.speed),\n          image: weatherIcons[response.weather[0].id],\n          lat: response.coord.lat,\n          lon: response.coord.lon,\n          error: false\n        }));\n      }).catch(err => {\n        console.log(err);\n        this.setState(prevState => {\n          return {\n            error: true,\n            city: prevState.city\n          };\n        });\n      });\n    };\n\n    this.getForecastDaily = (lat, lon) => {\n      console.log(lat);\n      this.state.forecastDailyElements.length = 0;\n      fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&lang=pl&appid=${API_key}`).then(response => {\n        if (response.ok) {\n          return response;\n        }\n\n        throw Error(\"Błąd pobierania danych z API\");\n      }).then(response => response.json()).then(response => {\n        const localTime = new Date().toLocaleString();\n        console.log(response);\n\n        for (var i = 0; i < 8; i++) {\n          this.setState({\n            forecastDailyElements: [...this.state.forecastDailyElements, {\n              'id': i,\n              'date': CalDate(response.daily[i].dt),\n              'weather': response.daily[i].weather[0].description,\n              'temp': CalCelsius(response.daily[i].temp.day),\n              'pressure': response.daily[i].pressure,\n              'wind': CalWindSpeed(response.daily[i].wind_speed),\n              'image': weatherIcons[response.daily[i].weather[0].id]\n            }],\n            dailyProperty: this.state.forecastDailyElements[0]\n          });\n        }\n      });\n    };\n\n    this.getForecastHourly = (lat, lon) => {\n      this.state.forecastHourlyElements.length = 0;\n      fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&lang=pl&appid=${API_key}`).then(response => {\n        if (response.ok) {\n          return response;\n        }\n\n        throw Error(\"Błąd pobierania danych z API\");\n      }).then(response => response.json()).then(response => {\n        const localTime = new Date().toLocaleString();\n        console.log(response);\n\n        for (var i = 0; i < 48; i++) {\n          this.setState({\n            forecastHourlyElements: [...this.state.forecastHourlyElements, {\n              'id': i,\n              'date': CalDate(response.hourly[i].dt),\n              'time': CalTime(response.hourly[i].dt, response.timezone_offset),\n              'weather': response.hourly[i].weather[0].description,\n              'temp': CalCelsius(response.hourly[i].temp),\n              'pressure': response.hourly[i].pressure,\n              'wind': CalWindSpeed(response.hourly[i].wind_speed),\n              'image': weatherIcons[response.hourly[i].weather[0].id]\n            }],\n            hourlyProperty: this.state.forecastHourlyElements[0]\n          });\n        }\n      });\n    };\n\n    this.inputHandler = e => {\n      this.setState({\n        value: e.target.value\n      });\n    };\n\n    this.state = {\n      value: \"\",\n      city: \"\",\n      country: \"\",\n      image: undefined,\n      weather: undefined,\n      temp: undefined,\n      tempMax: undefined,\n      tempMin: undefined,\n      pressurre: undefined,\n      wind: undefined,\n      lat: undefined,\n      lon: undefined,\n      forecastDailyElements: [],\n      forecastHourlyElements: [],\n      dailyProperty: undefined,\n      hourlyProperty: undefined,\n      error: false\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"city-form\",\n        children: /*#__PURE__*/_jsxDEV(Form, {\n          value: this.state.value,\n          handler: this.inputHandler,\n          submit: this.getWeather\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: this.state.city ? /*#__PURE__*/_jsxDEV(WeatherItem, {\n          weather: this.state\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 21\n        }, this) : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst weatherIcons = {\n  200: '/images/thunderstorm.png',\n  201: '/images/thunderstorm.png',\n  202: '/images/thunderstorm.png',\n  210: '/images/thunderstorm.png',\n  211: '/images/thunderstorm.png',\n  212: '/images/thunderstorm.png',\n  221: '/images/thunderstorm.png',\n  230: '/images/thunderstorm.png',\n  231: '/images/thunderstorm.png',\n  232: '/images/thunderstorm.png',\n  300: '/images/drizzle.png',\n  301: '/images/drizzle.png',\n  302: '/images/drizzle.png',\n  310: '/images/drizzle.png',\n  311: '/images/drizzle.png',\n  312: '/images/drizzle.png',\n  313: '/images/drizzle.png',\n  314: '/images/drizzle.png',\n  321: '/images/drizzle.png',\n  500: '/images/rain.png',\n  501: '/images/rain.png',\n  503: '/images/rain.png',\n  504: '/images/rain.png',\n  511: '/images/rain.png',\n  520: '/images/rain.png',\n  521: '/images/rain.png',\n  522: '/images/rain.png',\n  531: '/images/rain.png',\n  500: '/images/rain.png',\n  600: '/images/snow.png',\n  601: '/images/snow.png',\n  602: '/images/snow.png',\n  611: '/images/snow.png',\n  612: '/images/snow.png',\n  613: '/images/snow.png',\n  615: '/images/snow.png',\n  616: '/images/snow.png',\n  620: '/images/snow.png',\n  621: '/images/snow.png',\n  622: '/images/snow.png',\n  701: '/images/mist.png',\n  711: '/images/mist.png',\n  721: '/images/mist.png',\n  731: '/images/mist.png',\n  741: '/images/mist.png',\n  751: '/images/mist.png',\n  761: '/images/mist.png',\n  762: '/images/mist.png',\n  771: '/images/mist.png',\n  781: '/images/mist.png',\n  800: '/images/clear.png',\n  801: '/images/clouds.png',\n  802: '/images/clouds.png',\n  803: '/images/clouds.png',\n  804: '/images/clouds.png'\n};\nexport default CurrentWeather;","map":{"version":3,"sources":["C:/Users/vened/Desktop/Pogoda/my_weather/client/src/components/currentWeather/CurrentWeather.js"],"names":["React","WeatherItem","Forecast","Form","CalDate","CalTime","CalCelsius","CalWindSpeed","API_key","CurrentWeather","Component","constructor","props","getWeather","e","preventDefault","fetch","state","value","then","response","ok","Error","json","localTime","Date","toLocaleString","console","log","getForecastDaily","coord","lat","lon","setState","city","country","sys","date","dt","time","timezone","weather","description","temp","main","tempMax","temp_max","tempMin","temp_min","pressure","wind","speed","image","weatherIcons","id","error","catch","err","prevState","forecastDailyElements","length","i","daily","day","wind_speed","dailyProperty","getForecastHourly","forecastHourlyElements","hourly","timezone_offset","hourlyProperty","inputHandler","target","undefined","pressurre","render"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport WeatherItem from './WeatherItem';\r\nimport Forecast from '../forecast/Forecast'\r\nimport Form from '../Form/Form'\r\nimport CalDate from '../Functions/CalDate';\r\nimport CalTime from '../Functions/CalTime';\r\nimport CalCelsius from '../Functions/CalCelsius';\r\nimport CalWindSpeed from '../Functions/CalWindSpeed';\r\nimport './CurrentWeather.css';\r\n\r\nconst API_key=\"157d33f8987d245bc6a1997408e90015\"\r\n\r\nclass CurrentWeather extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state={\r\n            value:\"\",\r\n            city:\"\",\r\n            country:\"\",\r\n            image:undefined,\r\n            weather:undefined,\r\n            temp:undefined,\r\n            tempMax:undefined,\r\n            tempMin:undefined,\r\n            pressurre:undefined,\r\n            wind:undefined,\r\n            lat:undefined,\r\n            lon:undefined,\r\n            forecastDailyElements:[\r\n            ],\r\n            forecastHourlyElements:[\r\n            ],\r\n            dailyProperty: undefined,\r\n            hourlyProperty: undefined,\r\n            error:false\r\n        }\r\n    }\r\n\r\n    \r\n    getWeather = (e) =>{\r\n        \r\n        e.preventDefault()\r\n          \r\n          fetch(`http://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&lang=pl&APPID=${API_key}`)\r\n          .then(response => {\r\n              if(response.ok){\r\n                  return response\r\n              }\r\n              throw Error(\"Błąd pobierania danych z API\")\r\n          })\r\n          .then(response => response.json())\r\n          .then(response => {\r\n              const localTime = new Date().toLocaleString()\r\n              console.log(response)\r\n              this.getForecastDaily(response.coord.lat,response.coord.lon)\r\n              this.setState(state =>({\r\n                city:state.value,\r\n                country:response.sys.country,\r\n                date:CalDate(response.dt),\r\n                time:CalTime(response.dt,response.timezone),\r\n                weather:response.weather[0].description,\r\n                temp:CalCelsius(response.main.temp),\r\n                tempMax:CalCelsius(response.main.temp_max),\r\n                tempMin:CalCelsius(response.main.temp_min),\r\n                pressure:response.main.pressure,\r\n                wind:CalWindSpeed(response.wind.speed),\r\n                image:weatherIcons[response.weather[0].id],\r\n                lat:response.coord.lat,\r\n                lon:response.coord.lon, \r\n                error:false\r\n              }))\r\n          })\r\n          .catch(err =>{\r\n            console.log(err)\r\n            this.setState(prevState =>{\r\n                return{\r\n                error:true,\r\n                city:prevState.city\r\n            }})\r\n        })\r\n        \r\n    }\r\n    getForecastDaily = (lat,lon)=>{\r\n\r\n        console.log(lat)\r\n        this.state.forecastDailyElements.length=0\r\n        \r\n        fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&lang=pl&appid=${API_key}`)\r\n          .then(response => {\r\n              if(response.ok){\r\n                  return response\r\n              }\r\n              throw Error(\"Błąd pobierania danych z API\")\r\n          })\r\n          .then(response => response.json())\r\n          .then(response => {\r\n              const localTime = new Date().toLocaleString()\r\n              console.log(response)\r\n              for (var i = 0; i < 8; i++) {\r\n                this.setState({\r\n                    forecastDailyElements:[...this.state.forecastDailyElements,{\r\n                        'id':i,\r\n                        'date':CalDate(response.daily[i].dt),\r\n                        'weather':response.daily[i].weather[0].description,\r\n                        'temp':CalCelsius(response.daily[i].temp.day),\r\n                        'pressure':response.daily[i].pressure,\r\n                        'wind':CalWindSpeed(response.daily[i].wind_speed),\r\n                        'image':weatherIcons[response.daily[i].weather[0].id],\r\n                    }],\r\n                    dailyProperty:this.state.forecastDailyElements[0]\r\n                })\r\n            }   \r\n          })\r\n    }\r\n    getForecastHourly = (lat,lon)=>{\r\n\r\n        this.state.forecastHourlyElements.length=0\r\n        \r\n        fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&lang=pl&appid=${API_key}`)\r\n          .then(response => {\r\n              if(response.ok){\r\n                  return response\r\n              }\r\n              throw Error(\"Błąd pobierania danych z API\")\r\n          })\r\n          .then(response => response.json())\r\n          .then(response => {\r\n              const localTime = new Date().toLocaleString()\r\n              console.log(response)\r\n              for (var i = 0; i < 48; i++) {\r\n                this.setState({\r\n                    forecastHourlyElements:[...this.state.forecastHourlyElements,{\r\n                        'id':i,\r\n                        'date':CalDate(response.hourly[i].dt),\r\n                        'time':CalTime(response.hourly[i].dt,response.timezone_offset),\r\n                        'weather':response.hourly[i].weather[0].description,\r\n                        'temp':CalCelsius(response.hourly[i].temp),\r\n                        'pressure':response.hourly[i].pressure,\r\n                        'wind':CalWindSpeed(response.hourly[i].wind_speed),\r\n                        'image':weatherIcons[response.hourly[i].weather[0].id],\r\n                    }],\r\n                    hourlyProperty:this.state.forecastHourlyElements[0]\r\n                })\r\n            }\r\n          })\r\n    }\r\n    inputHandler=(e)=>{\r\n        this.setState({\r\n            value:e.target.value\r\n        })\r\n    }\r\n    render(){\r\n        return(\r\n            <div >\r\n                <div className=\"city-form\">\r\n                <Form \r\n                value={this.state.value}  \r\n                handler={this.inputHandler}\r\n                submit={this.getWeather}\r\n                /> \r\n                </div> \r\n                <div>\r\n                {this.state.city ?(\r\n                    <WeatherItem weather={this.state}/>   \r\n                ):null}\r\n                </div>\r\n                <div>\r\n                {//{this.state.city ?(\r\n                    //<Forecast lat={this.state.lat} lon={this.state.lon}/>   \r\n                //):null}\r\n                }\r\n                 \r\n                </div>   \r\n            </div>\r\n            \r\n        )\r\n    }\r\n}\r\nconst weatherIcons = {\r\n    200:'/images/thunderstorm.png',\r\n    201:'/images/thunderstorm.png',\r\n    202:'/images/thunderstorm.png',\r\n    210:'/images/thunderstorm.png',\r\n    211:'/images/thunderstorm.png',\r\n    212:'/images/thunderstorm.png',\r\n    221:'/images/thunderstorm.png',\r\n    230:'/images/thunderstorm.png',\r\n    231:'/images/thunderstorm.png',\r\n    232:'/images/thunderstorm.png',\r\n    300:'/images/drizzle.png',\r\n    301:'/images/drizzle.png',\r\n    302:'/images/drizzle.png',\r\n    310:'/images/drizzle.png',\r\n    311:'/images/drizzle.png',\r\n    312:'/images/drizzle.png',\r\n    313:'/images/drizzle.png',\r\n    314:'/images/drizzle.png',\r\n    321:'/images/drizzle.png',\r\n    500:'/images/rain.png',\r\n    501:'/images/rain.png',\r\n    503:'/images/rain.png',\r\n    504:'/images/rain.png',\r\n    511:'/images/rain.png',\r\n    520:'/images/rain.png',\r\n    521:'/images/rain.png',\r\n    522:'/images/rain.png',\r\n    531:'/images/rain.png',\r\n    500:'/images/rain.png',\r\n    600:'/images/snow.png',\r\n    601:'/images/snow.png',\r\n    602:'/images/snow.png',\r\n    611:'/images/snow.png',\r\n    612:'/images/snow.png',\r\n    613:'/images/snow.png',\r\n    615:'/images/snow.png',\r\n    616:'/images/snow.png',\r\n    620:'/images/snow.png',\r\n    621:'/images/snow.png',\r\n    622:'/images/snow.png',\r\n    701:'/images/mist.png',\r\n    711:'/images/mist.png',\r\n    721:'/images/mist.png',\r\n    731:'/images/mist.png',\r\n    741:'/images/mist.png',\r\n    751:'/images/mist.png',\r\n    761:'/images/mist.png',\r\n    762:'/images/mist.png',\r\n    771:'/images/mist.png',\r\n    781:'/images/mist.png',\r\n    800:'/images/clear.png',\r\n    801:'/images/clouds.png',\r\n    802:'/images/clouds.png',\r\n    803:'/images/clouds.png',\r\n    804:'/images/clouds.png',\r\n}\r\nexport default CurrentWeather"]},"metadata":{},"sourceType":"module"}