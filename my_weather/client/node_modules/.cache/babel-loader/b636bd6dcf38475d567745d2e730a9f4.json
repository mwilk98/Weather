{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vened\\\\Desktop\\\\Pogoda\\\\my_weather\\\\client\\\\src\\\\components\\\\currentWeather\\\\CurrentWeather.js\";\nimport React from 'react';\nimport WeatherItem from './WeatherItem';\nimport Forecast from '../forecast/Forecast';\nimport Form from '../Form/Form';\nimport CalDate from './CalDate';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_key = \"157d33f8987d245bc6a1997408e90015\";\n\nclass CurrentWeather extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      value: \"\",\n      city: \"\",\n      country: \"\",\n      weather: undefined,\n      temp: undefined,\n      tempMax: undefined,\n      tempMin: undefined,\n      pressurre: undefined,\n      wind: undefined,\n      error: false\n    };\n\n    this.getWeather = e => {\n      e.preventDefault();\n      fetch(`http://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&APPID=${API_key}`).then(response => {\n        if (response.ok) {\n          return response;\n        }\n\n        throw Error(\"Błąd pobierania danych z API\");\n      }).then(response => response.json()).then(response => {\n        const localTime = new Date().toLocaleString();\n        console.log(response);\n        this.setState(state => ({\n          city: state.value,\n          country: response.sys.country,\n          date: CalDate(response.dt),\n          time: this.calTime(response.dt, response.timezone),\n          weather: response.weather[0].description,\n          temp: this.calCelsius(response.main.temp),\n          tempMax: this.calCelsius(response.main.temp_max),\n          tempMin: this.calCelsius(response.main.temp_min),\n          pressure: response.main.pressure,\n          wind: this.calWindSpeed(response.wind.speed),\n          lat: response.coord.lat,\n          lon: response.coord.lon,\n          error: false\n        }));\n      }).catch(err => {\n        console.log(err);\n        this.setState(prevState => {\n          return {\n            error: true,\n            city: prevState.city\n          };\n        });\n      });\n    };\n\n    this.inputHandler = e => {\n      this.setState({\n        value: e.target.value\n      });\n    };\n\n    this.submitHandler = e => {\n      this.getWeather(e);\n    };\n  }\n\n  calTime(time, timezone) {\n    var date = new Date(time * 1000 + timezone * 1000 - 7200000);\n    var hours = date.getHours();\n    var minutes = date.getMinutes();\n    var seconds = date.getSeconds();\n    var daytime = hours + ':' + minutes + ':' + seconds;\n    return daytime;\n  }\n\n  calCelsius(temp) {\n    let cell = Math.floor(temp - 273.15);\n    return cell;\n  }\n\n  calWindSpeed(wind) {\n    let cell = Math.floor(wind * 3.6);\n    return cell;\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Pogoda\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Form, {\n          value: this.state.value,\n          handler: this.inputHandler,\n          submit: this.submitHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: this.state.city ? /*#__PURE__*/_jsxDEV(WeatherItem, {\n          weather: this.state\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 21\n        }, this) : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: this.state.city ? /*#__PURE__*/_jsxDEV(Forecast, {\n          lat: this.state.lat,\n          lon: this.state.lon\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 21\n        }, this) : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default CurrentWeather;","map":{"version":3,"sources":["C:/Users/vened/Desktop/Pogoda/my_weather/client/src/components/currentWeather/CurrentWeather.js"],"names":["React","WeatherItem","Forecast","Form","CalDate","API_key","CurrentWeather","Component","state","value","city","country","weather","undefined","temp","tempMax","tempMin","pressurre","wind","error","getWeather","e","preventDefault","fetch","then","response","ok","Error","json","localTime","Date","toLocaleString","console","log","setState","sys","date","dt","time","calTime","timezone","description","calCelsius","main","temp_max","temp_min","pressure","calWindSpeed","speed","lat","coord","lon","catch","err","prevState","inputHandler","target","submitHandler","hours","getHours","minutes","getMinutes","seconds","getSeconds","daytime","cell","Math","floor","render"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport WeatherItem from './WeatherItem';\r\nimport Forecast from '../forecast/Forecast'\r\nimport Form from '../Form/Form'\r\nimport CalDate from './CalDate';\r\n\r\nconst API_key=\"157d33f8987d245bc6a1997408e90015\"\r\n\r\nclass CurrentWeather extends React.Component{\r\n    \r\n    state={\r\n        value:\"\",\r\n        city:\"\",\r\n        country:\"\",\r\n        weather:undefined,\r\n        temp:undefined,\r\n        tempMax:undefined,\r\n        tempMin:undefined,\r\n        pressurre:undefined,\r\n        wind:undefined,\r\n        error:false\r\n    }\r\n\r\n    calTime(time,timezone){\r\n\r\n        var date = new Date(time*1000+timezone*1000-7200000);\r\n        var hours = date.getHours();\r\n        var minutes = date.getMinutes();\r\n        var seconds = date.getSeconds();\r\n\r\n        var daytime = hours + ':' + minutes + ':' + seconds;\r\n\r\n        return daytime;\r\n    }\r\n\r\n    calCelsius(temp){\r\n\r\n        let cell= Math.floor(temp-273.15)\r\n\r\n        return cell;\r\n    }\r\n\r\n    calWindSpeed(wind){\r\n\r\n        let cell= Math.floor(wind*3.6)\r\n\r\n        return cell;\r\n    }\r\n    \r\n    getWeather = (e) =>{\r\n        \r\n        e.preventDefault()\r\n          \r\n          fetch(`http://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&APPID=${API_key}`)\r\n          .then(response => {\r\n              if(response.ok){\r\n                  return response\r\n              }\r\n              throw Error(\"Błąd pobierania danych z API\")\r\n          })\r\n          .then(response => response.json())\r\n          .then(response => {\r\n              const localTime = new Date().toLocaleString()\r\n              console.log(response)\r\n              this.setState(state =>({\r\n                city:state.value,\r\n                country:response.sys.country,\r\n                date:CalDate(response.dt),\r\n                time:this.calTime(response.dt,response.timezone),\r\n                weather:response.weather[0].description,\r\n                temp:this.calCelsius(response.main.temp),\r\n                tempMax:this.calCelsius(response.main.temp_max),\r\n                tempMin:this.calCelsius(response.main.temp_min),\r\n                pressure:response.main.pressure,\r\n                wind:this.calWindSpeed(response.wind.speed),\r\n                lat:response.coord.lat,\r\n                lon:response.coord.lon, \r\n                error:false\r\n              }))\r\n          })\r\n          .catch(err =>{\r\n            console.log(err)\r\n            this.setState(prevState =>{\r\n                return{\r\n                error:true,\r\n                city:prevState.city\r\n            }})\r\n        })\r\n    }\r\n    inputHandler=(e)=>{\r\n        this.setState({\r\n            value:e.target.value\r\n        })\r\n    }\r\n    submitHandler=(e)=>{\r\n        this.getWeather(e)\r\n    }\r\n    render(){\r\n        \r\n        return(\r\n            <div >\r\n                <h1>Pogoda</h1>\r\n                <div>\r\n                <Form \r\n                value={this.state.value}  \r\n                handler={this.inputHandler}\r\n                submit={this.submitHandler}\r\n                /> \r\n                </div> \r\n                <div>\r\n                {this.state.city ?(\r\n                    <WeatherItem weather={this.state}/>   \r\n                ):null}\r\n                </div>\r\n                <div>\r\n                {this.state.city ?(\r\n                    <Forecast lat={this.state.lat} lon={this.state.lon}/>   \r\n                ):null}\r\n                 \r\n                </div>   \r\n            </div>\r\n            \r\n        )\r\n    }\r\n}\r\nexport default CurrentWeather"]},"metadata":{},"sourceType":"module"}