{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vened\\\\Desktop\\\\Pogoda\\\\my_weather\\\\client\\\\src\\\\components\\\\AirCondition\\\\AirCondition.js\";\nimport React from 'react';\nimport WeatherItem from '../currentWeather/WeatherItem';\nimport Form from '../Form/Form';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_key = \"157d33f8987d245bc6a1997408e90015\";\n\nclass AirCondition extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      value: \"\",\n      city: \"\",\n      country: \"\",\n      weather: undefined,\n      temp: undefined,\n      tempMax: undefined,\n      tempMin: undefined,\n      pressurre: undefined,\n      wind: undefined,\n      lat: undefined,\n      lon: undefined,\n      error: false\n    };\n\n    this.getWeather = e => {\n      e.preventDefault();\n      fetch(`http://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&APPID=${API_key}`).then(response => {\n        if (response.ok) {\n          return response;\n        }\n\n        throw Error(\"Błąd pobierania danych z API\");\n      }).then(response => response.json()).then(response => {\n        const localTime = new Date().toLocaleString();\n        console.log(response);\n        this.setState(state => ({\n          city: state.value,\n          country: response.sys.country,\n          date: this.calDate(response.dt),\n          time: this.calTime(response.dt, response.timezone),\n          weather: response.weather[0].description,\n          temp: this.calCelsius(response.main.temp),\n          tempMax: this.calCelsius(response.main.temp_max),\n          tempMin: this.calCelsius(response.main.temp_min),\n          pressure: response.main.pressure,\n          wind: this.calWindSpeed(response.wind.speed),\n          lat: response.coord.lat,\n          lon: response.coord.lon,\n          error: false\n        }));\n        fetch(`http://api.openweathermap.org/data/2.5/air_pollution?lat=${response.coord.lat}&lon=20.6275&appid=${API_key}`).then(response2 => {\n          if (response2.ok) {\n            return response2;\n          }\n\n          throw Error(\"Błąd pobierania danych z API\");\n        }).then(response2 => response2.json()).then(response2 => {\n          console.log(response2);\n          this.setState(state => ({\n            error: false\n          }));\n        }).catch(err => {\n          console.log(err);\n          this.setState(prevState => {\n            return {\n              error: true,\n              city: prevState.city\n            };\n          });\n        });\n      }).catch(err => {\n        console.log(err);\n        this.setState(prevState => {\n          return {\n            error: true,\n            city: prevState.city\n          };\n        });\n      });\n    };\n\n    this.inputHandler = e => {\n      this.setState({\n        value: e.target.value\n      });\n    };\n\n    this.submitHandler = e => {\n      this.getWeather(e);\n    };\n  }\n\n  calDate(time) {\n    var date = new Date(time * 1000); // Hours part from the timestamp\n\n    var year = date.getFullYear();\n    var month = date.getMonth() + 1;\n    var day = date.getDate();\n    var daytime = day + '-' + 0 + month + '-' + year;\n    return daytime;\n  }\n\n  calTime(time, timezone) {\n    var date = new Date(time * 1000 + timezone * 1000 - 7200000);\n    var hours = date.getHours(); // Minutes part from the timestamp\n\n    var minutes = date.getMinutes(); // Seconds part from the timestamp\n\n    var seconds = date.getSeconds();\n    var daytime = hours + ':' + minutes + ':' + seconds;\n    return daytime;\n  }\n\n  calCelsius(temp) {\n    let cell = Math.floor(temp - 273.15);\n    return cell;\n  }\n\n  calWindSpeed(wind) {\n    let cell = Math.floor(wind * 3.6);\n    return cell;\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Pogoda\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Form, {\n          value: this.state.value,\n          handler: this.inputHandler,\n          submit: this.submitHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 17\n      }, this), this.state.city]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default AirCondition;","map":{"version":3,"sources":["C:/Users/vened/Desktop/Pogoda/my_weather/client/src/components/AirCondition/AirCondition.js"],"names":["React","WeatherItem","Form","API_key","AirCondition","Component","state","value","city","country","weather","undefined","temp","tempMax","tempMin","pressurre","wind","lat","lon","error","getWeather","e","preventDefault","fetch","then","response","ok","Error","json","localTime","Date","toLocaleString","console","log","setState","sys","date","calDate","dt","time","calTime","timezone","description","calCelsius","main","temp_max","temp_min","pressure","calWindSpeed","speed","coord","response2","catch","err","prevState","inputHandler","target","submitHandler","year","getFullYear","month","getMonth","day","getDate","daytime","hours","getHours","minutes","getMinutes","seconds","getSeconds","cell","Math","floor","render"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport WeatherItem from '../currentWeather/WeatherItem';\r\nimport Form from '../Form/Form'\r\n\r\nconst API_key=\"157d33f8987d245bc6a1997408e90015\"\r\n\r\n\r\nclass AirCondition extends React.Component{\r\n    state={\r\n        value:\"\",\r\n        city:\"\",\r\n        country:\"\",\r\n        weather:undefined,\r\n        temp:undefined,\r\n        tempMax:undefined,\r\n        tempMin:undefined,\r\n        pressurre:undefined,\r\n        wind:undefined,\r\n        lat:undefined,\r\n        lon:undefined,\r\n        error:false\r\n    }\r\n    calDate(time){\r\n        var date = new Date(time * 1000);\r\n        // Hours part from the timestamp\r\n        var year = date.getFullYear();\r\n        var month = date.getMonth()+1;\r\n        var day = date.getDate();\r\n        var daytime=day+'-'+0+month+'-'+year;\r\n        return daytime;\r\n      }\r\n      calTime(time,timezone){\r\n        var date = new Date(time*1000+timezone*1000-7200000);\r\n        var hours = date.getHours();\r\n        // Minutes part from the timestamp\r\n        var minutes = date.getMinutes();\r\n        // Seconds part from the timestamp\r\n        var seconds = date.getSeconds();\r\n\r\n        var daytime=hours+':'+minutes+':'+seconds;\r\n        return daytime;\r\n      }\r\n    calCelsius(temp){\r\n        let cell= Math.floor(temp-273.15)\r\n        return cell;\r\n    }\r\n    calWindSpeed(wind){\r\n        let cell= Math.floor(wind*3.6)\r\n        return cell;\r\n    }\r\n    getWeather = (e) =>{\r\n        \r\n        e.preventDefault()\r\n          \r\n          fetch(`http://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&APPID=${API_key}`)\r\n          .then(response => {\r\n              if(response.ok){\r\n                  return response\r\n              }\r\n              throw Error(\"Błąd pobierania danych z API\")\r\n          })\r\n          .then(response => response.json())\r\n          .then(response => {\r\n              const localTime = new Date().toLocaleString()\r\n              console.log(response)\r\n              this.setState(state =>({\r\n                city:state.value,\r\n                country:response.sys.country,\r\n                date:this.calDate(response.dt),\r\n                time:this.calTime(response.dt,response.timezone),\r\n                weather:response.weather[0].description,\r\n                temp:this.calCelsius(response.main.temp),\r\n                tempMax:this.calCelsius(response.main.temp_max),\r\n                tempMin:this.calCelsius(response.main.temp_min),\r\n                pressure:response.main.pressure,\r\n                wind:this.calWindSpeed(response.wind.speed),\r\n                lat:response.coord.lat,\r\n                lon:response.coord.lon, \r\n                error:false\r\n              }))\r\n              fetch(`http://api.openweathermap.org/data/2.5/air_pollution?lat=${response.coord.lat}&lon=20.6275&appid=${API_key}`)\r\n          .then(response2 => {\r\n              if(response2.ok){\r\n                  return response2\r\n              }\r\n              throw Error(\"Błąd pobierania danych z API\")\r\n          })\r\n          .then(response2 => response2.json())\r\n          .then(response2 => {\r\n              console.log(response2)\r\n              this.setState(state =>({\r\n                error:false\r\n              }))\r\n          })\r\n          .catch(err =>{\r\n            console.log(err)\r\n            this.setState(prevState =>{\r\n                return{\r\n                error:true,\r\n                city:prevState.city\r\n            }})\r\n        })\r\n          })\r\n          .catch(err =>{\r\n            console.log(err)\r\n            this.setState(prevState =>{\r\n                return{\r\n                error:true,\r\n                city:prevState.city\r\n            }})\r\n        })\r\n    }\r\n    inputHandler=(e)=>{\r\n        this.setState({\r\n            value:e.target.value\r\n        })\r\n    }\r\n    submitHandler=(e)=>{\r\n        this.getWeather(e)\r\n    }\r\n    render(){\r\n        \r\n        return(\r\n            <div >\r\n                <h1>Pogoda</h1>\r\n                <div>\r\n                <Form \r\n                value={this.state.value}  \r\n                handler={this.inputHandler}\r\n                submit={this.submitHandler}\r\n                /> \r\n                </div> \r\n                {this.state.city}\r\n            </div>\r\n            \r\n        )\r\n    }\r\n}\r\nexport default AirCondition"]},"metadata":{},"sourceType":"module"}