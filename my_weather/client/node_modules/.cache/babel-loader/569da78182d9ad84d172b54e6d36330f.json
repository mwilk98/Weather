{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vened\\\\Desktop\\\\Pogoda\\\\my_weather\\\\client\\\\src\\\\components\\\\currentWeather\\\\CurrentWeather.js\";\nimport React, { useState, useEffect } from 'react';\nimport WeatherItem from './WeatherItem';\nimport Forecast from '../forecast/Forecast';\nimport Form from '../Form/Form';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_key = \"157d33f8987d245bc6a1997408e90015\"; //const city = \"Kielce\"\n//const country = \"PL\"\n\nclass CurrentWeather extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      value: \"\",\n      city: \"\",\n      country: \"\",\n      weather: undefined,\n      temp: undefined,\n      tempMax: undefined,\n      tempMin: undefined,\n      pressurre: undefined,\n      wind: undefined,\n      error: false\n    };\n\n    this.getWeather = e => {\n      e.preventDefault();\n      fetch(`http://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&APPID=${API_key}`).then(response => {\n        if (response.ok) {\n          return response;\n        }\n\n        throw Error(\"Błąd pobierania danych z API\");\n      }).then(response => response.json()).then(response => {\n        const localTime = new Date().toLocaleString();\n        console.log(response);\n        this.setState(state => ({\n          city: state.value,\n          country: response.sys.country,\n          date: this.calDate(response.dt),\n          time: this.calTime(response.dt, response.timezone),\n          weather: response.weather[0].description,\n          temp: this.calCelsius(response.main.temp),\n          tempMax: this.calCelsius(response.main.temp_max),\n          tempMin: this.calCelsius(response.main.temp_min),\n          pressure: response.main.pressure,\n          wind: this.calWindSpeed(response.wind.speed),\n          lat: response.coord.lat,\n          lon: response.coord.lon,\n          error: false\n        }));\n      }).catch(err => {\n        console.log(err);\n        this.setState(prevState => {\n          return {\n            error: true,\n            city: prevState.city\n          };\n        });\n      });\n    };\n\n    this.submitCurrentWeather = () => {\n      this.setState({\n        value: value\n      });\n    };\n\n    this.inputHandler = e => {\n      this.setState({\n        value: e.target.value\n      });\n    };\n\n    this.submitHandler = e => {\n      this.getWeather(e);\n    };\n  }\n\n  calDate(time) {\n    var date = new Date(time * 1000); // Hours part from the timestamp\n\n    var year = date.getFullYear();\n    var month = date.getMonth() + 1;\n    var day = date.getDate();\n    var daytime = day + '-' + 0 + month + '-' + year;\n    return daytime;\n  }\n\n  calTime(time, timezone) {\n    var date = new Date(time * 1000 + timezone * 1000 - 7200000);\n    var hours = date.getHours(); // Minutes part from the timestamp\n\n    var minutes = date.getMinutes(); // Seconds part from the timestamp\n\n    var seconds = date.getSeconds();\n    var daytime = hours + ':' + minutes + ':' + seconds;\n    return daytime;\n  }\n\n  calCelsius(temp) {\n    let cell = Math.floor(temp - 273.15);\n    return cell;\n  }\n\n  calWindSpeed(wind) {\n    let cell = Math.floor(wind * 3.6);\n    return cell;\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Pogoda\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"user-form\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Miejsce\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"cityName\",\n          onChange: e => {\n            setCityName(e.target.value);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: submitWeather,\n          children: \"Dodaj\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: this.state.city ? /*#__PURE__*/_jsxDEV(WeatherItem, {\n          weather: this.state\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 21\n        }, this) : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: this.state.city ? /*#__PURE__*/_jsxDEV(Forecast, {\n          lat: this.state.lat,\n          lon: this.state.lon\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 21\n        }, this) : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default CurrentWeather;","map":{"version":3,"sources":["C:/Users/vened/Desktop/Pogoda/my_weather/client/src/components/currentWeather/CurrentWeather.js"],"names":["React","useState","useEffect","WeatherItem","Forecast","Form","API_key","CurrentWeather","Component","state","value","city","country","weather","undefined","temp","tempMax","tempMin","pressurre","wind","error","getWeather","e","preventDefault","fetch","then","response","ok","Error","json","localTime","Date","toLocaleString","console","log","setState","sys","date","calDate","dt","time","calTime","timezone","description","calCelsius","main","temp_max","temp_min","pressure","calWindSpeed","speed","lat","coord","lon","catch","err","prevState","submitCurrentWeather","inputHandler","target","submitHandler","year","getFullYear","month","getMonth","day","getDate","daytime","hours","getHours","minutes","getMinutes","seconds","getSeconds","cell","Math","floor","render","setCityName","submitWeather"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react'\r\nimport WeatherItem from './WeatherItem';\r\nimport Forecast from '../forecast/Forecast'\r\nimport Form from '../Form/Form'\r\n\r\nconst API_key=\"157d33f8987d245bc6a1997408e90015\"\r\n//const city = \"Kielce\"\r\n//const country = \"PL\"\r\n\r\nclass CurrentWeather extends React.Component{\r\n    state={\r\n        value:\"\",\r\n        city:\"\",\r\n        country:\"\",\r\n        weather:undefined,\r\n        temp:undefined,\r\n        tempMax:undefined,\r\n        tempMin:undefined,\r\n        pressurre:undefined,\r\n        wind:undefined,\r\n        error:false\r\n    }\r\n    calDate(time){\r\n        var date = new Date(time * 1000);\r\n        // Hours part from the timestamp\r\n        var year = date.getFullYear();\r\n        var month = date.getMonth()+1;\r\n        var day = date.getDate();\r\n        var daytime=day+'-'+0+month+'-'+year;\r\n        return daytime;\r\n      }\r\n      calTime(time,timezone){\r\n        var date = new Date(time*1000+timezone*1000-7200000);\r\n        var hours = date.getHours();\r\n        // Minutes part from the timestamp\r\n        var minutes = date.getMinutes();\r\n        // Seconds part from the timestamp\r\n        var seconds = date.getSeconds();\r\n\r\n        var daytime=hours+':'+minutes+':'+seconds;\r\n        return daytime;\r\n      }\r\n    calCelsius(temp){\r\n        let cell= Math.floor(temp-273.15)\r\n        return cell;\r\n    }\r\n    calWindSpeed(wind){\r\n        let cell= Math.floor(wind*3.6)\r\n        return cell;\r\n    }\r\n    getWeather = (e) =>{\r\n        \r\n        e.preventDefault()\r\n          \r\n          fetch(`http://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&APPID=${API_key}`)\r\n          .then(response => {\r\n              if(response.ok){\r\n                  return response\r\n              }\r\n              throw Error(\"Błąd pobierania danych z API\")\r\n          })\r\n          .then(response => response.json())\r\n          .then(response => {\r\n              const localTime = new Date().toLocaleString()\r\n              console.log(response)\r\n              this.setState(state =>({\r\n                city:state.value,\r\n                country:response.sys.country,\r\n                date:this.calDate(response.dt),\r\n                time:this.calTime(response.dt,response.timezone),\r\n                weather:response.weather[0].description,\r\n                temp:this.calCelsius(response.main.temp),\r\n                tempMax:this.calCelsius(response.main.temp_max),\r\n                tempMin:this.calCelsius(response.main.temp_min),\r\n                pressure:response.main.pressure,\r\n                wind:this.calWindSpeed(response.wind.speed),\r\n                lat:response.coord.lat,\r\n                lon:response.coord.lon, \r\n                error:false\r\n              }))\r\n          })\r\n          .catch(err =>{\r\n            console.log(err)\r\n            this.setState(prevState =>{\r\n                return{\r\n                error:true,\r\n                city:prevState.city\r\n            }})\r\n        })\r\n    }\r\n    submitCurrentWeather = () =>{\r\n\r\n        this.setState({\r\n            value:value\r\n        })\r\n        }\r\n    inputHandler=(e)=>{\r\n        this.setState({\r\n            value:e.target.value\r\n        })\r\n    }\r\n    submitHandler=(e)=>{\r\n        this.getWeather(e)\r\n    }\r\n    render(){\r\n        \r\n        return(\r\n            <div >\r\n                <h1>Pogoda</h1>\r\n                <div className='user-form'>\r\n                    <label>Miejsce</label>\r\n                    <input type=\"text\" name=\"cityName\" onChange={(e)=>{\r\n                        setCityName(e.target.value)\r\n                    }}/>\r\n                    <button onClick={submitWeather}>Dodaj</button>\r\n                </div>\r\n                <div>\r\n                {this.state.city ?(\r\n                    <WeatherItem weather={this.state}/>   \r\n                ):null}\r\n                </div>\r\n                <div>\r\n                {this.state.city ?(\r\n                    <Forecast lat={this.state.lat} lon={this.state.lon}/>   \r\n                ):null}\r\n                 \r\n                </div>   \r\n            </div>\r\n            \r\n        )\r\n    }\r\n}\r\nexport default CurrentWeather"]},"metadata":{},"sourceType":"module"}