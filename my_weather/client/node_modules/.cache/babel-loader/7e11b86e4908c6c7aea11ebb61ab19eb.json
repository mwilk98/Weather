{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vened\\\\Desktop\\\\Weather\\\\my_weather\\\\client\\\\src\\\\components\\\\AirCondition\\\\AirCondition.js\";\nimport React from 'react';\nimport Form from '../Form/Form';\nimport CalDate from '../Functions/CalDate';\nimport CalTime from '../Functions/CalTime';\nimport AirConditionItem from './AirConditionItem';\nimport './AirCondition.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_key = \"157d33f8987d245bc6a1997408e90015\";\n\nclass AirCondition extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getAir = e => {\n      e.preventDefault();\n      fetch(`http://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&APPID=${API_key}`).then(response => {\n        if (responseAirQuality.ok) {\n          return responseAirQuality;\n        } else {\n          this.setState(state => ({\n            errorCity: true\n          }));\n          throw Error(\"Błąd pobierania danych z API\");\n        }\n      }).then(response => response.json()).then(response => {\n        console.log(response);\n        this.getAirQuality(response.coord.lat, response.coord.lon);\n        this.setState(state => ({\n          city: state.value,\n          country: response.sys.country,\n          date: CalDate(response.dt, response.timezone),\n          time: CalTime(response.dt, response.timezone),\n          error: false\n        }));\n      }).catch(err => {\n        console.log(err);\n        this.setState(prevState => {\n          return {\n            error: true,\n            city: prevState.city\n          };\n        });\n      });\n    };\n\n    this.inputHandler = e => {\n      this.setState({\n        value: e.target.value\n      });\n    };\n\n    this.submitHandler = e => {\n      this.getAir(e);\n    };\n\n    this.state = {\n      value: \"\",\n      city: \"Miasto\",\n      country: \"\",\n      aqi: undefined,\n      co: undefined,\n      nh3: undefined,\n      no: undefined,\n      no2: undefined,\n      o3: undefined,\n      pm2_5: undefined,\n      pm10: undefined,\n      so2: undefined,\n      error: false\n    };\n  }\n\n  getAirQuality(lat, lon) {\n    var result = null;\n    result = fetch(`http://api.openweathermp.org/data/2.5/air_pollution?lat=${lat}&lon=${lon}&appid=${API_key}`).then(responseAirQuality => {\n      if (responseAirQuality.ok) {\n        return responseAirQuality;\n      } else {\n        this.setState(state => ({\n          errorCity: true\n        }));\n        throw Error(\"Błąd pobierania danych z API\");\n      }\n    }).then(responseAirQuality => responseAirQuality.json()).then(responseAirQuality => {\n      console.log(responseAirQuality);\n      this.setState(state => ({\n        co: responseAirQuality.list[0].components.co,\n        nh3: responseAirQuality.list[0].components.nh3,\n        no: responseAirQuality.list[0].components.no,\n        no2: responseAirQuality.list[0].components.no2,\n        o3: responseAirQuality.list[0].components.o3,\n        pm2_5: responseAirQuality.list[0].components.pm2_5,\n        pm10: responseAirQuality.list[0].components.pm10,\n        so2: responseAirQuality.list[0].components.so2,\n        color: responseAirQuality.list[0].main.aqi,\n        error: false\n      }));\n      return fetch(`http://api.openweathermap.org/data/2.5/air_pollution?lat=${lat}&lon=${lon}&appid=${API_key}`);\n    }).then(responseAirQuality => responseAirQuality.json()).catch(err => {\n      console.log(err);\n      this.setState(prevState => {\n        return {\n          error: true,\n          city: prevState.city\n        };\n      });\n    });\n\n    if (!result) {\n      result.then(r => {\n        fetch(`http://localhost:3001/api/air`).then(responseAir => {\n          if (responseAir.ok) {\n            return responseAir;\n          }\n\n          throw Error(\"Błąd pobierania danych z API\");\n        }).then(responseAir => responseAir.json()).then(responseAir => {\n          console.log(responseAir);\n          console.log(r);\n          this.setState(state => ({\n            aqi: responseAir[r.list[0].main.aqi - 1].condition,\n            error: false\n          }));\n        });\n      });\n    } else {\n      /*#__PURE__*/\n      _jsxDEV(\"h1\", {\n        children: \"Brak Danych\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 13\n      }, this);\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main\",\n      style: {\n        backgroundImage: `url(\"/images/bg_air.jpg\")`\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"city-form\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Wyszukaj miasto dla kt\\xF3rego chcesz sprawdzi\\u0107 obecny stan powietrza\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Form, {\n          value: this.state.value,\n          handler: this.inputHandler,\n          submit: this.submitHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: this.state.city ? /*#__PURE__*/_jsxDEV(AirConditionItem, {\n          air: this.state\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 25\n        }, this) : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\n;\nexport default AirCondition;","map":{"version":3,"sources":["C:/Users/vened/Desktop/Weather/my_weather/client/src/components/AirCondition/AirCondition.js"],"names":["React","Form","CalDate","CalTime","AirConditionItem","API_key","AirCondition","Component","constructor","props","getAir","e","preventDefault","fetch","state","value","then","response","responseAirQuality","ok","setState","errorCity","Error","json","console","log","getAirQuality","coord","lat","lon","city","country","sys","date","dt","timezone","time","error","catch","err","prevState","inputHandler","target","submitHandler","aqi","undefined","co","nh3","no","no2","o3","pm2_5","pm10","so2","result","list","components","color","main","r","responseAir","condition","render","backgroundImage"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport Form from '../Form/Form'\r\nimport CalDate from '../Functions/CalDate';\r\nimport CalTime from '../Functions/CalTime';\r\nimport AirConditionItem from './AirConditionItem';\r\nimport './AirCondition.css';\r\n\r\nconst API_key=\"157d33f8987d245bc6a1997408e90015\";\r\n\r\nclass AirCondition extends React.Component\r\n{\r\n    constructor(props)\r\n    {\r\n        super(props)\r\n        this.state=\r\n        {\r\n        value:\"\",\r\n        city:\"Miasto\",\r\n        country:\"\",\r\n        aqi:undefined,\r\n        co:undefined,\r\n        nh3:undefined,\r\n        no:undefined,\r\n        no2:undefined,\r\n        o3:undefined,\r\n        pm2_5:undefined,\r\n        pm10:undefined,\r\n        so2:undefined,\r\n        error:false\r\n        };\r\n    };\r\n    \r\n    getAir = (e) =>\r\n    {\r\n        e.preventDefault()\r\n          \r\n        fetch(`http://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&APPID=${API_key}`)\r\n        .then(response => \r\n        {\r\n            if(responseAirQuality.ok)\r\n            {\r\n                return responseAirQuality;\r\n            }else{\r\n                this.setState(state =>(\r\n                    {\r\n                        errorCity:true\r\n                    }))\r\n            throw Error(\"Błąd pobierania danych z API\")\r\n            }\r\n        })\r\n        .then(response => response.json())\r\n        .then(response => \r\n        {\r\n            console.log(response);\r\n            this.getAirQuality(response.coord.lat,response.coord.lon);\r\n            this.setState(state =>(\r\n            {\r\n                city:state.value,\r\n                country:response.sys.country,\r\n                date:CalDate(response.dt,response.timezone),\r\n                time:CalTime(response.dt,response.timezone), \r\n                error:false\r\n            }));\r\n\r\n        })\r\n        .catch(err =>\r\n        {\r\n            console.log(err);\r\n\r\n            this.setState(prevState =>\r\n            {\r\n                return{\r\n                error:true,\r\n                city:prevState.city\r\n                }\r\n            });\r\n        });\r\n    };\r\n    getAirQuality(lat,lon)\r\n    {\r\n        var result = null;\r\n        result = fetch(`http://api.openweathermp.org/data/2.5/air_pollution?lat=${lat}&lon=${lon}&appid=${API_key}`)\r\n        .then(responseAirQuality => \r\n        {\r\n            if(responseAirQuality.ok)\r\n            {\r\n                return responseAirQuality;\r\n            }else{\r\n                this.setState(state =>(\r\n                    {\r\n                        errorCity:true\r\n                    }))\r\n            throw Error(\"Błąd pobierania danych z API\")\r\n            }\r\n        })\r\n        .then(responseAirQuality => responseAirQuality.json())\r\n        .then(responseAirQuality => \r\n        {\r\n              \r\n            console.log(responseAirQuality);\r\n            this.setState(state =>(\r\n            {\r\n                co:responseAirQuality.list[0].components.co,\r\n                nh3:responseAirQuality.list[0].components.nh3,\r\n                no:responseAirQuality.list[0].components.no,\r\n                no2:responseAirQuality.list[0].components.no2,\r\n                o3:responseAirQuality.list[0].components.o3,\r\n                pm2_5:responseAirQuality.list[0].components.pm2_5,\r\n                pm10:responseAirQuality.list[0].components.pm10,\r\n                so2:responseAirQuality.list[0].components.so2,\r\n                color:responseAirQuality.list[0].main.aqi,\r\n                error:false\r\n            }))\r\n              return fetch(`http://api.openweathermap.org/data/2.5/air_pollution?lat=${lat}&lon=${lon}&appid=${API_key}`);\r\n        })\r\n        .then(responseAirQuality => responseAirQuality.json())         \r\n        .catch(err =>\r\n        {\r\n            console.log(err);\r\n            this.setState(prevState =>\r\n            {\r\n                return{\r\n                    error:true,\r\n                    city:prevState.city\r\n                }\r\n            });\r\n        });\r\n        if(!result){\r\n        result.then(r =>\r\n        {\r\n            fetch(`http://localhost:3001/api/air`)\r\n            .then(responseAir => \r\n            {\r\n                if(responseAir.ok)\r\n                {\r\n                    return responseAir;\r\n                \r\n                }\r\n                    throw Error(\"Błąd pobierania danych z API\");\r\n            })\r\n            .then(responseAir => responseAir.json())\r\n            .then(responseAir => \r\n            {\r\n                console.log(responseAir);\r\n\r\n                console.log(r);\r\n            \r\n                this.setState(state =>(\r\n                {\r\n                    aqi:responseAir[r.list[0].main.aqi-1].condition,\r\n                    error:false\r\n                }));\r\n            });\r\n        });\r\n        }\r\n        else{\r\n            <h1>Brak Danych</h1>\r\n        } \r\n    };\r\n\r\n    inputHandler=(e)=>\r\n    {\r\n        this.setState(\r\n        {\r\n            value:e.target.value\r\n        });\r\n    };\r\n\r\n    submitHandler=(e)=>\r\n    {\r\n        this.getAir(e);\r\n    };\r\n    render(){\r\n        return(\r\n            <div className=\"main\"   style={\r\n                                    { \r\n                                        backgroundImage: `url(\"/images/bg_air.jpg\")` \r\n                                    }\r\n            }>\r\n                <div className=\"city-form\">\r\n                    <h1>Wyszukaj miasto dla którego chcesz sprawdzić obecny stan powietrza</h1>\r\n                    <Form \r\n                        value={this.state.value}  \r\n                        handler={this.inputHandler}\r\n                        submit={this.submitHandler}\r\n                    /> \r\n                </div> \r\n                <div>\r\n                    {this.state.city ?(\r\n                        <AirConditionItem air={this.state}/>   \r\n                    ):null}\r\n                </div>\r\n            </div>\r\n        );\r\n    };\r\n};\r\nexport default AirCondition;"]},"metadata":{},"sourceType":"module"}